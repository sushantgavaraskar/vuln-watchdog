'use client';

import { useState } from 'react';
import { AlertTriangle, ChevronDown, ChevronUp, ExternalLink, Calendar } from 'lucide-react';
import { Issue } from '@/types';
import { Modal } from './Modal';

interface VulnerabilityCardProps {
  vulnerability: Issue;
  dependencyName: string;
  dependencyVersion: string;
}

const severityColors = {
  CRITICAL: 'bg-red-600 text-white',
  HIGH: 'bg-orange-500 text-white',
  MEDIUM: 'bg-yellow-500 text-white',
  LOW: 'bg-blue-500 text-white',
};

const severityIcons = {
  CRITICAL: 'ðŸ”´',
  HIGH: 'ðŸŸ ',
  MEDIUM: 'ðŸŸ¡',
  LOW: 'ðŸ”µ',
};

export const VulnerabilityCard: React.FC<VulnerabilityCardProps> = ({
  vulnerability,
  dependencyName,
  dependencyVersion,
}) => {
  const [isExpanded, setIsExpanded] = useState(false);
  const [isModalOpen, setIsModalOpen] = useState(false);

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'short',
      day: 'numeric',
    });
  };

  return (
    <>
      <div className="bg-white border border-gray-200 rounded-lg shadow-sm hover:shadow-md transition-shadow">
        <div className="p-4">
          <div className="flex items-start justify-between">
            <div className="flex-1">
              <div className="flex items-center space-x-2 mb-2">
                <span className="text-lg">{severityIcons[vulnerability.severity]}</span>
                <h3 className="text-lg font-semibold text-gray-900">
                  {vulnerability.title}
                </h3>
                <span
                  className={`px-2 py-1 text-xs font-medium rounded-full ${severityColors[vulnerability.severity]}`}
                >
                  {vulnerability.severity}
                </span>
              </div>
              
              <div className="text-sm text-gray-600 mb-3">
                <p><strong>Dependency:</strong> {dependencyName}@{dependencyVersion}</p>
                {vulnerability.cveId && (
                  <p><strong>CVE ID:</strong> {vulnerability.cveId}</p>
                )}
                <p className="flex items-center text-gray-500">
                  <Calendar className="h-4 w-4 mr-1" />
                  {formatDate(vulnerability.createdAt)}
                </p>
              </div>

              {vulnerability.description && (
                <div className="mb-3">
                  <p className="text-sm text-gray-700 line-clamp-2">
                    {vulnerability.description}
                  </p>
                </div>
              )}
            </div>

            <div className="flex items-center space-x-2">
              <button
                onClick={() => setIsModalOpen(true)}
                className="text-blue-600 hover:text-blue-800 text-sm font-medium flex items-center"
              >
                <ExternalLink className="h-4 w-4 mr-1" />
                Details
              </button>
              <button
                onClick={() => setIsExpanded(!isExpanded)}
                className="text-gray-400 hover:text-gray-600"
              >
                {isExpanded ? (
                  <ChevronUp className="h-5 w-5" />
                ) : (
                  <ChevronDown className="h-5 w-5" />
                )}
              </button>
            </div>
          </div>

          {isExpanded && vulnerability.description && (
            <div className="mt-4 pt-4 border-t border-gray-200">
              <h4 className="text-sm font-medium text-gray-900 mb-2">Full Description</h4>
              <p className="text-sm text-gray-700 whitespace-pre-wrap">
                {vulnerability.description}
              </p>
            </div>
          )}
        </div>
      </div>

      {/* Detail Modal */}
      <Modal
        isOpen={isModalOpen}
        onClose={() => setIsModalOpen(false)}
        title="Vulnerability Details"
        size="lg"
      >
        <div className="space-y-6">
          {/* Header */}
          <div className="flex items-center space-x-3">
            <div className={`p-2 rounded-lg ${severityColors[vulnerability.severity]}`}>
              <AlertTriangle className="h-6 w-6" />
            </div>
            <div>
              <h2 className="text-xl font-bold text-gray-900">{vulnerability.title}</h2>
              <p className="text-sm text-gray-600">
                {dependencyName}@{dependencyVersion}
              </p>
            </div>
          </div>

          {/* Details Grid */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <h3 className="text-sm font-medium text-gray-900 mb-2">Severity</h3>
              <span
                className={`inline-flex px-3 py-1 text-sm font-medium rounded-full ${severityColors[vulnerability.severity]}`}
              >
                {vulnerability.severity}
              </span>
            </div>

            {vulnerability.cveId && (
              <div>
                <h3 className="text-sm font-medium text-gray-900 mb-2">CVE ID</h3>
                <p className="text-sm text-gray-700">{vulnerability.cveId}</p>
              </div>
            )}

            <div>
              <h3 className="text-sm font-medium text-gray-900 mb-2">Discovered</h3>
              <p className="text-sm text-gray-700">{formatDate(vulnerability.createdAt)}</p>
            </div>

            <div>
              <h3 className="text-sm font-medium text-gray-900 mb-2">Dependency</h3>
              <p className="text-sm text-gray-700">{dependencyName}@{dependencyVersion}</p>
            </div>
          </div>

          {/* Description */}
          {vulnerability.description && (
            <div>
              <h3 className="text-sm font-medium text-gray-900 mb-2">Description</h3>
              <div className="bg-gray-50 rounded-lg p-4">
                <p className="text-sm text-gray-700 whitespace-pre-wrap">
                  {vulnerability.description}
                </p>
              </div>
            </div>
          )}

          {/* Actions */}
          <div className="flex justify-end space-x-3 pt-4 border-t border-gray-200">
            {vulnerability.cveId && (
              <a
                href={`https://nvd.nist.gov/vuln/detail/${vulnerability.cveId}`}
                target="_blank"
                rel="noopener noreferrer"
                className="inline-flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500"
              >
                <ExternalLink className="h-4 w-4 mr-2" />
                View on NVD
              </a>
            )}
            <button
              onClick={() => setIsModalOpen(false)}
              className="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-red-600 hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500"
            >
              Close
            </button>
          </div>
        </div>
      </Modal>
    </>
  );
};
