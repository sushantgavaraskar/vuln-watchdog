├─ ./
│   ├─ .cursorignore

│   # --- Begin: .cursorignore ---
!.env
!.env.example
!.env.local
│   # --- End: .cursorignore ---

│   ├─ .cursorrules

│   # --- Begin: .cursorrules ---
Once a task is initiated, do not exit, switch, or alter focus until the task is completed, verified, or explicitly paused with intention
│   # --- End: .cursorrules ---

│   ├─ .gitignore

│   # --- Begin: .gitignore ---
.cursorignore
│   # --- End: .gitignore ---

│   ├─ docker-compose.yml

│   # --- Begin: docker-compose.yml ---
version: '3.8'
services:
  db:
    image: postgres:15
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: vulnwatchdog
    ports:
      - "5432:5432"
    volumes:
      - db_data:/var/lib/postgresql/data

  backend:
    build: ./server
    environment:
      DATABASE_URL: postgres://postgres:postgres@db:5432/vulnwatchdog
      EMAIL_USER: your_email@gmail.com
      EMAIL_PASS: your_email_password
      JWT_SECRET: your_jwt_secret
      SNYK_TOKEN: your_snyk_api_token_here
    ports:
      - "5000:5000"
    depends_on:
      - db

  frontend:
    build: ./client
    environment:
      NEXTAUTH_URL: http://localhost:3000
    ports:
      - "3000:3000"
    depends_on:
      - backend

volumes:
  db_data:
│   # --- End: docker-compose.yml ---

│   ├─ project.txt

│   # --- Begin: project.txt ---

│   # --- End: project.txt ---

│   ├─ README.md

│   # --- Begin: README.md ---
# 🛡️ VulnWatchdog – Project Architecture & Design

> Automated Dependency Vulnerability Monitor

---

## 📁 Project Structure Overview

### 🧠 Summary

VulnWatchdog is a full-stack platform for automated monitoring of open-source dependency vulnerabilities. Users can upload dependency files (e.g., `package.json`, `requirements.txt`), trigger scans, receive alerts, and manage projects. The system is designed for extensibility, security, and real-world DevSecOps workflows.

---

## ⚙️ Backend (Node.js + Express + PostgreSQL + Prisma)

### 📂 Folder Structure

```
server/
├── controllers/         # Handle HTTP request logic
├── services/            # Business logic for scanning, alerts, etc.
├── routes/              # All REST API route definitions
├── middlewares/         # Auth, error handler, etc.
├── utils/               # Helpers (file parser, logger, version comparer)
├── jobs/                # Cron jobs (daily/weekly scanners)
├── prisma/              # Prisma schema and migrations
├── config/              # DB, env, API config
├── app.js               # Express app setup
├── server.js            # Entry point
└── package.json
```

### 📜 File & Folder Descriptions
- **controllers/**: Route handlers for auth, project, scan, alerts, admin, notifications
- **services/**: Business logic for auth, dependency analysis, scan orchestration, email, notifications
- **routes/**: REST API endpoints (auth, project, scan, alerts, notifications, admin, webhooks)
- **middlewares/**: JWT auth, error handler, rate limiter, admin check
- **utils/**: File parsing, CVE fetching, logging, version checking
- **jobs/**: Scheduled scans, alert dispatch, notification delivery
- **prisma/**: Database schema and migrations
- **config/**: DB connection, environment, external API keys

---

## 🧬 Prisma Schema (Database)

- **Users**: Auth, alert config, profile, role
- **Projects**: User projects
- **Dependencies**: Project dependencies
- **Issues**: Vulnerabilities per dependency
- **Notifications**: In-app notifications (NEW)
- **Collaborators**: Project team members (NEW)
- **AuditLogs**: Security/audit events (NEW)

---

## 📦 Backend Dependencies

```
npm i express prisma @prisma/client jsonwebtoken bcryptjs cors dotenv helmet
npm i node-cron nodemailer axios multer express-validator winston
```
Dev:
```
npm i -D nodemon
```

---

## 🔌 Backend API Routes Summary

| Method | Endpoint                       | Functionality                        |
| ------ | ------------------------------ | ------------------------------------ |
| POST   | `/api/auth/register`           | Register user                        |
| POST   | `/api/auth/login`              | Login & token                        |
| GET    | `/api/user/profile`            | Get user profile & alert config      |
| PUT    | `/api/user/profile`            | Update user profile & alert config   |
| GET    | `/api/project/`                | List projects                        |
| POST   | `/api/project/`                | Create new project                   |
| GET    | `/api/project/:id`             | Get project details                  |
| POST   | `/api/project/:id/collaborator`| Add collaborator to project (NEW)    |
| GET    | `/api/scan/history/:projectId` | Get scan history for project (NEW)   |
| POST   | `/api/scan/`                   | Submit deps file, initiate scan      |
| GET    | `/api/scan/:projectId`         | Get scan results                     |
| GET    | `/api/dependency/:id`          | Get dependency details (NEW)         |
| POST   | `/api/alerts/config`           | Set alert frequency/config           |
| GET    | `/api/alerts/test`             | Send test alert                      |
| GET    | `/api/notifications`           | List in-app notifications (NEW)      |
| POST   | `/api/notifications/read`      | Mark notification as read (NEW)      |
| GET    | `/api/admin/users`             | List all users (admin) (NEW)         |
| GET    | `/api/admin/projects`          | List all projects (admin) (NEW)      |
| GET    | `/api/admin/logs`              | Get audit logs (admin) (NEW)         |
| POST   | `/api/webhook/scan`            | Trigger scan via webhook (NEW)       |
| GET    | `/api/docs`                    | Swagger/OpenAPI docs (NEW)           |
| GET    | `/api/project/:id/export`      | Export project report (pdf/csv) (NEW)|

---

## 🖼️ Frontend (Next.js + Tailwind CSS + NextAuth.js)

### 📂 Folder Structure

```
client/
├── components/          # Reusable UI components
├── src/app/             # Next.js routing pages (auth, dashboard, project, api)
├── public/              # Static assets
├── styles/              # Tailwind + custom CSS
├── context/             # Auth/user state via React Context
├── hooks/               # Custom hooks (useProject, useScan)
├── tailwind.config.mjs
├── next.config.mjs
└── package.json
```

### 🧩 Key Components
- FileUploader: Drag & drop support
- DependencyTable: Display scanned results
- RiskBadge: Visual risk level
- ProjectCard: Overview of projects
- AlertForm: Alert config settings
- NotificationBell: In-app notifications (NEW)
- CollaboratorList: Project team (NEW)

### 📄 Key Pages
- `/` → Landing Page
- `/auth/login` / `/auth/register`
- `/dashboard` → User’s projects
- `/project/[id]` → Dependencies, risks, alerts, collaborators
- `/alerts` → Settings for alerts
- `/notifications` → In-app notifications (NEW)
- `/admin` → Admin dashboard (NEW)

---

## 📦 Frontend Dependencies

```
npm i next react react-dom tailwindcss@3.4.1 postcss autoprefixer
npm i axios next-auth react-hook-form zod
```
Dev:
```
npx tailwindcss init -p
```

---

## 🔐 Auth Summary (NextAuth.js)
- Google OAuth
- Credentials (email/password)
- JWT-based session stored client-side
- Protected backend routes with middleware
- Role-based access (admin/user)

---

## ✅ Requirements Summary
- [x] Tailwind CSS v3.4.x
- [x] Prisma + PostgreSQL
- [x] REST APIs with validations
- [x] Background jobs with `node-cron`
- [x] Alerts via email & in-app (NEW)
- [x] AI-based lightweight analysis (optional)
- [x] JWT Auth
- [x] Role-based access (admin/user)
- [x] Next.js routing (no React Router)
- [x] .jsx only (no .tsx)
- [x] Swagger/OpenAPI docs (NEW)
- [x] Multi-file type support (NEW)

---

## 🚀 Additional Features & Suggestions
- Admin dashboard (user/project management, system stats, audit logs)
- In-app notifications
- Multi-language support (i18n)
- More dependency file types (e.g., `pom.xml`, `Gemfile`, `composer.json`, `go.mod`)
- OAuth providers (GitHub, GitLab, Bitbucket)
- CI/CD integration for auto-scanning repos
- Advanced analytics (risk trends, charts)
- Accessibility and mobile polish
- API documentation (OpenAPI/Swagger)
- Production Dockerfile and deployment scripts
- Export scan results (PDF/CSV)
- Project collaborators
- Audit logging

---

## 🚀 Deployment (Docker Compose)

1. Fill in environment variables in `docker-compose.yml` and `server/.env`.
2. Build and start all services:

```sh
docker-compose up --build
```

- Frontend: http://localhost:3000
- Backend API: http://localhost:5000
- PostgreSQL: localhost:5432

---

## 📚 API Documentation

- Interactive API docs available at `/api/docs` (Swagger UI)
- See `backend.md` for detailed backend and API reference

---






│   # --- End: README.md ---

│   ├─ client/
│   │   ├─ .env

│   │   # --- Begin: .env ---
VITE_API_URL=https://vuln-watchdog-1.onrender.com/api
│   │   # --- End: .env ---

│   │   ├─ .gitignore

│   │   # --- Begin: .gitignore ---
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?

│   │   # --- End: .gitignore ---

│   │   ├─ bun.lockb
│   │   [Could not read bun.lockb: 'utf-8' codec can't decode byte 0xac in position 48: invalid start byte]
│   │   ├─ cypress.config.ts

│   │   # --- Begin: cypress.config.ts ---
import { defineConfig } from 'cypress';

export default defineConfig({
  e2e: {
    baseUrl: 'http://localhost:5173',
    supportFile: 'cypress/support/e2e.js',
    fixturesFolder: 'cypress/fixtures',
    specPattern: 'cypress/e2e/**/*.cy.{js,ts}',
  },
});

│   │   # --- End: cypress.config.ts ---

│   │   ├─ eslint.config.js

│   │   # --- Begin: eslint.config.js ---
import js from "@eslint/js";
import globals from "globals";
import reactHooks from "eslint-plugin-react-hooks";
import reactRefresh from "eslint-plugin-react-refresh";
import tseslint from "typescript-eslint";

export default tseslint.config(
  { ignores: ["dist"] },
  {
    extends: [js.configs.recommended, ...tseslint.configs.recommended],
    files: ["**/*.{ts,tsx}"],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
    },
    plugins: {
      "react-hooks": reactHooks,
      "react-refresh": reactRefresh,
    },
    rules: {
      ...reactHooks.configs.recommended.rules,
      "react-refresh/only-export-components": [
        "warn",
        { allowConstantExport: true },
      ],
      "@typescript-eslint/no-unused-vars": "off",
    },
  }
);

│   │   # --- End: eslint.config.js ---

│   │   ├─ index.html

│   │   # --- Begin: index.html ---
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>VulnWatch - Vulnerability Monitoring Dashboard</title>
    <meta name="description" content="Monitor and secure your dependencies with real-time vulnerability detection" />
    <meta name="author" content="VulnWatch" />

    <meta property="og:title" content="VulnWatch - Vulnerability Monitoring Dashboard" />
    <meta property="og:description" content="Monitor and secure your dependencies with real-time vulnerability detection" />
    <meta property="og:type" content="website" />
    <meta property="og:image" content="https://lovable.dev/opengraph-image-p98pqg.png" />

    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:site" content="@lovable_dev" />
    <meta name="twitter:image" content="https://lovable.dev/opengraph-image-p98pqg.png" />
  </head>

  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>

│   │   # --- End: index.html ---

│   │   ├─ package.json

│   │   # --- Begin: package.json ---
{
  "name": "vite_react_shadcn_ts",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "build:dev": "vite build --mode development",
    "lint": "eslint .",
    "preview": "vite preview",
    "cypress:open": "cypress open",
    "cypress:run": "cypress run"
  },
  "dependencies": {
    "@hookform/resolvers": "^3.10.0",
    "@radix-ui/react-accordion": "^1.2.11",
    "@radix-ui/react-alert-dialog": "^1.1.14",
    "@radix-ui/react-aspect-ratio": "^1.1.7",
    "@radix-ui/react-avatar": "^1.1.10",
    "@radix-ui/react-checkbox": "^1.3.2",
    "@radix-ui/react-collapsible": "^1.1.11",
    "@radix-ui/react-context-menu": "^2.2.15",
    "@radix-ui/react-dialog": "^1.1.14",
    "@radix-ui/react-dropdown-menu": "^2.1.15",
    "@radix-ui/react-hover-card": "^1.1.14",
    "@radix-ui/react-label": "^2.1.7",
    "@radix-ui/react-menubar": "^1.1.15",
    "@radix-ui/react-navigation-menu": "^1.2.13",
    "@radix-ui/react-popover": "^1.1.14",
    "@radix-ui/react-progress": "^1.1.7",
    "@radix-ui/react-radio-group": "^1.3.7",
    "@radix-ui/react-scroll-area": "^1.2.9",
    "@radix-ui/react-select": "^2.2.5",
    "@radix-ui/react-separator": "^1.1.7",
    "@radix-ui/react-slider": "^1.3.5",
    "@radix-ui/react-slot": "^1.2.3",
    "@radix-ui/react-switch": "^1.2.5",
    "@radix-ui/react-tabs": "^1.1.12",
    "@radix-ui/react-toast": "^1.2.14",
    "@radix-ui/react-toggle": "^1.1.9",
    "@radix-ui/react-toggle-group": "^1.1.10",
    "@radix-ui/react-tooltip": "^1.2.7",
    "@tanstack/react-query": "^5.83.0",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "cmdk": "^1.1.1",
    "date-fns": "^3.6.0",
    "embla-carousel-react": "^8.6.0",
    "input-otp": "^1.4.2",
    "lucide-react": "^0.462.0",
    "next-themes": "^0.3.0",
    "react": "^18.3.1",
    "react-day-picker": "^8.10.1",
    "react-dom": "^18.3.1",
    "react-dropzone": "^14.3.8",
    "react-hook-form": "^7.61.1",
    "react-resizable-panels": "^2.1.9",
    "react-router-dom": "^6.30.1",
    "recharts": "^2.15.4",
    "sonner": "^1.7.4",
    "tailwind-merge": "^2.6.0",
    "tailwindcss-animate": "^1.0.7",
    "vaul": "^0.9.9",
    "zod": "^3.25.76"
  },
  "devDependencies": {
    "@eslint/js": "^9.32.0",
    "@tailwindcss/typography": "^0.5.16",
    "@types/node": "^22.16.5",
    "@types/react": "^18.3.23",
    "@types/react-dom": "^18.3.7",
    "@vitejs/plugin-react-swc": "^3.11.0",
    "autoprefixer": "^10.4.21",
    "eslint": "^9.32.0",
    "eslint-plugin-react-hooks": "^5.2.0",
    "eslint-plugin-react-refresh": "^0.4.20",
    "globals": "^15.15.0",
    "lovable-tagger": "^1.1.8",
    "postcss": "^8.5.6",
    "tailwindcss": "^3.4.17",
    "typescript": "^5.8.3",
    "typescript-eslint": "^8.38.0",
    "vite": "^5.4.19",
    "cypress": "^12.17.4"
  }
}

│   │   # --- End: package.json ---

│   │   ├─ postcss.config.js

│   │   # --- Begin: postcss.config.js ---
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}

│   │   # --- End: postcss.config.js ---

│   │   ├─ README.md

│   │   # --- Begin: README.md ---
# VulnWatchdog Frontend

A modern, enterprise-grade vulnerability scanning and management application built with React, TypeScript, and Vite.

## 🚀 Features

### Core Functionality
- **Vulnerability Scanning** - Upload dependency files and get comprehensive security analysis
- **Project Management** - Organize and monitor security projects
- **Real-time Notifications** - Live updates via Server-Sent Events (SSE)
- **Admin Dashboard** - Complete system administration and monitoring
- **User Management** - Role-based access control and user administration
- **Audit Logging** - Complete system activity tracking

### Advanced Features
- **Cross-Project Analysis** - Aggregate vulnerabilities across all projects
- **Advanced Filtering** - Multi-dimensional search and filter capabilities
- **Export Functionality** - Generate comprehensive security reports
- **Real-time Monitoring** - Live system health and performance tracking
- **Responsive Design** - Optimized for desktop, tablet, and mobile devices

## 🛠 Tech Stack

### Frontend Framework
- **React 18** - Modern React with hooks and concurrent features
- **TypeScript** - Type-safe development with comprehensive type definitions
- **Vite** - Fast build tool and development server

### State Management & Data Fetching
- **@tanstack/react-query** - Powerful data fetching and caching
- **React Context** - Global state management for authentication

### UI Components
- **shadcn/ui** - Modern, accessible component library
- **Tailwind CSS** - Utility-first CSS framework
- **Lucide React** - Beautiful, customizable icons

### Real-time Features
- **Server-Sent Events (SSE)** - Real-time notifications and updates
- **WebSocket-like functionality** - Live data synchronization

### File Handling
- **react-dropzone** - Drag-and-drop file uploads
- **File validation** - Comprehensive file type and size validation

### Development Tools
- **ESLint** - Code linting and quality enforcement
- **Vitest** - Fast unit testing framework
- **Testing Library** - Component testing utilities

## 📁 Project Structure

```
client/
├── src/
│   ├── components/          # Reusable UI components
│   │   ├── ui/             # shadcn/ui components
│   │   ├── layout/         # Layout components
│   │   ├── auth/           # Authentication components
│   │   ├── scanning/       # File upload and scanning
│   │   └── admin/          # Admin-specific components
│   ├── hooks/              # Custom React hooks
│   │   ├── use-auth.tsx    # Authentication context
│   │   ├── use-api.ts      # React Query hooks
│   │   └── use-notifications-realtime.ts # SSE hook
│   ├── lib/                # Utility libraries
│   │   ├── api-client.ts   # API client
│   │   └── utils.ts        # Utility functions
│   ├── pages/              # Page components
│   │   ├── Dashboard.tsx   # Main dashboard
│   │   ├── Projects.tsx    # Project management
│   │   ├── Scan.tsx        # Vulnerability scanning
│   │   ├── Vulnerabilities.tsx # Vulnerability analysis
│   │   ├── AdminDashboard.tsx # Admin panel
│   │   └── ...             # Other pages
│   ├── types/              # TypeScript type definitions
│   │   └── index.ts        # All application types
│   └── tests/              # Test files
│       └── setup.ts        # Test configuration
├── public/                 # Static assets
├── package.json            # Dependencies and scripts
├── vite.config.ts          # Vite configuration
├── tailwind.config.ts      # Tailwind CSS configuration
└── tsconfig.json           # TypeScript configuration
```

## 🚀 Getting Started

### Prerequisites
- Node.js 18+ 
- npm or yarn
- Backend server running (see backend documentation)

### Installation

1. **Clone the repository**
   ```bash
   git clone <repository-url>
   cd vuln-watchdog/client
   ```

2. **Install dependencies**
   ```bash
   npm install
   # or
   yarn install
   ```

3. **Set up environment variables**
   ```bash
   cp .env.example .env
   ```
   
   Edit `.env`:
   ```env
   VITE_API_URL=http://localhost:10000/api
   ```

4. **Start the development server**
   ```bash
   npm run dev
   # or
   yarn dev
   ```

5. **Open your browser**
   Navigate to `http://localhost:8081`

### Building for Production

```bash
npm run build
# or
yarn build
```

The built files will be in the `dist/` directory.

## 🧪 Testing

### Running Tests
```bash
npm run test
# or
yarn test
```

### Test Coverage
```bash
npm run test:coverage
# or
yarn test:coverage
```

### Test Structure
- **Unit Tests** - Individual component and function tests
- **Integration Tests** - API integration and data flow tests
- **E2E Tests** - End-to-end user workflow tests

## 🔧 Configuration

### Environment Variables

| Variable | Description | Default |
|----------|-------------|---------|
| `VITE_API_URL` | Backend API URL | `http://localhost:10000/api` |

### Vite Configuration

The application uses Vite for fast development and optimized builds:

- **Hot Module Replacement (HMR)** - Instant updates during development
- **Code Splitting** - Automatic bundle optimization
- **TypeScript Support** - Native TypeScript compilation
- **CSS Processing** - PostCSS with Tailwind CSS

### Tailwind CSS

Custom Tailwind configuration with:
- **Custom color palette** - Brand-specific colors
- **Component variants** - Custom component styles
- **Responsive utilities** - Mobile-first design approach

## 📱 Responsive Design

The application is fully responsive with:
- **Mobile-first approach** - Optimized for mobile devices
- **Tablet support** - Intermediate breakpoints
- **Desktop optimization** - Full-featured desktop experience
- **Touch-friendly** - Optimized for touch interactions

## 🔐 Security Features

### Authentication
- **JWT Tokens** - Secure authentication
- **Protected Routes** - Role-based access control
- **Auto-logout** - Session management
- **CSRF Protection** - Cross-site request forgery prevention

### Data Protection
- **Input Validation** - Client-side validation
- **XSS Prevention** - Content Security Policy
- **Secure Headers** - Security-focused HTTP headers
- **File Upload Security** - Validated file uploads

## 🎨 UI/UX Design

### Design System
- **Consistent Components** - Unified design language
- **Accessibility** - WCAG 2.1 AA compliance
- **Dark/Light Mode** - Theme support
- **Loading States** - Smooth user experience

### User Experience
- **Intuitive Navigation** - Clear information architecture
- **Real-time Feedback** - Immediate user feedback
- **Error Handling** - Graceful error management
- **Performance** - Optimized for speed

## 🔄 Real-time Features

### Server-Sent Events (SSE)
- **Live Notifications** - Real-time security alerts
- **Connection Management** - Automatic reconnection
- **Event Processing** - Efficient event handling
- **State Synchronization** - Live data updates

### WebSocket-like Functionality
- **Bidirectional Communication** - Real-time data flow
- **Connection Health** - Connection status monitoring
- **Event Broadcasting** - System-wide notifications

## 📊 Performance Optimization

### Code Splitting
- **Route-based Splitting** - Lazy-loaded pages
- **Component Splitting** - Dynamic imports
- **Vendor Splitting** - Optimized bundle sizes

### Caching Strategy
- **React Query Caching** - Intelligent data caching
- **Browser Caching** - Static asset caching
- **Memory Management** - Efficient memory usage

### Bundle Optimization
- **Tree Shaking** - Unused code elimination
- **Minification** - Compressed bundle sizes
- **Gzip Compression** - Reduced transfer sizes

## 🚀 Deployment

### Production Build
```bash
npm run build
```

### Deployment Options
- **Static Hosting** - Netlify, Vercel, GitHub Pages
- **CDN** - CloudFlare, AWS CloudFront
- **Container** - Docker deployment
- **Server** - Traditional web server

### Environment Setup
1. Set production environment variables
2. Configure API endpoints
3. Set up monitoring and logging
4. Configure SSL certificates

## 🔧 Development

### Code Style
- **ESLint** - Code quality enforcement
- **Prettier** - Code formatting
- **TypeScript** - Type safety
- **Conventional Commits** - Git commit standards

### Git Workflow
1. **Feature Branches** - Isolated development
2. **Pull Requests** - Code review process
3. **Automated Testing** - CI/CD pipeline
4. **Deployment** - Automated deployment

### Debugging
- **React DevTools** - Component debugging
- **Network Tab** - API debugging
- **Console Logging** - Development logging
- **Error Boundaries** - Error handling

## 📚 API Integration

### API Client
The application uses a centralized API client (`src/lib/api-client.ts`) that provides:
- **Type-safe API calls** - Full TypeScript support
- **Error handling** - Consistent error management
- **Authentication** - Automatic token management
- **Request/Response interceptors** - Middleware functionality

### Endpoints
- **Authentication** - Login, register, logout
- **User Management** - Profile, settings, preferences
- **Project Management** - CRUD operations
- **Vulnerability Scanning** - File upload and analysis
- **Notifications** - Real-time alerts
- **Admin Functions** - System administration

## 🎯 Roadmap

### Planned Features
- [ ] **Advanced Analytics** - Detailed security metrics
- [ ] **Team Collaboration** - Multi-user project management
- [ ] **Integration APIs** - Third-party integrations
- [ ] **Mobile App** - Native mobile application
- [ ] **Advanced Reporting** - Custom report generation

### Performance Improvements
- [ ] **Service Workers** - Offline functionality
- [ ] **Progressive Web App** - PWA features
- [ ] **Advanced Caching** - Intelligent caching strategies
- [ ] **Bundle Optimization** - Further size reduction

## 🤝 Contributing

### Development Setup
1. Fork the repository
2. Create a feature branch
3. Make your changes
4. Add tests for new features
5. Submit a pull request

### Code Standards
- Follow TypeScript best practices
- Write comprehensive tests
- Maintain accessibility standards
- Document new features

## 📄 License

This project is licensed under the MIT License - see the LICENSE file for details.

## 🆘 Support

### Documentation
- **API Documentation** - Complete API reference
- **Component Library** - UI component documentation
- **User Guide** - End-user documentation

### Getting Help
- **Issues** - GitHub issues for bug reports
- **Discussions** - GitHub discussions for questions
- **Documentation** - Comprehensive documentation
- **Community** - Developer community support

---

**VulnWatchdog Frontend** - Secure, modern, and powerful vulnerability management for the modern web.

│   │   # --- End: README.md ---

│   │   ├─ tailwind.config.ts

│   │   # --- Begin: tailwind.config.ts ---
import type { Config } from "tailwindcss";

export default {
	darkMode: ["class"],
	content: [
		"./pages/**/*.{ts,tsx}",
		"./components/**/*.{ts,tsx}",
		"./app/**/*.{ts,tsx}",
		"./src/**/*.{ts,tsx}",
	],
	prefix: "",
	theme: {
		container: {
			center: true,
			padding: '2rem',
			screens: {
				'2xl': '1400px'
			}
		},
		extend: {
			colors: {
				border: 'hsl(var(--border))',
				input: 'hsl(var(--input))',
				ring: 'hsl(var(--ring))',
				background: 'hsl(var(--background))',
				foreground: 'hsl(var(--foreground))',
				primary: {
					DEFAULT: 'hsl(var(--primary))',
					foreground: 'hsl(var(--primary-foreground))',
					glow: 'hsl(var(--primary-glow))'
				},
				secondary: {
					DEFAULT: 'hsl(var(--secondary))',
					foreground: 'hsl(var(--secondary-foreground))'
				},
				destructive: {
					DEFAULT: 'hsl(var(--destructive))',
					foreground: 'hsl(var(--destructive-foreground))'
				},
				warning: {
					DEFAULT: 'hsl(var(--warning))',
					foreground: 'hsl(var(--warning-foreground))'
				},
				success: {
					DEFAULT: 'hsl(var(--success))',
					foreground: 'hsl(var(--success-foreground))'
				},
				critical: {
					DEFAULT: 'hsl(var(--critical))',
					foreground: 'hsl(var(--critical-foreground))'
				},
				high: {
					DEFAULT: 'hsl(var(--high))',
					foreground: 'hsl(var(--high-foreground))'
				},
				medium: {
					DEFAULT: 'hsl(var(--medium))',
					foreground: 'hsl(var(--medium-foreground))'
				},
				low: {
					DEFAULT: 'hsl(var(--low))',
					foreground: 'hsl(var(--low-foreground))'
				},
				security: 'hsl(var(--security))',
				muted: {
					DEFAULT: 'hsl(var(--muted))',
					foreground: 'hsl(var(--muted-foreground))'
				},
				accent: {
					DEFAULT: 'hsl(var(--accent))',
					foreground: 'hsl(var(--accent-foreground))'
				},
				popover: {
					DEFAULT: 'hsl(var(--popover))',
					foreground: 'hsl(var(--popover-foreground))'
				},
				card: {
					DEFAULT: 'hsl(var(--card))',
					foreground: 'hsl(var(--card-foreground))'
				},
				sidebar: {
					DEFAULT: 'hsl(var(--sidebar-background))',
					foreground: 'hsl(var(--sidebar-foreground))',
					primary: 'hsl(var(--sidebar-primary))',
					'primary-foreground': 'hsl(var(--sidebar-primary-foreground))',
					accent: 'hsl(var(--sidebar-accent))',
					'accent-foreground': 'hsl(var(--sidebar-accent-foreground))',
					border: 'hsl(var(--sidebar-border))',
					ring: 'hsl(var(--sidebar-ring))'
				}
			},
			backgroundImage: {
				'gradient-primary': 'var(--gradient-primary)',
				'gradient-hero': 'var(--gradient-hero)',
				'gradient-card': 'var(--gradient-card)'
			},
			boxShadow: {
				'security': 'var(--shadow-security)',
				'glow': 'var(--shadow-glow)'
			},
			borderColor: {
				'security': 'var(--border-security)'
			},
			textColor: {
				'security': 'var(--text-security)'
			},
			transitionProperty: {
				'smooth': 'var(--transition-smooth)'
			},
			borderRadius: {
				lg: 'var(--radius)',
				md: 'calc(var(--radius) - 2px)',
				sm: 'calc(var(--radius) - 4px)'
			},
			keyframes: {
				'accordion-down': {
					from: {
						height: '0'
					},
					to: {
						height: 'var(--radix-accordion-content-height)'
					}
				},
				'accordion-up': {
					from: {
						height: 'var(--radix-accordion-content-height)'
					},
					to: {
						height: '0'
					}
				}
			},
			animation: {
				'accordion-down': 'accordion-down 0.2s ease-out',
				'accordion-up': 'accordion-up 0.2s ease-out'
			}
		}
	},
	plugins: [require("tailwindcss-animate")],
} satisfies Config;

│   │   # --- End: tailwind.config.ts ---

│   │   ├─ tsconfig.app.json

│   │   # --- Begin: tsconfig.app.json ---
{
  "compilerOptions": {
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "react-jsx",

    /* Linting */
    "strict": false,
    "noUnusedLocals": false,
    "noUnusedParameters": false,
    "noImplicitAny": false,
    "noFallthroughCasesInSwitch": false,

    "baseUrl": ".",
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["src"]
}

│   │   # --- End: tsconfig.app.json ---

│   │   ├─ tsconfig.json

│   │   # --- Begin: tsconfig.json ---
{
  "files": [],
  "references": [
    { "path": "./tsconfig.app.json" },
    { "path": "./tsconfig.node.json" }
  ],
  "compilerOptions": {
    "baseUrl": ".",
    "paths": {
      "@/*": ["./src/*"]
    },
    "noImplicitAny": false,
    "noUnusedParameters": false,
    "skipLibCheck": true,
    "allowJs": true,
    "noUnusedLocals": false,
    "strictNullChecks": false
  }
}

│   │   # --- End: tsconfig.json ---

│   │   ├─ tsconfig.node.json

│   │   # --- Begin: tsconfig.node.json ---
{
  "compilerOptions": {
    "target": "ES2022",
    "lib": ["ES2023"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,

    /* Linting */
    "strict": true,
    "noUnusedLocals": false,
    "noUnusedParameters": false,
    "noFallthroughCasesInSwitch": true
  },
  "include": ["vite.config.ts"]
}

│   │   # --- End: tsconfig.node.json ---

│   │   ├─ vite.config.ts

│   │   # --- Begin: vite.config.ts ---
import { defineConfig } from "vite";
import react from "@vitejs/plugin-react-swc";
import path from "path";
import { componentTagger } from "lovable-tagger";

// https://vitejs.dev/config/
export default defineConfig(({ mode }) => ({
  server: {
    host: "::",
    port: 8081,
  },
  plugins: [
    react(),
    mode === 'development' &&
    componentTagger(),
  ].filter(Boolean),
  resolve: {
    alias: {
      "@": path.resolve(__dirname, "./src"),
    },
  },
}));

│   │   # --- End: vite.config.ts ---

│   │   ├─ public/
│   │   │   ├─ favicon.ico
│   │   │   [Could not read favicon.ico: 'utf-8' codec can't decode byte 0x89 in position 0: invalid start byte]
│   │   │   ├─ placeholder.svg

│   │   │   # --- Begin: placeholder.svg ---
<svg xmlns="http://www.w3.org/2000/svg" width="1200" height="1200" fill="none"><rect width="1200" height="1200" fill="#EAEAEA" rx="3"/><g opacity=".5"><g opacity=".5"><path fill="#FAFAFA" d="M600.709 736.5c-75.454 0-136.621-61.167-136.621-136.62 0-75.454 61.167-136.621 136.621-136.621 75.453 0 136.62 61.167 136.62 136.621 0 75.453-61.167 136.62-136.62 136.62Z"/><path stroke="#C9C9C9" stroke-width="2.418" d="M600.709 736.5c-75.454 0-136.621-61.167-136.621-136.62 0-75.454 61.167-136.621 136.621-136.621 75.453 0 136.62 61.167 136.62 136.621 0 75.453-61.167 136.62-136.62 136.62Z"/></g><path stroke="url(#a)" stroke-width="2.418" d="M0-1.209h553.581" transform="scale(1 -1) rotate(45 1163.11 91.165)"/><path stroke="url(#b)" stroke-width="2.418" d="M404.846 598.671h391.726"/><path stroke="url(#c)" stroke-width="2.418" d="M599.5 795.742V404.017"/><path stroke="url(#d)" stroke-width="2.418" d="m795.717 796.597-391.441-391.44"/><path fill="#fff" d="M600.709 656.704c-31.384 0-56.825-25.441-56.825-56.824 0-31.384 25.441-56.825 56.825-56.825 31.383 0 56.824 25.441 56.824 56.825 0 31.383-25.441 56.824-56.824 56.824Z"/><g clip-path="url(#e)"><path fill="#666" fill-rule="evenodd" d="M616.426 586.58h-31.434v16.176l3.553-3.554.531-.531h9.068l.074-.074 8.463-8.463h2.565l7.18 7.181V586.58Zm-15.715 14.654 3.698 3.699 1.283 1.282-2.565 2.565-1.282-1.283-5.2-5.199h-6.066l-5.514 5.514-.073.073v2.876a2.418 2.418 0 0 0 2.418 2.418h26.598a2.418 2.418 0 0 0 2.418-2.418v-8.317l-8.463-8.463-7.181 7.181-.071.072Zm-19.347 5.442v4.085a6.045 6.045 0 0 0 6.046 6.045h26.598a6.044 6.044 0 0 0 6.045-6.045v-7.108l1.356-1.355-1.282-1.283-.074-.073v-17.989h-38.689v23.43l-.146.146.146.147Z" clip-rule="evenodd"/></g><path stroke="#C9C9C9" stroke-width="2.418" d="M600.709 656.704c-31.384 0-56.825-25.441-56.825-56.824 0-31.384 25.441-56.825 56.825-56.825 31.383 0 56.824 25.441 56.824 56.825 0 31.383-25.441 56.824-56.824 56.824Z"/></g><defs><linearGradient id="a" x1="554.061" x2="-.48" y1=".083" y2=".087" gradientUnits="userSpaceOnUse"><stop stop-color="#C9C9C9" stop-opacity="0"/><stop offset=".208" stop-color="#C9C9C9"/><stop offset=".792" stop-color="#C9C9C9"/><stop offset="1" stop-color="#C9C9C9" stop-opacity="0"/></linearGradient><linearGradient id="b" x1="796.912" x2="404.507" y1="599.963" y2="599.965" gradientUnits="userSpaceOnUse"><stop stop-color="#C9C9C9" stop-opacity="0"/><stop offset=".208" stop-color="#C9C9C9"/><stop offset=".792" stop-color="#C9C9C9"/><stop offset="1" stop-color="#C9C9C9" stop-opacity="0"/></linearGradient><linearGradient id="c" x1="600.792" x2="600.794" y1="403.677" y2="796.082" gradientUnits="userSpaceOnUse"><stop stop-color="#C9C9C9" stop-opacity="0"/><stop offset=".208" stop-color="#C9C9C9"/><stop offset=".792" stop-color="#C9C9C9"/><stop offset="1" stop-color="#C9C9C9" stop-opacity="0"/></linearGradient><linearGradient id="d" x1="404.85" x2="796.972" y1="403.903" y2="796.02" gradientUnits="userSpaceOnUse"><stop stop-color="#C9C9C9" stop-opacity="0"/><stop offset=".208" stop-color="#C9C9C9"/><stop offset=".792" stop-color="#C9C9C9"/><stop offset="1" stop-color="#C9C9C9" stop-opacity="0"/></linearGradient><clipPath id="e"><path fill="#fff" d="M581.364 580.535h38.689v38.689h-38.689z"/></clipPath></defs></svg>
│   │   │   # --- End: placeholder.svg ---

│   │   │   ├─ robots.txt

│   │   │   # --- Begin: robots.txt ---
User-agent: Googlebot
Allow: /

User-agent: Bingbot
Allow: /

User-agent: Twitterbot
Allow: /

User-agent: facebookexternalhit
Allow: /

User-agent: *
Allow: /

│   │   │   # --- End: robots.txt ---

│   │   ├─ src/
│   │   │   ├─ App.css

│   │   │   # --- Begin: App.css ---
#root {
  max-width: 1280px;
  margin: 0 auto;
  padding: 2rem;
  text-align: center;
}

.logo {
  height: 6em;
  padding: 1.5em;
  will-change: filter;
  transition: filter 300ms;
}
.logo:hover {
  filter: drop-shadow(0 0 2em #646cffaa);
}
.logo.react:hover {
  filter: drop-shadow(0 0 2em #61dafbaa);
}

@keyframes logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@media (prefers-reduced-motion: no-preference) {
  a:nth-of-type(2) .logo {
    animation: logo-spin infinite 20s linear;
  }
}

.card {
  padding: 2em;
}

.read-the-docs {
  color: #888;
}

│   │   │   # --- End: App.css ---

│   │   │   ├─ App.tsx

│   │   │   # --- Begin: App.tsx ---
import { Toaster } from "@/components/ui/toaster";
import { Toaster as Sonner } from "@/components/ui/sonner";
import { TooltipProvider } from "@/components/ui/tooltip";
import { QueryClient, QueryClientProvider } from "@tanstack/react-query";
import { BrowserRouter, Routes, Route } from "react-router-dom";
import { AuthProvider } from "./hooks/use-auth";
import Landing from "./pages/Landing";
import Dashboard from "./pages/Dashboard";
import Login from "./pages/Login";
import Register from "./pages/Register";
import Projects from "./pages/Projects";
import Scan from "./pages/Scan";
// import Vulnerabilities from "./pages/Vulnerabilities";
import Notifications from "./pages/Notifications";
// import Analytics from "./pages/Analytics";
import NotFound from "./pages/NotFound";
import Vulnerabilities from "./pages/Vulnerabilities";

const queryClient = new QueryClient();

const App = () => (
  <QueryClientProvider client={queryClient}>
    <AuthProvider>
      <TooltipProvider>
        <Toaster />
        <Sonner />
        <BrowserRouter>
          <Routes>
            <Route path="/" element={<Landing />} />
            <Route path="/dashboard" element={<Dashboard />} />
            <Route path="/login" element={<Login />} />
            <Route path="/register" element={<Register />} />
            <Route path="/projects" element={<Projects />} />
            <Route path="/scan" element={<Scan />} />
            <Route path="/vulnerabilities" element={<Vulnerabilities />} /> 
            <Route path="/notifications" element={<Notifications />} />
            {/* <Route path="/analytics" element={<Analytics />} /> */}
            {/* ADD ALL CUSTOM ROUTES ABOVE THE CATCH-ALL "*" ROUTE */}
            <Route path="*" element={<NotFound />} />
          </Routes>
        </BrowserRouter>
      </TooltipProvider>
    </AuthProvider>
  </QueryClientProvider>
);

export default App;

│   │   │   # --- End: App.tsx ---

│   │   │   ├─ index.css

│   │   │   # --- Begin: index.css ---
@tailwind base;
@tailwind components;
@tailwind utilities;

/* Definition of the design system. All colors, gradients, fonts, etc should be defined here. 
All colors MUST be HSL.
*/

@layer base {
  :root {
    --background: 240 10% 3.9%;
    --foreground: 0 0% 98%;

    --card: 240 10% 4.8%;
    --card-foreground: 0 0% 95%;

    --popover: 240 10% 4.8%;
    --popover-foreground: 0 0% 95%;

    --primary: 232 67% 58%;
    --primary-foreground: 0 0% 98%;
    --primary-glow: 232 67% 68%;

    --secondary: 240 10% 8%;
    --secondary-foreground: 0 0% 95%;

    --muted: 240 10% 8%;
    --muted-foreground: 240 5% 64.9%;

    --accent: 240 10% 8%;
    --accent-foreground: 0 0% 95%;

    --destructive: 0 85% 65%;
    --destructive-foreground: 0 0% 98%;

    --warning: 35 91% 65%;
    --warning-foreground: 0 0% 10%;

    --success: 142 71% 45%;
    --success-foreground: 0 0% 98%;

    --critical: 0 85% 65%;
    --critical-foreground: 0 0% 98%;
    --high: 14 91% 65%;
    --high-foreground: 0 0% 98%;
    --medium: 45 93% 65%;
    --medium-foreground: 0 0% 10%;
    --low: 142 71% 45%;
    --low-foreground: 0 0% 98%;

    --security: 232 67% 78%;

    --gradient-primary: linear-gradient(135deg, hsl(232 67% 58%), hsl(232 67% 68%));
    --gradient-hero: linear-gradient(135deg, hsl(240 10% 3.9%) 0%, hsl(232 67% 12%) 50%, hsl(240 10% 3.9%) 100%);
    --gradient-card: linear-gradient(145deg, hsl(240 10% 4.8%), hsl(240 10% 6%));
    
    --shadow-security: 0 10px 30px -10px hsl(232 67% 58% / 0.3);
    --shadow-glow: 0 0 40px hsl(232 67% 68% / 0.2);
    
    --border-security: hsl(232 67% 58% / 0.2);
    --text-security: hsl(232 67% 78%);

    --transition-smooth: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);

    --border: 214.3 31.8% 91.4%;
    --input: 214.3 31.8% 91.4%;
    --ring: 222.2 84% 4.9%;

    --radius: 0.5rem;

    --sidebar-background: 0 0% 98%;

    --sidebar-foreground: 240 5.3% 26.1%;

    --sidebar-primary: 240 5.9% 10%;

    --sidebar-primary-foreground: 0 0% 98%;

    --sidebar-accent: 240 4.8% 95.9%;

    --sidebar-accent-foreground: 240 5.9% 10%;

    --sidebar-border: 220 13% 91%;

    --sidebar-ring: 217.2 91.2% 59.8%;
  }

  .dark {
    --background: 222.2 84% 4.9%;
    --foreground: 210 40% 98%;

    --card: 222.2 84% 4.9%;
    --card-foreground: 210 40% 98%;

    --popover: 222.2 84% 4.9%;
    --popover-foreground: 210 40% 98%;

    --primary: 210 40% 98%;
    --primary-foreground: 222.2 47.4% 11.2%;

    --secondary: 217.2 32.6% 17.5%;
    --secondary-foreground: 210 40% 98%;

    --muted: 217.2 32.6% 17.5%;
    --muted-foreground: 215 20.2% 65.1%;

    --accent: 217.2 32.6% 17.5%;
    --accent-foreground: 210 40% 98%;

    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 210 40% 98%;

    --border: 217.2 32.6% 17.5%;
    --input: 217.2 32.6% 17.5%;
    --ring: 212.7 26.8% 83.9%;
    --sidebar-background: 240 5.9% 10%;
    --sidebar-foreground: 240 4.8% 95.9%;
    --sidebar-primary: 224.3 76.3% 48%;
    --sidebar-primary-foreground: 0 0% 100%;
    --sidebar-accent: 240 3.7% 15.9%;
    --sidebar-accent-foreground: 240 4.8% 95.9%;
    --sidebar-border: 240 3.7% 15.9%;
    --sidebar-ring: 217.2 91.2% 59.8%;
  }
}

@layer base {
  * {
    @apply border-border;
  }

  body {
    @apply bg-background text-foreground;
  }
}
│   │   │   # --- End: index.css ---

│   │   │   ├─ main.tsx

│   │   │   # --- Begin: main.tsx ---
import { createRoot } from 'react-dom/client'
import App from './App.tsx'
import './index.css'

createRoot(document.getElementById("root")!).render(<App />);

│   │   │   # --- End: main.tsx ---

│   │   │   ├─ vite-env.d.ts

│   │   │   # --- Begin: vite-env.d.ts ---
/// <reference types="vite/client" />

│   │   │   # --- End: vite-env.d.ts ---

│   │   │   ├─ assets/
│   │   │   │   ├─ hero-bg.jpg
│   │   │   │   [Could not read hero-bg.jpg: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte]
│   │   │   ├─ components/
│   │   │   │   ├─ admin/
│   │   │   │   │   ├─ admin-dashboard.tsx

│   │   │   │   │   # --- Begin: admin-dashboard.tsx ---
import { useState, useEffect } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { StatsCard } from "@/components/dashboard/stats-card";
import { apiClient } from "@/lib/api-client";
import { useToast } from "@/hooks/use-toast";
import { 
  Users, 
  FolderOpen, 
  Activity, 
  AlertTriangle,
  Eye,
  Trash2,
  UserX
} from "lucide-react";

interface AdminUser {
  id: number;
  name: string;
  email: string;
  role: string;
  createdAt: string;
  projectCount: number;
}

interface AdminProject {
  id: number;
  name: string;
  description: string;
  owner: string;
  vulnerabilities: number;
  lastScan: string;
}

export function AdminDashboard() {
  const [users, setUsers] = useState<AdminUser[]>([]);
  const [projects, setProjects] = useState<AdminProject[]>([]);
  const [loading, setLoading] = useState(true);
  const { toast } = useToast();

  useEffect(() => {
    const fetchAdminData = async () => {
      try {
        const [usersData, projectsData] = await Promise.all([
          apiClient.getUsers(),
          apiClient.getAdminProjects()
        ]);
        // Map usersData to AdminUser[]
        setUsers((usersData as any[]).map(user => ({
          id: user.id,
          name: user.name,
          email: user.email,
          role: user.role,
          createdAt: user.createdAt,
          projectCount: user.projectCount ?? 0 // fallback if missing
        })));
        // Map projectsData to AdminProject[]
        setProjects((projectsData as any[]).map(project => ({
          id: project.id,
          name: project.name,
          description: project.description,
          owner: project.owner ?? '',
          vulnerabilities: project.vulnerabilities ?? 0,
          lastScan: project.lastScan ?? ''
        })));
      } catch (error) {
        toast({
          title: "Failed to load admin data",
          description: "Please check your permissions",
          variant: "destructive"
        });
      } finally {
        setLoading(false);
      }
    };

    fetchAdminData();
  }, [toast]);

  if (loading) {
    return (
      <div className="space-y-6">
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
          {[...Array(4)].map((_, i) => (
            <Card key={i} className="bg-gradient-card border-security">
              <CardContent className="p-6">
                <div className="animate-pulse space-y-4">
                  <div className="h-4 bg-muted rounded w-3/4"></div>
                  <div className="h-8 bg-muted rounded w-1/2"></div>
                </div>
              </CardContent>
            </Card>
          ))}
        </div>
      </div>
    );
  }

  const totalVulnerabilities = projects.reduce((sum, project) => sum + project.vulnerabilities, 0);
  const activeUsers = users.filter(user => new Date(user.createdAt) > new Date(Date.now() - 30 * 24 * 60 * 60 * 1000)).length;

  return (
    <div className="space-y-6">
      {/* Admin Stats */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        <StatsCard
          title="Total Users"
          value={users.length.toString()}
          description="registered users"
          icon={Users}
          trend="up"
          trendValue={activeUsers.toString()}
        />
        <StatsCard
          title="Total Projects"
          value={projects.length.toString()}
          description="across all users"
          icon={FolderOpen}
        />
        <StatsCard
          title="Total Vulnerabilities"
          value={totalVulnerabilities.toString()}
          description="system-wide"
          icon={AlertTriangle}
          trend="down"
          trendValue="12%"
        />
        <StatsCard
          title="Active Scans"
          value="23"
          description="in progress"
          icon={Activity}
        />
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* Users Management */}
        <Card className="bg-gradient-card border-security">
          <CardHeader>
            <CardTitle className="flex items-center space-x-2">
              <Users className="h-5 w-5 text-primary" />
              <span>Users Management</span>
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-4 max-h-96 overflow-y-auto">
              {users.map((user) => (
                <div key={user.id} className="flex items-center justify-between p-3 rounded-lg border border-security">
                  <div className="flex-1">
                    <div className="flex items-center space-x-3">
                      <div>
                        <p className="font-medium text-foreground">{user.name}</p>
                        <p className="text-sm text-muted-foreground">{user.email}</p>
                      </div>
                      <Badge variant={user.role === 'admin' ? 'default' : 'secondary'}>
                        {user.role}
                      </Badge>
                    </div>
                    <p className="text-xs text-muted-foreground mt-1">
                      {user.projectCount} projects • Joined {new Date(user.createdAt).toLocaleDateString()}
                    </p>
                  </div>
                  <div className="flex space-x-2">
                    <Button size="sm" variant="outline">
                      <Eye className="h-4 w-4" />
                    </Button>
                    <Button size="sm" variant="outline">
                      <UserX className="h-4 w-4" />
                    </Button>
                  </div>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>

        {/* Projects Overview */}
        <Card className="bg-gradient-card border-security">
          <CardHeader>
            <CardTitle className="flex items-center space-x-2">
              <FolderOpen className="h-5 w-5 text-primary" />
              <span>Projects Overview</span>
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-4 max-h-96 overflow-y-auto">
              {projects.map((project) => (
                <div key={project.id} className="p-3 rounded-lg border border-security">
                  <div className="flex items-center justify-between">
                    <div className="flex-1">
                      <div className="flex items-center space-x-3">
                        <h4 className="font-medium text-foreground">{project.name}</h4>
                        {project.vulnerabilities > 0 && (
                          <Badge variant="destructive">
                            {project.vulnerabilities} vulnerabilities
                          </Badge>
                        )}
                      </div>
                      <p className="text-sm text-muted-foreground mt-1">
                        Owner: {project.owner}
                      </p>
                      <p className="text-xs text-muted-foreground">
                        Last scan: {new Date(project.lastScan).toLocaleDateString()}
                      </p>
                    </div>
                    <div className="flex space-x-2">
                      <Button size="sm" variant="outline">
                        <Eye className="h-4 w-4" />
                      </Button>
                      <Button size="sm" variant="outline">
                        <Trash2 className="h-4 w-4" />
                      </Button>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>
      </div>

      {/* System Health */}
      <Card className="bg-gradient-card border-security">
        <CardHeader>
          <CardTitle className="flex items-center space-x-2">
            <Activity className="h-5 w-5 text-primary" />
            <span>System Health</span>
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
            <div className="space-y-2">
              <p className="text-sm font-medium text-muted-foreground">Database Status</p>
              <div className="flex items-center space-x-2">
                <div className="w-3 h-3 rounded-full bg-success"></div>
                <span className="text-sm text-foreground">Healthy</span>
              </div>
            </div>
            <div className="space-y-2">
              <p className="text-sm font-medium text-muted-foreground">API Response Time</p>
              <p className="text-lg font-bold text-foreground">145ms</p>
            </div>
            <div className="space-y-2">
              <p className="text-sm font-medium text-muted-foreground">Active Connections</p>
              <p className="text-lg font-bold text-foreground">42</p>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}
│   │   │   │   │   # --- End: admin-dashboard.tsx ---

│   │   │   │   ├─ auth/
│   │   │   │   │   ├─ protected-route.tsx

│   │   │   │   │   # --- Begin: protected-route.tsx ---
import { ReactNode } from 'react';
import { Navigate } from 'react-router-dom';
import { useAuth } from '@/hooks/use-auth';

interface ProtectedRouteProps {
  children: ReactNode;
  adminOnly?: boolean;
}

export const ProtectedRoute = ({ children, adminOnly = false }: ProtectedRouteProps) => {
  const { user, loading } = useAuth();

  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-background">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary"></div>
      </div>
    );
  }

  if (!user) {
    return <Navigate to="/login" replace />;
  }

  if (adminOnly && user.role !== 'admin') {
    return <Navigate to="/dashboard" replace />;
  }

  return <>{children}</>;
};
│   │   │   │   │   # --- End: protected-route.tsx ---

│   │   │   │   ├─ dashboard/
│   │   │   │   │   ├─ stats-card.tsx

│   │   │   │   │   # --- Begin: stats-card.tsx ---
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { cn } from "@/lib/utils";
import { LucideIcon } from "lucide-react";

interface StatsCardProps {
  title: string;
  value: string | number;
  description?: string;
  icon: LucideIcon;
  trend?: "up" | "down" | "neutral";
  trendValue?: string;
  className?: string;
}

export function StatsCard({
  title,
  value,
  description,
  icon: Icon,
  trend,
  trendValue,
  className
}: StatsCardProps) {
  const getTrendColor = () => {
    switch (trend) {
      case "up":
        return "text-success";
      case "down":
        return "text-destructive";
      default:
        return "text-muted-foreground";
    }
  };

  return (
    <Card className={cn("bg-gradient-card border-security transition-smooth hover:shadow-glow", className)}>
      <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
        <CardTitle className="text-sm font-medium text-muted-foreground">
          {title}
        </CardTitle>
        <Icon className="h-4 w-4 text-primary" />
      </CardHeader>
      <CardContent>
        <div className="text-2xl font-bold text-foreground">{value}</div>
        {(description || trendValue) && (
          <p className="text-xs text-muted-foreground mt-1">
            {trendValue && (
              <span className={getTrendColor()}>
                {trend === "up" ? "+" : trend === "down" ? "-" : ""}
                {trendValue}
              </span>
            )}
            {description && (
              <span className={trendValue ? " " : ""}>
                {description}
              </span>
            )}
          </p>
        )}
      </CardContent>
    </Card>
  );
}
│   │   │   │   │   # --- End: stats-card.tsx ---

│   │   │   │   ├─ layout/
│   │   │   │   │   ├─ header.tsx

│   │   │   │   │   # --- Begin: header.tsx ---
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { Bell, User, LogOut } from "lucide-react";
import { useState } from "react";

export function Header() {
  const [notificationCount] = useState(3);

  return (
    <header className="h-16 border-b border-security bg-gradient-card">
      <div className="flex h-full items-center justify-between px-6">
        {/* Search and breadcrumbs would go here */}
        <div className="flex-1" />

        {/* Right side actions */}
        <div className="flex items-center space-x-4">
          {/* Notifications */}
          <Button variant="ghost" size="sm" className="relative">
            <Bell className="h-4 w-4" />
            {notificationCount > 0 && (
              <Badge
                variant="destructive"
                className="absolute -right-1 -top-1 h-5 w-5 rounded-full p-0 text-xs"
              >
                {notificationCount}
              </Badge>
            )}
          </Button>

          {/* User menu */}
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button variant="ghost" size="sm" className="h-8 w-8 rounded-full">
                <User className="h-4 w-4" />
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent align="end" className="w-56">
              <DropdownMenuLabel className="font-normal">
                <div className="flex flex-col space-y-1">
                  <p className="text-sm font-medium leading-none">John Doe</p>
                  <p className="text-xs leading-none text-muted-foreground">
                    john@example.com
                  </p>
                </div>
              </DropdownMenuLabel>
              <DropdownMenuSeparator />
              <DropdownMenuItem>
                <User className="mr-2 h-4 w-4" />
                Profile
              </DropdownMenuItem>
              <DropdownMenuSeparator />
              <DropdownMenuItem className="text-destructive">
                <LogOut className="mr-2 h-4 w-4" />
                Log out
              </DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>
        </div>
      </div>
    </header>
  );
}
│   │   │   │   │   # --- End: header.tsx ---

│   │   │   │   │   ├─ main-layout.tsx

│   │   │   │   │   # --- Begin: main-layout.tsx ---
import { Sidebar } from "./sidebar";
import { Header } from "./header";

interface MainLayoutProps {
  children: React.ReactNode;
}

export function MainLayout({ children }: MainLayoutProps) {
  return (
    <div className="min-h-screen bg-background">
      <div className="flex h-screen">
        <Sidebar />
        <div className="flex flex-1 flex-col overflow-hidden">
          <Header />
          <main className="flex-1 overflow-auto p-6">
            {children}
          </main>
        </div>
      </div>
    </div>
  );
}
│   │   │   │   │   # --- End: main-layout.tsx ---

│   │   │   │   │   ├─ sidebar.tsx

│   │   │   │   │   # --- Begin: sidebar.tsx ---
import { cn } from "@/lib/utils";
import { Button } from "@/components/ui/button";
import { ScrollArea } from "@/components/ui/scroll-area";
import {
  Shield,
  Folder,
  Bell,
  User,
  Settings,
  Home,
  Upload,
  TrendingUp,
  Users
} from "lucide-react";
import { Link, useLocation } from "react-router-dom";

interface SidebarProps {
  className?: string;
}

const navigation = [
  { name: "Dashboard", href: "/dashboard", icon: Home },
  { name: "Projects", href: "/projects", icon: Folder },
  { name: "Scan Files", href: "/scan", icon: Upload },
  { name: "Vulnerabilities", href: "/vulnerabilities", icon: Shield },
  { name: "Analytics", href: "/analytics", icon: TrendingUp },
  { name: "Notifications", href: "/notifications", icon: Bell },
];

const userNavigation = [
  { name: "Profile", href: "/profile", icon: User },
  { name: "Settings", href: "/settings", icon: Settings },
  { name: "Team", href: "/team", icon: Users },
];

export function Sidebar({ className }: SidebarProps) {
  const location = useLocation();

  return (
    <div className={cn("flex h-full w-64 flex-col bg-gradient-card border-r border-security", className)}>
      {/* Logo */}
      <div className="flex h-16 items-center px-6 border-b border-security">
        <div className="flex items-center space-x-2">
          <div className="flex h-8 w-8 items-center justify-center rounded-lg bg-gradient-primary">
            <Shield className="h-5 w-5 text-primary-foreground" />
          </div>
          <span className="text-xl font-bold text-security">VulnWatch</span>
        </div>
      </div>

      <ScrollArea className="flex-1 px-3 py-4">
        {/* Main Navigation */}
        <div className="space-y-1">
          <h3 className="mb-2 px-3 text-xs font-semibold text-muted-foreground uppercase tracking-wider">
            Main
          </h3>
          {navigation.map((item) => {
            const isActive = location.pathname === item.href;
            return (
              <Link key={item.name} to={item.href}>
                <Button
                  variant={isActive ? "secondary" : "ghost"}
                  className={cn(
                    "w-full justify-start transition-smooth",
                    isActive && "bg-primary/10 text-primary shadow-glow"
                  )}
                >
                  <item.icon className="mr-3 h-4 w-4" />
                  {item.name}
                </Button>
              </Link>
            );
          })}
        </div>

        {/* User Navigation */}
        <div className="mt-8 space-y-1">
          <h3 className="mb-2 px-3 text-xs font-semibold text-muted-foreground uppercase tracking-wider">
            Account
          </h3>
          {userNavigation.map((item) => {
            const isActive = location.pathname === item.href;
            return (
              <Link key={item.name} to={item.href}>
                <Button
                  variant={isActive ? "secondary" : "ghost"}
                  className={cn(
                    "w-full justify-start transition-smooth",
                    isActive && "bg-primary/10 text-primary shadow-glow"
                  )}
                >
                  <item.icon className="mr-3 h-4 w-4" />
                  {item.name}
                </Button>
              </Link>
            );
          })}
        </div>
      </ScrollArea>
    </div>
  );
}
│   │   │   │   │   # --- End: sidebar.tsx ---

│   │   │   │   ├─ projects/
│   │   │   │   │   ├─ project-card.tsx

│   │   │   │   │   # --- Begin: project-card.tsx ---
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { SeverityBadge } from "@/components/ui/severity-badge";
import { 
  Folder, 
  Calendar, 
  Shield, 
  AlertTriangle, 
  Users,
  MoreVertical 
} from "lucide-react";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";

interface ProjectCardProps {
  project: {
    id: number;
    name: string;
    description?: string;
    createdAt: string;
    vulnerabilityCount: number;
    criticalCount: number;
    collaboratorCount: number;
    lastScan?: string;
  };
  onViewDetails: (id: number) => void;
  onScan: (id: number) => void;
}

export function ProjectCard({ project, onViewDetails, onScan }: ProjectCardProps) {
  const getRiskLevel = () => {
    if (project.criticalCount > 0) return { level: "Critical", color: "critical" };
    if (project.vulnerabilityCount > 10) return { level: "High", color: "high" };
    if (project.vulnerabilityCount > 5) return { level: "Medium", color: "medium" };
    if (project.vulnerabilityCount > 0) return { level: "Low", color: "low" };
    return { level: "Secure", color: "success" };
  };

  const risk = getRiskLevel();

  return (
    <Card className="bg-gradient-card border-security transition-smooth hover:shadow-glow">
      <CardHeader className="pb-3">
        <div className="flex items-start justify-between">
          <div className="flex items-start space-x-3">
            <div className="flex h-10 w-10 items-center justify-center rounded-lg bg-primary/10">
              <Folder className="h-5 w-5 text-primary" />
            </div>
            <div>
              <CardTitle className="text-lg font-semibold text-foreground">
                {project.name}
              </CardTitle>
              {project.description && (
                <CardDescription className="mt-1 text-sm text-muted-foreground">
                  {project.description}
                </CardDescription>
              )}
            </div>
          </div>
          
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button variant="ghost" size="sm" className="h-8 w-8 p-0">
                <MoreVertical className="h-4 w-4" />
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent align="end">
              <DropdownMenuItem onClick={() => onViewDetails(project.id)}>
                View Details
              </DropdownMenuItem>
              <DropdownMenuItem onClick={() => onScan(project.id)}>
                Scan Now
              </DropdownMenuItem>
              <DropdownMenuItem>Settings</DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>
        </div>
      </CardHeader>

      <CardContent className="pt-0">
        {/* Risk Level */}
        <div className="mb-4">
          <SeverityBadge 
            severity={risk.level as "CRITICAL" | "HIGH" | "MEDIUM" | "LOW"} 
            className="mb-2" 
          />
        </div>

        {/* Stats */}
        <div className="grid grid-cols-3 gap-4 mb-4">
          <div className="text-center">
            <div className="flex items-center justify-center mb-1">
              <Shield className="h-4 w-4 text-primary mr-1" />
              <span className="text-lg font-semibold text-foreground">
                {project.vulnerabilityCount}
              </span>
            </div>
            <p className="text-xs text-muted-foreground">Vulnerabilities</p>
          </div>
          
          <div className="text-center">
            <div className="flex items-center justify-center mb-1">
              <AlertTriangle className="h-4 w-4 text-critical mr-1" />
              <span className="text-lg font-semibold text-foreground">
                {project.criticalCount}
              </span>
            </div>
            <p className="text-xs text-muted-foreground">Critical</p>
          </div>
          
          <div className="text-center">
            <div className="flex items-center justify-center mb-1">
              <Users className="h-4 w-4 text-primary mr-1" />
              <span className="text-lg font-semibold text-foreground">
                {project.collaboratorCount}
              </span>
            </div>
            <p className="text-xs text-muted-foreground">Team</p>
          </div>
        </div>

        {/* Footer */}
        <div className="flex items-center justify-between text-xs text-muted-foreground border-t border-security pt-3">
          <div className="flex items-center">
            <Calendar className="h-3 w-3 mr-1" />
            Created {new Date(project.createdAt).toLocaleDateString()}
          </div>
          {project.lastScan && (
            <div>
              Last scan: {new Date(project.lastScan).toLocaleDateString()}
            </div>
          )}
        </div>

        {/* Actions */}
        <div className="flex gap-2 mt-4">
          <Button 
            variant="outline" 
            size="sm" 
            className="flex-1"
            onClick={() => onViewDetails(project.id)}
          >
            View Details
          </Button>
          <Button 
            size="sm" 
            className="flex-1"
            onClick={() => onScan(project.id)}
          >
            Scan Now
          </Button>
        </div>
      </CardContent>
    </Card>
  );
}
│   │   │   │   │   # --- End: project-card.tsx ---

│   │   │   │   │   ├─ project-details-modal.tsx

│   │   │   │   │   # --- Begin: project-details-modal.tsx ---
import { useEffect, useState } from 'react';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Badge } from '@/components/ui/badge';
import { apiClient } from '@/lib/api';
import { useToast } from '@/hooks/use-toast';

interface ProjectDetailsModalProps {
  projectId: number;
  onClose: () => void;
}

export default function ProjectDetailsModal({ projectId, onClose }: ProjectDetailsModalProps) {
  const [project, setProject] = useState<any>(null);
  const [collaborators, setCollaborators] = useState<any[]>([]);
  const [scanHistory, setScanHistory] = useState<any[]>([]);
  const [loading, setLoading] = useState(true);
  const [collabEmail, setCollabEmail] = useState('');
  const [addingCollab, setAddingCollab] = useState(false);
  const [exporting, setExporting] = useState(false);
  const { toast } = useToast();

  useEffect(() => {
    const fetchDetails = async () => {
      setLoading(true);
      try {
        const projectData = await apiClient.getProject(projectId.toString());
        setProject(projectData);
        setCollaborators(projectData.collaborators || []);
        const history = await apiClient.getScanHistory(projectId.toString());
        setScanHistory(history.history || []);
      } catch (error) {
        toast({ title: 'Error', description: 'Failed to fetch project details', variant: 'destructive' });
      } finally {
        setLoading(false);
      }
    };
    fetchDetails();
  }, [projectId, toast]);

  const handleAddCollaborator = async () => {
    if (!collabEmail.trim()) return;
    setAddingCollab(true);
    try {
      await apiClient.addCollaborator(projectId.toString(), collabEmail);
      toast({ title: 'Success', description: 'Collaborator added' });
      setCollabEmail('');
      // Refresh collaborators
      const projectData = await apiClient.getProject(projectId.toString());
      setCollaborators(projectData.collaborators || []);
    } catch (error) {
      toast({ title: 'Error', description: 'Failed to add collaborator', variant: 'destructive' });
    } finally {
      setAddingCollab(false);
    }
  };

  const handleExport = async () => {
    setExporting(true);
    try {
      const res = await apiClient.exportProject(projectId.toString());
      // Assume backend returns a file URL or blob
      if (res && res.url) {
        window.open(res.url, '_blank');
      } else if (res && res.file) {
        // If backend returns a file blob
        const url = window.URL.createObjectURL(new Blob([res.file]));
        const link = document.createElement('a');
        link.href = url;
        link.setAttribute('download', `project-${projectId}-export.json`);
        document.body.appendChild(link);
        link.click();
        link.parentNode?.removeChild(link);
      } else {
        toast({ title: 'Exported', description: 'Export completed (check downloads or new tab)' });
      }
    } catch (error) {
      toast({ title: 'Error', description: 'Failed to export project', variant: 'destructive' });
    } finally {
      setExporting(false);
    }
  };

  return (
    <Dialog open onOpenChange={onClose}>
      <DialogContent className="max-w-2xl bg-gradient-card border-security">
        <DialogHeader>
          <DialogTitle className="text-foreground">Project Details</DialogTitle>
          <DialogDescription className="text-muted-foreground">
            View project info, collaborators, export, and scan history.
          </DialogDescription>
        </DialogHeader>
        {loading ? (
          <div className="py-8 text-center">Loading...</div>
        ) : project ? (
          <div className="space-y-6">
            <div>
              <h2 className="text-xl font-bold text-foreground">{project.name}</h2>
              <p className="text-muted-foreground mb-2">{project.description}</p>
              <div className="flex gap-4 text-sm text-muted-foreground">
                <span>Created: {new Date(project.createdAt).toLocaleString()}</span>
                {project.lastScan && <span>Last Scan: {new Date(project.lastScan).toLocaleString()}</span>}
              </div>
            </div>
            <div>
              <h3 className="font-semibold mb-2">Collaborators</h3>
              <div className="flex flex-wrap gap-2 mb-2">
                {collaborators.length === 0 && <span className="text-muted-foreground">No collaborators</span>}
                {collaborators.map((c: any) => (
                  <Badge key={c.id || c.email}>{c.email}</Badge>
                ))}
              </div>
              <div className="flex gap-2 mt-2">
                <Input
                  placeholder="Add collaborator by email"
                  value={collabEmail}
                  onChange={e => setCollabEmail(e.target.value)}
                  disabled={addingCollab}
                />
                <Button onClick={handleAddCollaborator} disabled={addingCollab || !collabEmail.trim()}>
                  Add
                </Button>
              </div>
            </div>
            <div>
              <h3 className="font-semibold mb-2">Export Project</h3>
              <Button onClick={handleExport} disabled={exporting}>
                {exporting ? 'Exporting...' : 'Export Project'}
              </Button>
            </div>
            <div>
              <h3 className="font-semibold mb-2">Scan History</h3>
              {scanHistory.length === 0 ? (
                <div className="text-muted-foreground">No scan history</div>
              ) : (
                <div className="max-h-48 overflow-y-auto space-y-2">
                  {scanHistory.map((scan: any) => (
                    <div key={scan.id} className="border border-security rounded p-2 flex flex-col gap-1 bg-background/50">
                      <div className="flex justify-between">
                        <span className="font-medium">{scan.fileName || scan.id}</span>
                        <span className="text-xs text-muted-foreground">{scan.status || 'completed'}</span>
                      </div>
                      <div className="flex gap-4 text-xs">
                        <span>Critical: {scan.critical || scan.vulnerabilities?.critical || 0}</span>
                        <span>High: {scan.high || scan.vulnerabilities?.high || 0}</span>
                        <span>Medium: {scan.medium || scan.vulnerabilities?.medium || 0}</span>
                        <span>Low: {scan.low || scan.vulnerabilities?.low || 0}</span>
                        <span>Total: {scan.total || scan.vulnerabilities?.total || 0}</span>
                        <span>Dependencies: {scan.dependencies || 0}</span>
                        <span>At: {scan.scanTime || scan.createdAt ? new Date(scan.createdAt).toLocaleString() : ''}</span>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          </div>
        ) : (
          <div className="py-8 text-center">Project not found</div>
        )}
      </DialogContent>
    </Dialog>
  );
}
│   │   │   │   │   # --- End: project-details-modal.tsx ---

│   │   │   │   ├─ scanning/
│   │   │   │   │   ├─ file-upload.tsx

│   │   │   │   │   # --- Begin: file-upload.tsx ---
import React, { useState, useCallback, useRef, memo } from 'react';
import { useDropzone } from 'react-dropzone';
import { Upload, File, X, CheckCircle, AlertCircle, Loader2 } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Progress } from '@/components/ui/progress';
import { Badge } from '@/components/ui/badge';
import { Card, CardContent } from '@/components/ui/card';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { toast } from 'sonner';
import type { FileUploadProps, SupportedFileType } from '@/types';

const SUPPORTED_FILE_TYPES: SupportedFileType[] = [
  {
    extension: '.json',
    name: 'package.json',
    description: 'Node.js dependencies',
    examples: ['package.json', 'package-lock.json']
  },
  {
    extension: '.txt',
    name: 'requirements.txt',
    description: 'Python dependencies',
    examples: ['requirements.txt', 'Pipfile.lock']
  },
  {
    extension: '.xml',
    name: 'pom.xml',
    description: 'Java/Maven dependencies',
    examples: ['pom.xml', 'build.gradle']
  },
  {
    extension: '.lock',
    name: 'Gemfile.lock',
    description: 'Ruby dependencies',
    examples: ['Gemfile.lock', 'Gemfile']
  },
  {
    extension: '.json',
    name: 'composer.json',
    description: 'PHP dependencies',
    examples: ['composer.json', 'composer.lock']
  },
  {
    extension: '.mod',
    name: 'go.mod',
    description: 'Go dependencies',
    examples: ['go.mod', 'go.sum']
  }
];

const MAX_FILE_SIZE = 10 * 1024 * 1024; // 10MB

// Memoized file validation function
const validateFile = (file: File): string | null => {
  if (file.size > MAX_FILE_SIZE) {
    return `File size (${(file.size / 1024 / 1024).toFixed(2)}MB) exceeds maximum allowed size (10MB)`;
  }

  const fileExtension = file.name.toLowerCase().split('.').pop();
  const isSupported = SUPPORTED_FILE_TYPES.some(type => 
    type.examples.some(example => 
      file.name.toLowerCase().includes(example.toLowerCase()) ||
      file.name.toLowerCase().endsWith(type.extension)
    )
  );

  if (!isSupported) {
    return `File type not supported. Please upload a supported dependency file.`;
  }

  return null;
};

// Memoized file upload component
export const FileUpload = memo<FileUploadProps>(({ onUpload, projectId }) => {
  const [uploading, setUploading] = useState(false);
  const [progress, setProgress] = useState(0);
  const [selectedFile, setSelectedFile] = useState<File | null>(null);
  const [error, setError] = useState<string | null>(null);
  const abortControllerRef = useRef<AbortController | null>(null);

  const handleFileSelect = useCallback((acceptedFiles: File[]) => {
    if (acceptedFiles.length === 0) return;

    const file = acceptedFiles[0];
    const validationError = validateFile(file);

    if (validationError) {
      setError(validationError);
      toast.error('File validation failed', {
        description: validationError
      });
      return;
    }

    setSelectedFile(file);
    setError(null);
    toast.success('File selected successfully', {
      description: `${file.name} (${(file.size / 1024 / 1024).toFixed(2)}MB)`
    });
  }, []);

  const { getRootProps, getInputProps, isDragActive, isDragReject } = useDropzone({
    onDrop: handleFileSelect,
    accept: {
      'application/json': ['.json'],
      'text/plain': ['.txt', '.lock', '.mod'],
      'application/xml': ['.xml']
    },
    maxFiles: 1,
    disabled: uploading
  });

  const handleUpload = useCallback(async () => {
    if (!selectedFile) return;

    setUploading(true);
    setProgress(0);
    setError(null);

    // Create abort controller for cancellation
    abortControllerRef.current = new AbortController();

    let progressInterval: NodeJS.Timeout | undefined; // <-- Declaration moved here

    try {
      // Simulate upload progress
      progressInterval = setInterval(() => {
        setProgress(prev => {
          if (prev >= 90) {
            clearInterval(progressInterval!);
            return 90;
          }
          return prev + 10;
        });
      }, 200);

      // Call the upload function
      await onUpload(selectedFile);

      // Complete progress
      setProgress(100);
      clearInterval(progressInterval);

      toast.success('File uploaded successfully', {
        description: 'Vulnerability scan completed'
      });

      // Reset state after successful upload
      setTimeout(() => {
        setSelectedFile(null);
        setProgress(0);
        setUploading(false);
      }, 1000);

    } catch (error) {
      clearInterval(progressInterval);
      setProgress(0);
      
      const errorMessage = error instanceof Error ? error.message : 'Upload failed';
      setError(errorMessage);
      
      toast.error('Upload failed', {
        description: errorMessage
      });
    } finally {
      setUploading(false);
      abortControllerRef.current = null;
    }
  }, [selectedFile, onUpload]);

  const handleCancel = useCallback(() => {
    if (abortControllerRef.current) {
      abortControllerRef.current.abort();
    }
    setUploading(false);
    setProgress(0);
    setError(null);
    toast.info('Upload cancelled');
  }, []);

  const removeFile = useCallback(() => {
    setSelectedFile(null);
    setError(null);
    setProgress(0);
  }, []);

  return (
    <div className="space-y-6">
      {/* File Upload Area */}
      <Card>
        <CardContent className="p-6">
          <div
            {...getRootProps()}
            className={`
              border-2 border-dashed rounded-lg p-8 text-center transition-all duration-200 cursor-pointer
              ${isDragActive && !isDragReject ? 'border-primary bg-primary/5' : ''}
              ${isDragReject ? 'border-destructive bg-destructive/5' : ''}
              ${!isDragActive && !isDragReject ? 'border-muted-foreground/25 hover:border-primary/50 hover:bg-muted/50' : ''}
              ${uploading ? 'pointer-events-none opacity-50' : ''}
            `}
          >
            <input {...getInputProps()} />
            
            {uploading ? (
              <div className="space-y-4">
                <Loader2 className="h-12 w-12 text-primary animate-spin mx-auto" />
                <div>
                  <h3 className="text-lg font-semibold">Uploading...</h3>
                  <p className="text-muted-foreground">Please wait while we process your file</p>
                </div>
              </div>
            ) : selectedFile ? (
              <div className="space-y-4">
                <CheckCircle className="h-12 w-12 text-green-500 mx-auto" />
                <div>
                  <h3 className="text-lg font-semibold">File Selected</h3>
                  <p className="text-muted-foreground">{selectedFile.name}</p>
                  <p className="text-sm text-muted-foreground">
                    {(selectedFile.size / 1024 / 1024).toFixed(2)} MB
                  </p>
                </div>
              </div>
            ) : (
              <div className="space-y-4">
                <Upload className="h-12 w-12 text-muted-foreground mx-auto" />
                <div>
                  <h3 className="text-lg font-semibold">
                    {isDragActive ? 'Drop your file here' : 'Drag & drop your dependency file'}
                  </h3>
                  <p className="text-muted-foreground">
                    or click to browse files
                  </p>
                </div>
              </div>
            )}
          </div>
        </CardContent>
      </Card>

      {/* Error Display */}
      {error && (
        <Alert variant="destructive">
          <AlertCircle className="h-4 w-4" />
          <AlertDescription>{error}</AlertDescription>
        </Alert>
      )}

      {/* Upload Progress */}
      {uploading && (
        <Card>
          <CardContent className="p-4">
            <div className="space-y-2">
              <div className="flex justify-between text-sm">
                <span>Uploading...</span>
                <span>{progress}%</span>
              </div>
              <Progress value={progress} className="h-2" />
              <div className="flex justify-end">
                <Button variant="outline" size="sm" onClick={handleCancel}>
                  Cancel
                </Button>
              </div>
            </div>
          </CardContent>
        </Card>
      )}

      {/* Upload Button */}
      {selectedFile && !uploading && (
        <Button onClick={handleUpload} className="w-full">
          <Upload className="mr-2 h-4 w-4" />
          Upload and Scan
        </Button>
      )}

      {/* Remove File Button */}
      {selectedFile && !uploading && (
        <Button variant="outline" onClick={removeFile} className="w-full">
          <X className="mr-2 h-4 w-4" />
          Remove File
        </Button>
      )}

      {/* Supported File Types */}
      <Card>
        <CardContent className="p-4">
          <h4 className="font-medium mb-3">Supported File Types</h4>
          <div className="grid gap-2 sm:grid-cols-2 lg:grid-cols-3">
            {SUPPORTED_FILE_TYPES.map((type, index) => (
              <div key={index} className="flex items-center space-x-2 p-2 border rounded">
                <File className="h-4 w-4 text-muted-foreground" />
                <div className="flex-1 min-w-0">
                  <p className="text-sm font-medium truncate">{type.name}</p>
                  <p className="text-xs text-muted-foreground truncate">{type.description}</p>
                </div>
              </div>
            ))}
          </div>
        </CardContent>
      </Card>

      {/* Upload Guidelines */}
      <Card>
        <CardContent className="p-4">
          <h4 className="font-medium mb-3">Upload Guidelines</h4>
          <div className="space-y-2 text-sm text-muted-foreground">
            <div className="flex items-center space-x-2">
              <CheckCircle className="h-4 w-4 text-green-500" />
              <span>Maximum file size: 10MB</span>
            </div>
            <div className="flex items-center space-x-2">
              <CheckCircle className="h-4 w-4 text-green-500" />
              <span>Supported formats: JSON, TXT, XML, LOCK, MOD</span>
            </div>
            <div className="flex items-center space-x-2">
              <CheckCircle className="h-4 w-4 text-green-500" />
              <span>One file per upload</span>
            </div>
            <div className="flex items-center space-x-2">
              <CheckCircle className="h-4 w-4 text-green-500" />
              <span>Scan results available immediately</span>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
});

FileUpload.displayName = 'FileUpload'; 
│   │   │   │   │   # --- End: file-upload.tsx ---

│   │   │   │   │   ├─ __tests__/
│   │   │   │   ├─ ui/
│   │   │   │   │   ├─ accordion.tsx

│   │   │   │   │   # --- Begin: accordion.tsx ---
import * as React from "react"
import * as AccordionPrimitive from "@radix-ui/react-accordion"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const Accordion = AccordionPrimitive.Root

const AccordionItem = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>
>(({ className, ...props }, ref) => (
  <AccordionPrimitive.Item
    ref={ref}
    className={cn("border-b", className)}
    {...props}
  />
))
AccordionItem.displayName = "AccordionItem"

const AccordionTrigger = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Header className="flex">
    <AccordionPrimitive.Trigger
      ref={ref}
      className={cn(
        "flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180",
        className
      )}
      {...props}
    >
      {children}
      <ChevronDown className="h-4 w-4 shrink-0 transition-transform duration-200" />
    </AccordionPrimitive.Trigger>
  </AccordionPrimitive.Header>
))
AccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName

const AccordionContent = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Content
    ref={ref}
    className="overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down"
    {...props}
  >
    <div className={cn("pb-4 pt-0", className)}>{children}</div>
  </AccordionPrimitive.Content>
))

AccordionContent.displayName = AccordionPrimitive.Content.displayName

export { Accordion, AccordionItem, AccordionTrigger, AccordionContent }

│   │   │   │   │   # --- End: accordion.tsx ---

│   │   │   │   │   ├─ alert-dialog.tsx

│   │   │   │   │   # --- Begin: alert-dialog.tsx ---
import * as React from "react"
import * as AlertDialogPrimitive from "@radix-ui/react-alert-dialog"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

const AlertDialog = AlertDialogPrimitive.Root

const AlertDialogTrigger = AlertDialogPrimitive.Trigger

const AlertDialogPortal = AlertDialogPrimitive.Portal

const AlertDialogOverlay = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
AlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName

const AlertDialogContent = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>
>(({ className, ...props }, ref) => (
  <AlertDialogPortal>
    <AlertDialogOverlay />
    <AlertDialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    />
  </AlertDialogPortal>
))
AlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName

const AlertDialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
AlertDialogHeader.displayName = "AlertDialogHeader"

const AlertDialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
AlertDialogFooter.displayName = "AlertDialogFooter"

const AlertDialogTitle = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold", className)}
    {...props}
  />
))
AlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName

const AlertDialogDescription = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
AlertDialogDescription.displayName =
  AlertDialogPrimitive.Description.displayName

const AlertDialogAction = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Action>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Action
    ref={ref}
    className={cn(buttonVariants(), className)}
    {...props}
  />
))
AlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName

const AlertDialogCancel = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Cancel
    ref={ref}
    className={cn(
      buttonVariants({ variant: "outline" }),
      "mt-2 sm:mt-0",
      className
    )}
    {...props}
  />
))
AlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName

export {
  AlertDialog,
  AlertDialogPortal,
  AlertDialogOverlay,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogFooter,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogAction,
  AlertDialogCancel,
}

│   │   │   │   │   # --- End: alert-dialog.tsx ---

│   │   │   │   │   ├─ alert.tsx

│   │   │   │   │   # --- Begin: alert.tsx ---
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const alertVariants = cva(
  "relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground",
  {
    variants: {
      variant: {
        default: "bg-background text-foreground",
        destructive:
          "border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Alert = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>
>(({ className, variant, ...props }, ref) => (
  <div
    ref={ref}
    role="alert"
    className={cn(alertVariants({ variant }), className)}
    {...props}
  />
))
Alert.displayName = "Alert"

const AlertTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h5
    ref={ref}
    className={cn("mb-1 font-medium leading-none tracking-tight", className)}
    {...props}
  />
))
AlertTitle.displayName = "AlertTitle"

const AlertDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm [&_p]:leading-relaxed", className)}
    {...props}
  />
))
AlertDescription.displayName = "AlertDescription"

export { Alert, AlertTitle, AlertDescription }

│   │   │   │   │   # --- End: alert.tsx ---

│   │   │   │   │   ├─ aspect-ratio.tsx

│   │   │   │   │   # --- Begin: aspect-ratio.tsx ---
import * as AspectRatioPrimitive from "@radix-ui/react-aspect-ratio"

const AspectRatio = AspectRatioPrimitive.Root

export { AspectRatio }

│   │   │   │   │   # --- End: aspect-ratio.tsx ---

│   │   │   │   │   ├─ avatar.tsx

│   │   │   │   │   # --- Begin: avatar.tsx ---
import * as React from "react"
import * as AvatarPrimitive from "@radix-ui/react-avatar"

import { cn } from "@/lib/utils"

const Avatar = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full",
      className
    )}
    {...props}
  />
))
Avatar.displayName = AvatarPrimitive.Root.displayName

const AvatarImage = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Image>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Image
    ref={ref}
    className={cn("aspect-square h-full w-full", className)}
    {...props}
  />
))
AvatarImage.displayName = AvatarPrimitive.Image.displayName

const AvatarFallback = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Fallback>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Fallback
    ref={ref}
    className={cn(
      "flex h-full w-full items-center justify-center rounded-full bg-muted",
      className
    )}
    {...props}
  />
))
AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName

export { Avatar, AvatarImage, AvatarFallback }

│   │   │   │   │   # --- End: avatar.tsx ---

│   │   │   │   │   ├─ badge.tsx

│   │   │   │   │   # --- Begin: badge.tsx ---
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground hover:bg-primary/80",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
        destructive:
          "border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80",
        outline: "text-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

export interface BadgeProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof badgeVariants> {}

function Badge({ className, variant, ...props }: BadgeProps) {
  return (
    <div className={cn(badgeVariants({ variant }), className)} {...props} />
  )
}

export { Badge, badgeVariants }

│   │   │   │   │   # --- End: badge.tsx ---

│   │   │   │   │   ├─ breadcrumb.tsx

│   │   │   │   │   # --- Begin: breadcrumb.tsx ---
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { ChevronRight, MoreHorizontal } from "lucide-react"

import { cn } from "@/lib/utils"

const Breadcrumb = React.forwardRef<
  HTMLElement,
  React.ComponentPropsWithoutRef<"nav"> & {
    separator?: React.ReactNode
  }
>(({ ...props }, ref) => <nav ref={ref} aria-label="breadcrumb" {...props} />)
Breadcrumb.displayName = "Breadcrumb"

const BreadcrumbList = React.forwardRef<
  HTMLOListElement,
  React.ComponentPropsWithoutRef<"ol">
>(({ className, ...props }, ref) => (
  <ol
    ref={ref}
    className={cn(
      "flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5",
      className
    )}
    {...props}
  />
))
BreadcrumbList.displayName = "BreadcrumbList"

const BreadcrumbItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentPropsWithoutRef<"li">
>(({ className, ...props }, ref) => (
  <li
    ref={ref}
    className={cn("inline-flex items-center gap-1.5", className)}
    {...props}
  />
))
BreadcrumbItem.displayName = "BreadcrumbItem"

const BreadcrumbLink = React.forwardRef<
  HTMLAnchorElement,
  React.ComponentPropsWithoutRef<"a"> & {
    asChild?: boolean
  }
>(({ asChild, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a"

  return (
    <Comp
      ref={ref}
      className={cn("transition-colors hover:text-foreground", className)}
      {...props}
    />
  )
})
BreadcrumbLink.displayName = "BreadcrumbLink"

const BreadcrumbPage = React.forwardRef<
  HTMLSpanElement,
  React.ComponentPropsWithoutRef<"span">
>(({ className, ...props }, ref) => (
  <span
    ref={ref}
    role="link"
    aria-disabled="true"
    aria-current="page"
    className={cn("font-normal text-foreground", className)}
    {...props}
  />
))
BreadcrumbPage.displayName = "BreadcrumbPage"

const BreadcrumbSeparator = ({
  children,
  className,
  ...props
}: React.ComponentProps<"li">) => (
  <li
    role="presentation"
    aria-hidden="true"
    className={cn("[&>svg]:size-3.5", className)}
    {...props}
  >
    {children ?? <ChevronRight />}
  </li>
)
BreadcrumbSeparator.displayName = "BreadcrumbSeparator"

const BreadcrumbEllipsis = ({
  className,
  ...props
}: React.ComponentProps<"span">) => (
  <span
    role="presentation"
    aria-hidden="true"
    className={cn("flex h-9 w-9 items-center justify-center", className)}
    {...props}
  >
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">More</span>
  </span>
)
BreadcrumbEllipsis.displayName = "BreadcrumbElipssis"

export {
  Breadcrumb,
  BreadcrumbList,
  BreadcrumbItem,
  BreadcrumbLink,
  BreadcrumbPage,
  BreadcrumbSeparator,
  BreadcrumbEllipsis,
}

│   │   │   │   │   # --- End: breadcrumb.tsx ---

│   │   │   │   │   ├─ button.tsx

│   │   │   │   │   # --- Begin: button.tsx ---
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-smooth focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "bg-gradient-primary text-primary-foreground hover:shadow-glow hover:scale-105",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          "border border-security bg-background hover:bg-primary/10 hover:text-primary hover:border-primary",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
        hero: "bg-gradient-primary text-primary-foreground border border-security/20 hover:shadow-security hover:scale-105",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }

│   │   │   │   │   # --- End: button.tsx ---

│   │   │   │   │   ├─ calendar.tsx

│   │   │   │   │   # --- Begin: calendar.tsx ---
import * as React from "react";
import { ChevronLeft, ChevronRight } from "lucide-react";
import { DayPicker } from "react-day-picker";

import { cn } from "@/lib/utils";
import { buttonVariants } from "@/components/ui/button";

export type CalendarProps = React.ComponentProps<typeof DayPicker>;

function Calendar({
  className,
  classNames,
  showOutsideDays = true,
  ...props
}: CalendarProps) {
  return (
    <DayPicker
      showOutsideDays={showOutsideDays}
      className={cn("p-3", className)}
      classNames={{
        months: "flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0",
        month: "space-y-4",
        caption: "flex justify-center pt-1 relative items-center",
        caption_label: "text-sm font-medium",
        nav: "space-x-1 flex items-center",
        nav_button: cn(
          buttonVariants({ variant: "outline" }),
          "h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100"
        ),
        nav_button_previous: "absolute left-1",
        nav_button_next: "absolute right-1",
        table: "w-full border-collapse space-y-1",
        head_row: "flex",
        head_cell:
          "text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]",
        row: "flex w-full mt-2",
        cell: "h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20",
        day: cn(
          buttonVariants({ variant: "ghost" }),
          "h-9 w-9 p-0 font-normal aria-selected:opacity-100"
        ),
        day_range_end: "day-range-end",
        day_selected:
          "bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground",
        day_today: "bg-accent text-accent-foreground",
        day_outside:
          "day-outside text-muted-foreground opacity-50 aria-selected:bg-accent/50 aria-selected:text-muted-foreground aria-selected:opacity-30",
        day_disabled: "text-muted-foreground opacity-50",
        day_range_middle:
          "aria-selected:bg-accent aria-selected:text-accent-foreground",
        day_hidden: "invisible",
        ...classNames,
      }}
      components={{
        IconLeft: ({ ..._props }) => <ChevronLeft className="h-4 w-4" />,
        IconRight: ({ ..._props }) => <ChevronRight className="h-4 w-4" />,
      }}
      {...props}
    />
  );
}
Calendar.displayName = "Calendar";

export { Calendar };

│   │   │   │   │   # --- End: calendar.tsx ---

│   │   │   │   │   ├─ card.tsx

│   │   │   │   │   # --- Begin: card.tsx ---
import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-lg border bg-card text-card-foreground shadow-sm",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h3
    ref={ref}
    className={cn(
      "text-2xl font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <p
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }

│   │   │   │   │   # --- End: card.tsx ---

│   │   │   │   │   ├─ carousel.tsx

│   │   │   │   │   # --- Begin: carousel.tsx ---
import * as React from "react"
import useEmblaCarousel, {
  type UseEmblaCarouselType,
} from "embla-carousel-react"
import { ArrowLeft, ArrowRight } from "lucide-react"

import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"

type CarouselApi = UseEmblaCarouselType[1]
type UseCarouselParameters = Parameters<typeof useEmblaCarousel>
type CarouselOptions = UseCarouselParameters[0]
type CarouselPlugin = UseCarouselParameters[1]

type CarouselProps = {
  opts?: CarouselOptions
  plugins?: CarouselPlugin
  orientation?: "horizontal" | "vertical"
  setApi?: (api: CarouselApi) => void
}

type CarouselContextProps = {
  carouselRef: ReturnType<typeof useEmblaCarousel>[0]
  api: ReturnType<typeof useEmblaCarousel>[1]
  scrollPrev: () => void
  scrollNext: () => void
  canScrollPrev: boolean
  canScrollNext: boolean
} & CarouselProps

const CarouselContext = React.createContext<CarouselContextProps | null>(null)

function useCarousel() {
  const context = React.useContext(CarouselContext)

  if (!context) {
    throw new Error("useCarousel must be used within a <Carousel />")
  }

  return context
}

const Carousel = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & CarouselProps
>(
  (
    {
      orientation = "horizontal",
      opts,
      setApi,
      plugins,
      className,
      children,
      ...props
    },
    ref
  ) => {
    const [carouselRef, api] = useEmblaCarousel(
      {
        ...opts,
        axis: orientation === "horizontal" ? "x" : "y",
      },
      plugins
    )
    const [canScrollPrev, setCanScrollPrev] = React.useState(false)
    const [canScrollNext, setCanScrollNext] = React.useState(false)

    const onSelect = React.useCallback((api: CarouselApi) => {
      if (!api) {
        return
      }

      setCanScrollPrev(api.canScrollPrev())
      setCanScrollNext(api.canScrollNext())
    }, [])

    const scrollPrev = React.useCallback(() => {
      api?.scrollPrev()
    }, [api])

    const scrollNext = React.useCallback(() => {
      api?.scrollNext()
    }, [api])

    const handleKeyDown = React.useCallback(
      (event: React.KeyboardEvent<HTMLDivElement>) => {
        if (event.key === "ArrowLeft") {
          event.preventDefault()
          scrollPrev()
        } else if (event.key === "ArrowRight") {
          event.preventDefault()
          scrollNext()
        }
      },
      [scrollPrev, scrollNext]
    )

    React.useEffect(() => {
      if (!api || !setApi) {
        return
      }

      setApi(api)
    }, [api, setApi])

    React.useEffect(() => {
      if (!api) {
        return
      }

      onSelect(api)
      api.on("reInit", onSelect)
      api.on("select", onSelect)

      return () => {
        api?.off("select", onSelect)
      }
    }, [api, onSelect])

    return (
      <CarouselContext.Provider
        value={{
          carouselRef,
          api: api,
          opts,
          orientation:
            orientation || (opts?.axis === "y" ? "vertical" : "horizontal"),
          scrollPrev,
          scrollNext,
          canScrollPrev,
          canScrollNext,
        }}
      >
        <div
          ref={ref}
          onKeyDownCapture={handleKeyDown}
          className={cn("relative", className)}
          role="region"
          aria-roledescription="carousel"
          {...props}
        >
          {children}
        </div>
      </CarouselContext.Provider>
    )
  }
)
Carousel.displayName = "Carousel"

const CarouselContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { carouselRef, orientation } = useCarousel()

  return (
    <div ref={carouselRef} className="overflow-hidden">
      <div
        ref={ref}
        className={cn(
          "flex",
          orientation === "horizontal" ? "-ml-4" : "-mt-4 flex-col",
          className
        )}
        {...props}
      />
    </div>
  )
})
CarouselContent.displayName = "CarouselContent"

const CarouselItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { orientation } = useCarousel()

  return (
    <div
      ref={ref}
      role="group"
      aria-roledescription="slide"
      className={cn(
        "min-w-0 shrink-0 grow-0 basis-full",
        orientation === "horizontal" ? "pl-4" : "pt-4",
        className
      )}
      {...props}
    />
  )
})
CarouselItem.displayName = "CarouselItem"

const CarouselPrevious = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollPrev, canScrollPrev } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute  h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-left-12 top-1/2 -translate-y-1/2"
          : "-top-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollPrev}
      onClick={scrollPrev}
      {...props}
    >
      <ArrowLeft className="h-4 w-4" />
      <span className="sr-only">Previous slide</span>
    </Button>
  )
})
CarouselPrevious.displayName = "CarouselPrevious"

const CarouselNext = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollNext, canScrollNext } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-right-12 top-1/2 -translate-y-1/2"
          : "-bottom-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollNext}
      onClick={scrollNext}
      {...props}
    >
      <ArrowRight className="h-4 w-4" />
      <span className="sr-only">Next slide</span>
    </Button>
  )
})
CarouselNext.displayName = "CarouselNext"

export {
  type CarouselApi,
  Carousel,
  CarouselContent,
  CarouselItem,
  CarouselPrevious,
  CarouselNext,
}

│   │   │   │   │   # --- End: carousel.tsx ---

│   │   │   │   │   ├─ chart.tsx

│   │   │   │   │   # --- Begin: chart.tsx ---
import * as React from "react"
import * as RechartsPrimitive from "recharts"

import { cn } from "@/lib/utils"

// Format: { THEME_NAME: CSS_SELECTOR }
const THEMES = { light: "", dark: ".dark" } as const

export type ChartConfig = {
  [k in string]: {
    label?: React.ReactNode
    icon?: React.ComponentType
  } & (
    | { color?: string; theme?: never }
    | { color?: never; theme: Record<keyof typeof THEMES, string> }
  )
}

type ChartContextProps = {
  config: ChartConfig
}

const ChartContext = React.createContext<ChartContextProps | null>(null)

function useChart() {
  const context = React.useContext(ChartContext)

  if (!context) {
    throw new Error("useChart must be used within a <ChartContainer />")
  }

  return context
}

const ChartContainer = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    config: ChartConfig
    children: React.ComponentProps<
      typeof RechartsPrimitive.ResponsiveContainer
    >["children"]
  }
>(({ id, className, children, config, ...props }, ref) => {
  const uniqueId = React.useId()
  const chartId = `chart-${id || uniqueId.replace(/:/g, "")}`

  return (
    <ChartContext.Provider value={{ config }}>
      <div
        data-chart={chartId}
        ref={ref}
        className={cn(
          "flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none",
          className
        )}
        {...props}
      >
        <ChartStyle id={chartId} config={config} />
        <RechartsPrimitive.ResponsiveContainer>
          {children}
        </RechartsPrimitive.ResponsiveContainer>
      </div>
    </ChartContext.Provider>
  )
})
ChartContainer.displayName = "Chart"

const ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {
  const colorConfig = Object.entries(config).filter(
    ([_, config]) => config.theme || config.color
  )

  if (!colorConfig.length) {
    return null
  }

  return (
    <style
      dangerouslySetInnerHTML={{
        __html: Object.entries(THEMES)
          .map(
            ([theme, prefix]) => `
${prefix} [data-chart=${id}] {
${colorConfig
  .map(([key, itemConfig]) => {
    const color =
      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||
      itemConfig.color
    return color ? `  --color-${key}: ${color};` : null
  })
  .join("\n")}
}
`
          )
          .join("\n"),
      }}
    />
  )
}

const ChartTooltip = RechartsPrimitive.Tooltip

const ChartTooltipContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &
    React.ComponentProps<"div"> & {
      hideLabel?: boolean
      hideIndicator?: boolean
      indicator?: "line" | "dot" | "dashed"
      nameKey?: string
      labelKey?: string
    }
>(
  (
    {
      active,
      payload,
      className,
      indicator = "dot",
      hideLabel = false,
      hideIndicator = false,
      label,
      labelFormatter,
      labelClassName,
      formatter,
      color,
      nameKey,
      labelKey,
    },
    ref
  ) => {
    const { config } = useChart()

    const tooltipLabel = React.useMemo(() => {
      if (hideLabel || !payload?.length) {
        return null
      }

      const [item] = payload
      const key = `${labelKey || item.dataKey || item.name || "value"}`
      const itemConfig = getPayloadConfigFromPayload(config, item, key)
      const value =
        !labelKey && typeof label === "string"
          ? config[label as keyof typeof config]?.label || label
          : itemConfig?.label

      if (labelFormatter) {
        return (
          <div className={cn("font-medium", labelClassName)}>
            {labelFormatter(value, payload)}
          </div>
        )
      }

      if (!value) {
        return null
      }

      return <div className={cn("font-medium", labelClassName)}>{value}</div>
    }, [
      label,
      labelFormatter,
      payload,
      hideLabel,
      labelClassName,
      config,
      labelKey,
    ])

    if (!active || !payload?.length) {
      return null
    }

    const nestLabel = payload.length === 1 && indicator !== "dot"

    return (
      <div
        ref={ref}
        className={cn(
          "grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl",
          className
        )}
      >
        {!nestLabel ? tooltipLabel : null}
        <div className="grid gap-1.5">
          {payload.map((item, index) => {
            const key = `${nameKey || item.name || item.dataKey || "value"}`
            const itemConfig = getPayloadConfigFromPayload(config, item, key)
            const indicatorColor = color || item.payload.fill || item.color

            return (
              <div
                key={item.dataKey}
                className={cn(
                  "flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground",
                  indicator === "dot" && "items-center"
                )}
              >
                {formatter && item?.value !== undefined && item.name ? (
                  formatter(item.value, item.name, item, index, item.payload)
                ) : (
                  <>
                    {itemConfig?.icon ? (
                      <itemConfig.icon />
                    ) : (
                      !hideIndicator && (
                        <div
                          className={cn(
                            "shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]",
                            {
                              "h-2.5 w-2.5": indicator === "dot",
                              "w-1": indicator === "line",
                              "w-0 border-[1.5px] border-dashed bg-transparent":
                                indicator === "dashed",
                              "my-0.5": nestLabel && indicator === "dashed",
                            }
                          )}
                          style={
                            {
                              "--color-bg": indicatorColor,
                              "--color-border": indicatorColor,
                            } as React.CSSProperties
                          }
                        />
                      )
                    )}
                    <div
                      className={cn(
                        "flex flex-1 justify-between leading-none",
                        nestLabel ? "items-end" : "items-center"
                      )}
                    >
                      <div className="grid gap-1.5">
                        {nestLabel ? tooltipLabel : null}
                        <span className="text-muted-foreground">
                          {itemConfig?.label || item.name}
                        </span>
                      </div>
                      {item.value && (
                        <span className="font-mono font-medium tabular-nums text-foreground">
                          {item.value.toLocaleString()}
                        </span>
                      )}
                    </div>
                  </>
                )}
              </div>
            )
          })}
        </div>
      </div>
    )
  }
)
ChartTooltipContent.displayName = "ChartTooltip"

const ChartLegend = RechartsPrimitive.Legend

const ChartLegendContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> &
    Pick<RechartsPrimitive.LegendProps, "payload" | "verticalAlign"> & {
      hideIcon?: boolean
      nameKey?: string
    }
>(
  (
    { className, hideIcon = false, payload, verticalAlign = "bottom", nameKey },
    ref
  ) => {
    const { config } = useChart()

    if (!payload?.length) {
      return null
    }

    return (
      <div
        ref={ref}
        className={cn(
          "flex items-center justify-center gap-4",
          verticalAlign === "top" ? "pb-3" : "pt-3",
          className
        )}
      >
        {payload.map((item) => {
          const key = `${nameKey || item.dataKey || "value"}`
          const itemConfig = getPayloadConfigFromPayload(config, item, key)

          return (
            <div
              key={item.value}
              className={cn(
                "flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground"
              )}
            >
              {itemConfig?.icon && !hideIcon ? (
                <itemConfig.icon />
              ) : (
                <div
                  className="h-2 w-2 shrink-0 rounded-[2px]"
                  style={{
                    backgroundColor: item.color,
                  }}
                />
              )}
              {itemConfig?.label}
            </div>
          )
        })}
      </div>
    )
  }
)
ChartLegendContent.displayName = "ChartLegend"

// Helper to extract item config from a payload.
function getPayloadConfigFromPayload(
  config: ChartConfig,
  payload: unknown,
  key: string
) {
  if (typeof payload !== "object" || payload === null) {
    return undefined
  }

  const payloadPayload =
    "payload" in payload &&
    typeof payload.payload === "object" &&
    payload.payload !== null
      ? payload.payload
      : undefined

  let configLabelKey: string = key

  if (
    key in payload &&
    typeof payload[key as keyof typeof payload] === "string"
  ) {
    configLabelKey = payload[key as keyof typeof payload] as string
  } else if (
    payloadPayload &&
    key in payloadPayload &&
    typeof payloadPayload[key as keyof typeof payloadPayload] === "string"
  ) {
    configLabelKey = payloadPayload[
      key as keyof typeof payloadPayload
    ] as string
  }

  return configLabelKey in config
    ? config[configLabelKey]
    : config[key as keyof typeof config]
}

export {
  ChartContainer,
  ChartTooltip,
  ChartTooltipContent,
  ChartLegend,
  ChartLegendContent,
  ChartStyle,
}

│   │   │   │   │   # --- End: chart.tsx ---

│   │   │   │   │   ├─ checkbox.tsx

│   │   │   │   │   # --- Begin: checkbox.tsx ---
import * as React from "react"
import * as CheckboxPrimitive from "@radix-ui/react-checkbox"
import { Check } from "lucide-react"

import { cn } from "@/lib/utils"

const Checkbox = React.forwardRef<
  React.ElementRef<typeof CheckboxPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>
>(({ className, ...props }, ref) => (
  <CheckboxPrimitive.Root
    ref={ref}
    className={cn(
      "peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground",
      className
    )}
    {...props}
  >
    <CheckboxPrimitive.Indicator
      className={cn("flex items-center justify-center text-current")}
    >
      <Check className="h-4 w-4" />
    </CheckboxPrimitive.Indicator>
  </CheckboxPrimitive.Root>
))
Checkbox.displayName = CheckboxPrimitive.Root.displayName

export { Checkbox }

│   │   │   │   │   # --- End: checkbox.tsx ---

│   │   │   │   │   ├─ collapsible.tsx

│   │   │   │   │   # --- Begin: collapsible.tsx ---
import * as CollapsiblePrimitive from "@radix-ui/react-collapsible"

const Collapsible = CollapsiblePrimitive.Root

const CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger

const CollapsibleContent = CollapsiblePrimitive.CollapsibleContent

export { Collapsible, CollapsibleTrigger, CollapsibleContent }

│   │   │   │   │   # --- End: collapsible.tsx ---

│   │   │   │   │   ├─ command.tsx

│   │   │   │   │   # --- Begin: command.tsx ---
import * as React from "react"
import { type DialogProps } from "@radix-ui/react-dialog"
import { Command as CommandPrimitive } from "cmdk"
import { Search } from "lucide-react"

import { cn } from "@/lib/utils"
import { Dialog, DialogContent } from "@/components/ui/dialog"

const Command = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive>
>(({ className, ...props }, ref) => (
  <CommandPrimitive
    ref={ref}
    className={cn(
      "flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground",
      className
    )}
    {...props}
  />
))
Command.displayName = CommandPrimitive.displayName

interface CommandDialogProps extends DialogProps {}

const CommandDialog = ({ children, ...props }: CommandDialogProps) => {
  return (
    <Dialog {...props}>
      <DialogContent className="overflow-hidden p-0 shadow-lg">
        <Command className="[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5">
          {children}
        </Command>
      </DialogContent>
    </Dialog>
  )
}

const CommandInput = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Input>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>
>(({ className, ...props }, ref) => (
  <div className="flex items-center border-b px-3" cmdk-input-wrapper="">
    <Search className="mr-2 h-4 w-4 shrink-0 opacity-50" />
    <CommandPrimitive.Input
      ref={ref}
      className={cn(
        "flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    />
  </div>
))

CommandInput.displayName = CommandPrimitive.Input.displayName

const CommandList = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.List
    ref={ref}
    className={cn("max-h-[300px] overflow-y-auto overflow-x-hidden", className)}
    {...props}
  />
))

CommandList.displayName = CommandPrimitive.List.displayName

const CommandEmpty = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Empty>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>
>((props, ref) => (
  <CommandPrimitive.Empty
    ref={ref}
    className="py-6 text-center text-sm"
    {...props}
  />
))

CommandEmpty.displayName = CommandPrimitive.Empty.displayName

const CommandGroup = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Group>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Group
    ref={ref}
    className={cn(
      "overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground",
      className
    )}
    {...props}
  />
))

CommandGroup.displayName = CommandPrimitive.Group.displayName

const CommandSeparator = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 h-px bg-border", className)}
    {...props}
  />
))
CommandSeparator.displayName = CommandPrimitive.Separator.displayName

const CommandItem = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50",
      className
    )}
    {...props}
  />
))

CommandItem.displayName = CommandPrimitive.Item.displayName

const CommandShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
CommandShortcut.displayName = "CommandShortcut"

export {
  Command,
  CommandDialog,
  CommandInput,
  CommandList,
  CommandEmpty,
  CommandGroup,
  CommandItem,
  CommandShortcut,
  CommandSeparator,
}

│   │   │   │   │   # --- End: command.tsx ---

│   │   │   │   │   ├─ context-menu.tsx

│   │   │   │   │   # --- Begin: context-menu.tsx ---
import * as React from "react"
import * as ContextMenuPrimitive from "@radix-ui/react-context-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const ContextMenu = ContextMenuPrimitive.Root

const ContextMenuTrigger = ContextMenuPrimitive.Trigger

const ContextMenuGroup = ContextMenuPrimitive.Group

const ContextMenuPortal = ContextMenuPrimitive.Portal

const ContextMenuSub = ContextMenuPrimitive.Sub

const ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup

const ContextMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <ContextMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </ContextMenuPrimitive.SubTrigger>
))
ContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName

const ContextMenuSubContent = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
ContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName

const ContextMenuContent = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Portal>
    <ContextMenuPrimitive.Content
      ref={ref}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </ContextMenuPrimitive.Portal>
))
ContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName

const ContextMenuItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
ContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName

const ContextMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <ContextMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.CheckboxItem>
))
ContextMenuCheckboxItem.displayName =
  ContextMenuPrimitive.CheckboxItem.displayName

const ContextMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <ContextMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.RadioItem>
))
ContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName

const ContextMenuLabel = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold text-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
ContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName

const ContextMenuSeparator = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-border", className)}
    {...props}
  />
))
ContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName

const ContextMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
ContextMenuShortcut.displayName = "ContextMenuShortcut"

export {
  ContextMenu,
  ContextMenuTrigger,
  ContextMenuContent,
  ContextMenuItem,
  ContextMenuCheckboxItem,
  ContextMenuRadioItem,
  ContextMenuLabel,
  ContextMenuSeparator,
  ContextMenuShortcut,
  ContextMenuGroup,
  ContextMenuPortal,
  ContextMenuSub,
  ContextMenuSubContent,
  ContextMenuSubTrigger,
  ContextMenuRadioGroup,
}

│   │   │   │   │   # --- End: context-menu.tsx ---

│   │   │   │   │   ├─ dialog.tsx

│   │   │   │   │   # --- Begin: dialog.tsx ---
import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogPortal = DialogPrimitive.Portal

const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
  />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
DialogHeader.displayName = "DialogHeader"

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
DialogFooter.displayName = "DialogFooter"

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogClose,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
}

│   │   │   │   │   # --- End: dialog.tsx ---

│   │   │   │   │   ├─ drawer.tsx

│   │   │   │   │   # --- Begin: drawer.tsx ---
import * as React from "react"
import { Drawer as DrawerPrimitive } from "vaul"

import { cn } from "@/lib/utils"

const Drawer = ({
  shouldScaleBackground = true,
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (
  <DrawerPrimitive.Root
    shouldScaleBackground={shouldScaleBackground}
    {...props}
  />
)
Drawer.displayName = "Drawer"

const DrawerTrigger = DrawerPrimitive.Trigger

const DrawerPortal = DrawerPrimitive.Portal

const DrawerClose = DrawerPrimitive.Close

const DrawerOverlay = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Overlay
    ref={ref}
    className={cn("fixed inset-0 z-50 bg-black/80", className)}
    {...props}
  />
))
DrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName

const DrawerContent = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DrawerPortal>
    <DrawerOverlay />
    <DrawerPrimitive.Content
      ref={ref}
      className={cn(
        "fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background",
        className
      )}
      {...props}
    >
      <div className="mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted" />
      {children}
    </DrawerPrimitive.Content>
  </DrawerPortal>
))
DrawerContent.displayName = "DrawerContent"

const DrawerHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn("grid gap-1.5 p-4 text-center sm:text-left", className)}
    {...props}
  />
)
DrawerHeader.displayName = "DrawerHeader"

const DrawerFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn("mt-auto flex flex-col gap-2 p-4", className)}
    {...props}
  />
)
DrawerFooter.displayName = "DrawerFooter"

const DrawerTitle = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DrawerTitle.displayName = DrawerPrimitive.Title.displayName

const DrawerDescription = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DrawerDescription.displayName = DrawerPrimitive.Description.displayName

export {
  Drawer,
  DrawerPortal,
  DrawerOverlay,
  DrawerTrigger,
  DrawerClose,
  DrawerContent,
  DrawerHeader,
  DrawerFooter,
  DrawerTitle,
  DrawerDescription,
}

│   │   │   │   │   # --- End: drawer.tsx ---

│   │   │   │   │   ├─ dropdown-menu.tsx

│   │   │   │   │   # --- Begin: dropdown-menu.tsx ---
import * as React from "react"
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const DropdownMenu = DropdownMenuPrimitive.Root

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger

const DropdownMenuGroup = DropdownMenuPrimitive.Group

const DropdownMenuPortal = DropdownMenuPrimitive.Portal

const DropdownMenuSub = DropdownMenuPrimitive.Sub

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup

const DropdownMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </DropdownMenuPrimitive.SubTrigger>
))
DropdownMenuSubTrigger.displayName =
  DropdownMenuPrimitive.SubTrigger.displayName

const DropdownMenuSubContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
DropdownMenuSubContent.displayName =
  DropdownMenuPrimitive.SubContent.displayName

const DropdownMenuContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </DropdownMenuPrimitive.Portal>
))
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName

const DropdownMenuItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName

const DropdownMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
))
DropdownMenuCheckboxItem.displayName =
  DropdownMenuPrimitive.CheckboxItem.displayName

const DropdownMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
))
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName

const DropdownMenuLabel = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName

const DropdownMenuSeparator = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName

const DropdownMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn("ml-auto text-xs tracking-widest opacity-60", className)}
      {...props}
    />
  )
}
DropdownMenuShortcut.displayName = "DropdownMenuShortcut"

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
}

│   │   │   │   │   # --- End: dropdown-menu.tsx ---

│   │   │   │   │   ├─ error-boundary.tsx

│   │   │   │   │   # --- Begin: error-boundary.tsx ---
import React, { Component, ErrorInfo, ReactNode } from 'react';
import { AlertTriangle, RefreshCw, Home } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Alert, AlertDescription } from '@/components/ui/alert';

interface Props {
  children: ReactNode;
  fallback?: ReactNode;
  onError?: (error: Error, errorInfo: ErrorInfo) => void;
}

interface State {
  hasError: boolean;
  error?: Error;
  errorInfo?: ErrorInfo;
}

export class ErrorBoundary extends Component<Props, State> {
  constructor(props: Props) {
    super(props);
    this.state = { hasError: false };
  }

  static getDerivedStateFromError(error: Error): State {
    return { hasError: true, error };
  }

  componentDidCatch(error: Error, errorInfo: ErrorInfo) {
    console.error('ErrorBoundary caught an error:', error, errorInfo);
    
    this.setState({
      error,
      errorInfo
    });

    // Call the onError callback if provided
    if (this.props.onError) {
      this.props.onError(error, errorInfo);
    }

    // Log to external service in production
    if (process.env.NODE_ENV === 'production') {
      // TODO: Send to error reporting service (e.g., Sentry)
      console.error('Production error:', {
        error: error.message,
        stack: error.stack,
        componentStack: errorInfo.componentStack
      });
    }
  }

  handleRetry = () => {
    this.setState({ hasError: false, error: undefined, errorInfo: undefined });
  };

  handleGoHome = () => {
    window.location.href = '/';
  };

  render() {
    if (this.state.hasError) {
      // Use custom fallback if provided
      if (this.props.fallback) {
        return this.props.fallback;
      }

      // Default error UI
      return (
        <div className="min-h-screen flex items-center justify-center p-4">
          <Card className="w-full max-w-md">
            <CardHeader className="text-center">
              <div className="mx-auto mb-4 p-3 bg-destructive/10 rounded-full w-fit">
                <AlertTriangle className="h-8 w-8 text-destructive" />
              </div>
              <CardTitle>Something went wrong</CardTitle>
              <CardDescription>
                An unexpected error occurred. Please try again or contact support if the problem persists.
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              {process.env.NODE_ENV === 'development' && this.state.error && (
                <Alert variant="destructive">
                  <AlertTriangle className="h-4 w-4" />
                  <AlertDescription>
                    <div className="space-y-2">
                      <p className="font-medium">{this.state.error.message}</p>
                      {this.state.error.stack && (
                        <details className="text-xs">
                          <summary className="cursor-pointer">Stack trace</summary>
                          <pre className="mt-2 whitespace-pre-wrap bg-muted p-2 rounded">
                            {this.state.error.stack}
                          </pre>
                        </details>
                      )}
                    </div>
                  </AlertDescription>
                </Alert>
              )}
              
              <div className="flex flex-col space-y-2">
                <Button onClick={this.handleRetry} className="w-full">
                  <RefreshCw className="mr-2 h-4 w-4" />
                  Try Again
                </Button>
                <Button variant="outline" onClick={this.handleGoHome} className="w-full">
                  <Home className="mr-2 h-4 w-4" />
                  Go Home
                </Button>
              </div>
              
              <div className="text-center text-sm text-muted-foreground">
                <p>Error ID: {this.state.error?.name || 'Unknown'}</p>
                <p>Time: {new Date().toLocaleString()}</p>
              </div>
            </CardContent>
          </Card>
        </div>
      );
    }

    return this.props.children;
  }
}

// Higher-order component for wrapping components with error boundary
export function withErrorBoundary<P extends object>(
  Component: React.ComponentType<P>,
  fallback?: ReactNode,
  onError?: (error: Error, errorInfo: ErrorInfo) => void
) {
  const WrappedComponent = (props: P) => (
    <ErrorBoundary fallback={fallback} onError={onError}>
      <Component {...props} />
    </ErrorBoundary>
  );

  WrappedComponent.displayName = `withErrorBoundary(${Component.displayName || Component.name})`;
  
  return WrappedComponent;
}

// Hook for functional components to handle errors
export function useErrorHandler() {
  return React.useCallback((error: Error, errorInfo?: ErrorInfo) => {
    console.error('Error caught by useErrorHandler:', error, errorInfo);
    
    // Log to external service in production
    if (process.env.NODE_ENV === 'production') {
      // TODO: Send to error reporting service
      console.error('Production error:', {
        error: error.message,
        stack: error.stack,
        componentStack: errorInfo?.componentStack
      });
    }
  }, []);
} 
│   │   │   │   │   # --- End: error-boundary.tsx ---

│   │   │   │   │   ├─ form.tsx

│   │   │   │   │   # --- Begin: form.tsx ---
import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { Slot } from "@radix-ui/react-slot"
import {
  Controller,
  ControllerProps,
  FieldPath,
  FieldValues,
  FormProvider,
  useFormContext,
} from "react-hook-form"

import { cn } from "@/lib/utils"
import { Label } from "@/components/ui/label"

const Form = FormProvider

type FormFieldContextValue<
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
> = {
  name: TName
}

const FormFieldContext = React.createContext<FormFieldContextValue>(
  {} as FormFieldContextValue
)

const FormField = <
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
>({
  ...props
}: ControllerProps<TFieldValues, TName>) => {
  return (
    <FormFieldContext.Provider value={{ name: props.name }}>
      <Controller {...props} />
    </FormFieldContext.Provider>
  )
}

const useFormField = () => {
  const fieldContext = React.useContext(FormFieldContext)
  const itemContext = React.useContext(FormItemContext)
  const { getFieldState, formState } = useFormContext()

  const fieldState = getFieldState(fieldContext.name, formState)

  if (!fieldContext) {
    throw new Error("useFormField should be used within <FormField>")
  }

  const { id } = itemContext

  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formDescriptionId: `${id}-form-item-description`,
    formMessageId: `${id}-form-item-message`,
    ...fieldState,
  }
}

type FormItemContextValue = {
  id: string
}

const FormItemContext = React.createContext<FormItemContextValue>(
  {} as FormItemContextValue
)

const FormItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const id = React.useId()

  return (
    <FormItemContext.Provider value={{ id }}>
      <div ref={ref} className={cn("space-y-2", className)} {...props} />
    </FormItemContext.Provider>
  )
})
FormItem.displayName = "FormItem"

const FormLabel = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>
>(({ className, ...props }, ref) => {
  const { error, formItemId } = useFormField()

  return (
    <Label
      ref={ref}
      className={cn(error && "text-destructive", className)}
      htmlFor={formItemId}
      {...props}
    />
  )
})
FormLabel.displayName = "FormLabel"

const FormControl = React.forwardRef<
  React.ElementRef<typeof Slot>,
  React.ComponentPropsWithoutRef<typeof Slot>
>(({ ...props }, ref) => {
  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()

  return (
    <Slot
      ref={ref}
      id={formItemId}
      aria-describedby={
        !error
          ? `${formDescriptionId}`
          : `${formDescriptionId} ${formMessageId}`
      }
      aria-invalid={!!error}
      {...props}
    />
  )
})
FormControl.displayName = "FormControl"

const FormDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => {
  const { formDescriptionId } = useFormField()

  return (
    <p
      ref={ref}
      id={formDescriptionId}
      className={cn("text-sm text-muted-foreground", className)}
      {...props}
    />
  )
})
FormDescription.displayName = "FormDescription"

const FormMessage = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, children, ...props }, ref) => {
  const { error, formMessageId } = useFormField()
  const body = error ? String(error?.message) : children

  if (!body) {
    return null
  }

  return (
    <p
      ref={ref}
      id={formMessageId}
      className={cn("text-sm font-medium text-destructive", className)}
      {...props}
    >
      {body}
    </p>
  )
})
FormMessage.displayName = "FormMessage"

export {
  useFormField,
  Form,
  FormItem,
  FormLabel,
  FormControl,
  FormDescription,
  FormMessage,
  FormField,
}

│   │   │   │   │   # --- End: form.tsx ---

│   │   │   │   │   ├─ hover-card.tsx

│   │   │   │   │   # --- Begin: hover-card.tsx ---
import * as React from "react"
import * as HoverCardPrimitive from "@radix-ui/react-hover-card"

import { cn } from "@/lib/utils"

const HoverCard = HoverCardPrimitive.Root

const HoverCardTrigger = HoverCardPrimitive.Trigger

const HoverCardContent = React.forwardRef<
  React.ElementRef<typeof HoverCardPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <HoverCardPrimitive.Content
    ref={ref}
    align={align}
    sideOffset={sideOffset}
    className={cn(
      "z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
HoverCardContent.displayName = HoverCardPrimitive.Content.displayName

export { HoverCard, HoverCardTrigger, HoverCardContent }

│   │   │   │   │   # --- End: hover-card.tsx ---

│   │   │   │   │   ├─ input-otp.tsx

│   │   │   │   │   # --- Begin: input-otp.tsx ---
import * as React from "react"
import { OTPInput, OTPInputContext } from "input-otp"
import { Dot } from "lucide-react"

import { cn } from "@/lib/utils"

const InputOTP = React.forwardRef<
  React.ElementRef<typeof OTPInput>,
  React.ComponentPropsWithoutRef<typeof OTPInput>
>(({ className, containerClassName, ...props }, ref) => (
  <OTPInput
    ref={ref}
    containerClassName={cn(
      "flex items-center gap-2 has-[:disabled]:opacity-50",
      containerClassName
    )}
    className={cn("disabled:cursor-not-allowed", className)}
    {...props}
  />
))
InputOTP.displayName = "InputOTP"

const InputOTPGroup = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div">
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("flex items-center", className)} {...props} />
))
InputOTPGroup.displayName = "InputOTPGroup"

const InputOTPSlot = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div"> & { index: number }
>(({ index, className, ...props }, ref) => {
  const inputOTPContext = React.useContext(OTPInputContext)
  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]

  return (
    <div
      ref={ref}
      className={cn(
        "relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md",
        isActive && "z-10 ring-2 ring-ring ring-offset-background",
        className
      )}
      {...props}
    >
      {char}
      {hasFakeCaret && (
        <div className="pointer-events-none absolute inset-0 flex items-center justify-center">
          <div className="h-4 w-px animate-caret-blink bg-foreground duration-1000" />
        </div>
      )}
    </div>
  )
})
InputOTPSlot.displayName = "InputOTPSlot"

const InputOTPSeparator = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div">
>(({ ...props }, ref) => (
  <div ref={ref} role="separator" {...props}>
    <Dot />
  </div>
))
InputOTPSeparator.displayName = "InputOTPSeparator"

export { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }

│   │   │   │   │   # --- End: input-otp.tsx ---

│   │   │   │   │   ├─ input.tsx

│   │   │   │   │   # --- Begin: input.tsx ---
import * as React from "react"

import { cn } from "@/lib/utils"

const Input = React.forwardRef<HTMLInputElement, React.ComponentProps<"input">>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = "Input"

export { Input }

│   │   │   │   │   # --- End: input.tsx ---

│   │   │   │   │   ├─ label.tsx

│   │   │   │   │   # --- Begin: label.tsx ---
import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
)

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
    VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants(), className)}
    {...props}
  />
))
Label.displayName = LabelPrimitive.Root.displayName

export { Label }

│   │   │   │   │   # --- End: label.tsx ---

│   │   │   │   │   ├─ menubar.tsx

│   │   │   │   │   # --- Begin: menubar.tsx ---
import * as React from "react"
import * as MenubarPrimitive from "@radix-ui/react-menubar"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const MenubarMenu = MenubarPrimitive.Menu

const MenubarGroup = MenubarPrimitive.Group

const MenubarPortal = MenubarPrimitive.Portal

const MenubarSub = MenubarPrimitive.Sub

const MenubarRadioGroup = MenubarPrimitive.RadioGroup

const Menubar = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Root
    ref={ref}
    className={cn(
      "flex h-10 items-center space-x-1 rounded-md border bg-background p-1",
      className
    )}
    {...props}
  />
))
Menubar.displayName = MenubarPrimitive.Root.displayName

const MenubarTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      className
    )}
    {...props}
  />
))
MenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName

const MenubarSubTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <MenubarPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </MenubarPrimitive.SubTrigger>
))
MenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName

const MenubarSubContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
MenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName

const MenubarContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>
>(
  (
    { className, align = "start", alignOffset = -4, sideOffset = 8, ...props },
    ref
  ) => (
    <MenubarPrimitive.Portal>
      <MenubarPrimitive.Content
        ref={ref}
        align={align}
        alignOffset={alignOffset}
        sideOffset={sideOffset}
        className={cn(
          "z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
          className
        )}
        {...props}
      />
    </MenubarPrimitive.Portal>
  )
)
MenubarContent.displayName = MenubarPrimitive.Content.displayName

const MenubarItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
MenubarItem.displayName = MenubarPrimitive.Item.displayName

const MenubarCheckboxItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <MenubarPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.CheckboxItem>
))
MenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName

const MenubarRadioItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <MenubarPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.RadioItem>
))
MenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName

const MenubarLabel = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
MenubarLabel.displayName = MenubarPrimitive.Label.displayName

const MenubarSeparator = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
MenubarSeparator.displayName = MenubarPrimitive.Separator.displayName

const MenubarShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
MenubarShortcut.displayname = "MenubarShortcut"

export {
  Menubar,
  MenubarMenu,
  MenubarTrigger,
  MenubarContent,
  MenubarItem,
  MenubarSeparator,
  MenubarLabel,
  MenubarCheckboxItem,
  MenubarRadioGroup,
  MenubarRadioItem,
  MenubarPortal,
  MenubarSubContent,
  MenubarSubTrigger,
  MenubarGroup,
  MenubarSub,
  MenubarShortcut,
}

│   │   │   │   │   # --- End: menubar.tsx ---

│   │   │   │   │   ├─ navigation-menu.tsx

│   │   │   │   │   # --- Begin: navigation-menu.tsx ---
import * as React from "react"
import * as NavigationMenuPrimitive from "@radix-ui/react-navigation-menu"
import { cva } from "class-variance-authority"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const NavigationMenu = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Root
    ref={ref}
    className={cn(
      "relative z-10 flex max-w-max flex-1 items-center justify-center",
      className
    )}
    {...props}
  >
    {children}
    <NavigationMenuViewport />
  </NavigationMenuPrimitive.Root>
))
NavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName

const NavigationMenuList = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.List
    ref={ref}
    className={cn(
      "group flex flex-1 list-none items-center justify-center space-x-1",
      className
    )}
    {...props}
  />
))
NavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName

const NavigationMenuItem = NavigationMenuPrimitive.Item

const navigationMenuTriggerStyle = cva(
  "group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50"
)

const NavigationMenuTrigger = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Trigger
    ref={ref}
    className={cn(navigationMenuTriggerStyle(), "group", className)}
    {...props}
  >
    {children}{" "}
    <ChevronDown
      className="relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180"
      aria-hidden="true"
    />
  </NavigationMenuPrimitive.Trigger>
))
NavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName

const NavigationMenuContent = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Content
    ref={ref}
    className={cn(
      "left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto ",
      className
    )}
    {...props}
  />
))
NavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName

const NavigationMenuLink = NavigationMenuPrimitive.Link

const NavigationMenuViewport = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>
>(({ className, ...props }, ref) => (
  <div className={cn("absolute left-0 top-full flex justify-center")}>
    <NavigationMenuPrimitive.Viewport
      className={cn(
        "origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]",
        className
      )}
      ref={ref}
      {...props}
    />
  </div>
))
NavigationMenuViewport.displayName =
  NavigationMenuPrimitive.Viewport.displayName

const NavigationMenuIndicator = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Indicator
    ref={ref}
    className={cn(
      "top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in",
      className
    )}
    {...props}
  >
    <div className="relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md" />
  </NavigationMenuPrimitive.Indicator>
))
NavigationMenuIndicator.displayName =
  NavigationMenuPrimitive.Indicator.displayName

export {
  navigationMenuTriggerStyle,
  NavigationMenu,
  NavigationMenuList,
  NavigationMenuItem,
  NavigationMenuContent,
  NavigationMenuTrigger,
  NavigationMenuLink,
  NavigationMenuIndicator,
  NavigationMenuViewport,
}

│   │   │   │   │   # --- End: navigation-menu.tsx ---

│   │   │   │   │   ├─ pagination.tsx

│   │   │   │   │   # --- Begin: pagination.tsx ---
import * as React from "react"
import { ChevronLeft, ChevronRight, MoreHorizontal } from "lucide-react"

import { cn } from "@/lib/utils"
import { ButtonProps, buttonVariants } from "@/components/ui/button"

const Pagination = ({ className, ...props }: React.ComponentProps<"nav">) => (
  <nav
    role="navigation"
    aria-label="pagination"
    className={cn("mx-auto flex w-full justify-center", className)}
    {...props}
  />
)
Pagination.displayName = "Pagination"

const PaginationContent = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    className={cn("flex flex-row items-center gap-1", className)}
    {...props}
  />
))
PaginationContent.displayName = "PaginationContent"

const PaginationItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ className, ...props }, ref) => (
  <li ref={ref} className={cn("", className)} {...props} />
))
PaginationItem.displayName = "PaginationItem"

type PaginationLinkProps = {
  isActive?: boolean
} & Pick<ButtonProps, "size"> &
  React.ComponentProps<"a">

const PaginationLink = ({
  className,
  isActive,
  size = "icon",
  ...props
}: PaginationLinkProps) => (
  <a
    aria-current={isActive ? "page" : undefined}
    className={cn(
      buttonVariants({
        variant: isActive ? "outline" : "ghost",
        size,
      }),
      className
    )}
    {...props}
  />
)
PaginationLink.displayName = "PaginationLink"

const PaginationPrevious = ({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) => (
  <PaginationLink
    aria-label="Go to previous page"
    size="default"
    className={cn("gap-1 pl-2.5", className)}
    {...props}
  >
    <ChevronLeft className="h-4 w-4" />
    <span>Previous</span>
  </PaginationLink>
)
PaginationPrevious.displayName = "PaginationPrevious"

const PaginationNext = ({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) => (
  <PaginationLink
    aria-label="Go to next page"
    size="default"
    className={cn("gap-1 pr-2.5", className)}
    {...props}
  >
    <span>Next</span>
    <ChevronRight className="h-4 w-4" />
  </PaginationLink>
)
PaginationNext.displayName = "PaginationNext"

const PaginationEllipsis = ({
  className,
  ...props
}: React.ComponentProps<"span">) => (
  <span
    aria-hidden
    className={cn("flex h-9 w-9 items-center justify-center", className)}
    {...props}
  >
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">More pages</span>
  </span>
)
PaginationEllipsis.displayName = "PaginationEllipsis"

export {
  Pagination,
  PaginationContent,
  PaginationEllipsis,
  PaginationItem,
  PaginationLink,
  PaginationNext,
  PaginationPrevious,
}

│   │   │   │   │   # --- End: pagination.tsx ---

│   │   │   │   │   ├─ popover.tsx

│   │   │   │   │   # --- Begin: popover.tsx ---
import * as React from "react"
import * as PopoverPrimitive from "@radix-ui/react-popover"

import { cn } from "@/lib/utils"

const Popover = PopoverPrimitive.Root

const PopoverTrigger = PopoverPrimitive.Trigger

const PopoverContent = React.forwardRef<
  React.ElementRef<typeof PopoverPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <PopoverPrimitive.Portal>
    <PopoverPrimitive.Content
      ref={ref}
      align={align}
      sideOffset={sideOffset}
      className={cn(
        "z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </PopoverPrimitive.Portal>
))
PopoverContent.displayName = PopoverPrimitive.Content.displayName

export { Popover, PopoverTrigger, PopoverContent }

│   │   │   │   │   # --- End: popover.tsx ---

│   │   │   │   │   ├─ progress.tsx

│   │   │   │   │   # --- Begin: progress.tsx ---
import * as React from "react"
import * as ProgressPrimitive from "@radix-ui/react-progress"

import { cn } from "@/lib/utils"

const Progress = React.forwardRef<
  React.ElementRef<typeof ProgressPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>
>(({ className, value, ...props }, ref) => (
  <ProgressPrimitive.Root
    ref={ref}
    className={cn(
      "relative h-4 w-full overflow-hidden rounded-full bg-secondary",
      className
    )}
    {...props}
  >
    <ProgressPrimitive.Indicator
      className="h-full w-full flex-1 bg-primary transition-all"
      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}
    />
  </ProgressPrimitive.Root>
))
Progress.displayName = ProgressPrimitive.Root.displayName

export { Progress }

│   │   │   │   │   # --- End: progress.tsx ---

│   │   │   │   │   ├─ radio-group.tsx

│   │   │   │   │   # --- Begin: radio-group.tsx ---
import * as React from "react"
import * as RadioGroupPrimitive from "@radix-ui/react-radio-group"
import { Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const RadioGroup = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Root
      className={cn("grid gap-2", className)}
      {...props}
      ref={ref}
    />
  )
})
RadioGroup.displayName = RadioGroupPrimitive.Root.displayName

const RadioGroupItem = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Item
      ref={ref}
      className={cn(
        "aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    >
      <RadioGroupPrimitive.Indicator className="flex items-center justify-center">
        <Circle className="h-2.5 w-2.5 fill-current text-current" />
      </RadioGroupPrimitive.Indicator>
    </RadioGroupPrimitive.Item>
  )
})
RadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName

export { RadioGroup, RadioGroupItem }

│   │   │   │   │   # --- End: radio-group.tsx ---

│   │   │   │   │   ├─ resizable.tsx

│   │   │   │   │   # --- Begin: resizable.tsx ---
import { GripVertical } from "lucide-react"
import * as ResizablePrimitive from "react-resizable-panels"

import { cn } from "@/lib/utils"

const ResizablePanelGroup = ({
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (
  <ResizablePrimitive.PanelGroup
    className={cn(
      "flex h-full w-full data-[panel-group-direction=vertical]:flex-col",
      className
    )}
    {...props}
  />
)

const ResizablePanel = ResizablePrimitive.Panel

const ResizableHandle = ({
  withHandle,
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {
  withHandle?: boolean
}) => (
  <ResizablePrimitive.PanelResizeHandle
    className={cn(
      "relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90",
      className
    )}
    {...props}
  >
    {withHandle && (
      <div className="z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border">
        <GripVertical className="h-2.5 w-2.5" />
      </div>
    )}
  </ResizablePrimitive.PanelResizeHandle>
)

export { ResizablePanelGroup, ResizablePanel, ResizableHandle }

│   │   │   │   │   # --- End: resizable.tsx ---

│   │   │   │   │   ├─ scroll-area.tsx

│   │   │   │   │   # --- Begin: scroll-area.tsx ---
import * as React from "react"
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area"

import { cn } from "@/lib/utils"

const ScrollArea = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <ScrollAreaPrimitive.Root
    ref={ref}
    className={cn("relative overflow-hidden", className)}
    {...props}
  >
    <ScrollAreaPrimitive.Viewport className="h-full w-full rounded-[inherit]">
      {children}
    </ScrollAreaPrimitive.Viewport>
    <ScrollBar />
    <ScrollAreaPrimitive.Corner />
  </ScrollAreaPrimitive.Root>
))
ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName

const ScrollBar = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>
>(({ className, orientation = "vertical", ...props }, ref) => (
  <ScrollAreaPrimitive.ScrollAreaScrollbar
    ref={ref}
    orientation={orientation}
    className={cn(
      "flex touch-none select-none transition-colors",
      orientation === "vertical" &&
        "h-full w-2.5 border-l border-l-transparent p-[1px]",
      orientation === "horizontal" &&
        "h-2.5 flex-col border-t border-t-transparent p-[1px]",
      className
    )}
    {...props}
  >
    <ScrollAreaPrimitive.ScrollAreaThumb className="relative flex-1 rounded-full bg-border" />
  </ScrollAreaPrimitive.ScrollAreaScrollbar>
))
ScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName

export { ScrollArea, ScrollBar }

│   │   │   │   │   # --- End: scroll-area.tsx ---

│   │   │   │   │   ├─ select.tsx

│   │   │   │   │   # --- Begin: select.tsx ---
import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { Check, ChevronDown, ChevronUp } from "lucide-react"

import { cn } from "@/lib/utils"

const Select = SelectPrimitive.Root

const SelectGroup = SelectPrimitive.Group

const SelectValue = SelectPrimitive.Value

const SelectTrigger = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1",
      className
    )}
    {...props}
  >
    {children}
    <SelectPrimitive.Icon asChild>
      <ChevronDown className="h-4 w-4 opacity-50" />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
))
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName

const SelectScrollUpButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollUpButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronUp className="h-4 w-4" />
  </SelectPrimitive.ScrollUpButton>
))
SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName

const SelectScrollDownButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollDownButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronDown className="h-4 w-4" />
  </SelectPrimitive.ScrollDownButton>
))
SelectScrollDownButton.displayName =
  SelectPrimitive.ScrollDownButton.displayName

const SelectContent = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
>(({ className, children, position = "popper", ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        "relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        position === "popper" &&
          "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
        className
      )}
      position={position}
      {...props}
    >
      <SelectScrollUpButton />
      <SelectPrimitive.Viewport
        className={cn(
          "p-1",
          position === "popper" &&
            "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]"
        )}
      >
        {children}
      </SelectPrimitive.Viewport>
      <SelectScrollDownButton />
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
))
SelectContent.displayName = SelectPrimitive.Content.displayName

const SelectLabel = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn("py-1.5 pl-8 pr-2 text-sm font-semibold", className)}
    {...props}
  />
))
SelectLabel.displayName = SelectPrimitive.Label.displayName

const SelectItem = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </SelectPrimitive.ItemIndicator>
    </span>

    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
))
SelectItem.displayName = SelectPrimitive.Item.displayName

const SelectSeparator = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
SelectSeparator.displayName = SelectPrimitive.Separator.displayName

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
  SelectScrollUpButton,
  SelectScrollDownButton,
}

│   │   │   │   │   # --- End: select.tsx ---

│   │   │   │   │   ├─ separator.tsx

│   │   │   │   │   # --- Begin: separator.tsx ---
import * as React from "react"
import * as SeparatorPrimitive from "@radix-ui/react-separator"

import { cn } from "@/lib/utils"

const Separator = React.forwardRef<
  React.ElementRef<typeof SeparatorPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>
>(
  (
    { className, orientation = "horizontal", decorative = true, ...props },
    ref
  ) => (
    <SeparatorPrimitive.Root
      ref={ref}
      decorative={decorative}
      orientation={orientation}
      className={cn(
        "shrink-0 bg-border",
        orientation === "horizontal" ? "h-[1px] w-full" : "h-full w-[1px]",
        className
      )}
      {...props}
    />
  )
)
Separator.displayName = SeparatorPrimitive.Root.displayName

export { Separator }

│   │   │   │   │   # --- End: separator.tsx ---

│   │   │   │   │   ├─ severity-badge.tsx

│   │   │   │   │   # --- Begin: severity-badge.tsx ---
import { Badge } from "@/components/ui/badge";
import { cn } from "@/lib/utils";

interface SeverityBadgeProps {
  severity: "CRITICAL" | "HIGH" | "MEDIUM" | "LOW";
  className?: string;
}

export const SeverityBadge = ({ severity, className }: SeverityBadgeProps) => {
  const getSeverityStyles = (severity: string) => {
    switch (severity) {
      case "CRITICAL":
        return "bg-critical text-critical-foreground border-critical";
      case "HIGH":
        return "bg-high text-high-foreground border-high";
      case "MEDIUM":
        return "bg-medium text-medium-foreground border-medium";
      case "LOW":
        return "bg-low text-low-foreground border-low";
      default:
        return "bg-muted text-muted-foreground";
    }
  };

  return (
    <Badge
      variant="outline"
      className={cn(
        "font-medium transition-smooth",
        getSeverityStyles(severity),
        className
      )}
    >
      {severity}
    </Badge>
  );
};
│   │   │   │   │   # --- End: severity-badge.tsx ---

│   │   │   │   │   ├─ sheet.tsx

│   │   │   │   │   # --- Begin: sheet.tsx ---
import * as SheetPrimitive from "@radix-ui/react-dialog"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"
import * as React from "react"

import { cn } from "@/lib/utils"

const Sheet = SheetPrimitive.Root

const SheetTrigger = SheetPrimitive.Trigger

const SheetClose = SheetPrimitive.Close

const SheetPortal = SheetPrimitive.Portal

const SheetOverlay = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
SheetOverlay.displayName = SheetPrimitive.Overlay.displayName

const sheetVariants = cva(
  "fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500",
  {
    variants: {
      side: {
        top: "inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top",
        bottom:
          "inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom",
        left: "inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm",
        right:
          "inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm",
      },
    },
    defaultVariants: {
      side: "right",
    },
  }
)

interface SheetContentProps
  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,
  VariantProps<typeof sheetVariants> { }

const SheetContent = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Content>,
  SheetContentProps
>(({ side = "right", className, children, ...props }, ref) => (
  <SheetPortal>
    <SheetOverlay />
    <SheetPrimitive.Content
      ref={ref}
      className={cn(sheetVariants({ side }), className)}
      {...props}
    >
      {children}
      <SheetPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </SheetPrimitive.Close>
    </SheetPrimitive.Content>
  </SheetPortal>
))
SheetContent.displayName = SheetPrimitive.Content.displayName

const SheetHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
SheetHeader.displayName = "SheetHeader"

const SheetFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
SheetFooter.displayName = "SheetFooter"

const SheetTitle = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold text-foreground", className)}
    {...props}
  />
))
SheetTitle.displayName = SheetPrimitive.Title.displayName

const SheetDescription = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
SheetDescription.displayName = SheetPrimitive.Description.displayName

export {
  Sheet, SheetClose,
  SheetContent, SheetDescription, SheetFooter, SheetHeader, SheetOverlay, SheetPortal, SheetTitle, SheetTrigger
}


│   │   │   │   │   # --- End: sheet.tsx ---

│   │   │   │   │   ├─ sidebar.tsx

│   │   │   │   │   # --- Begin: sidebar.tsx ---
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { VariantProps, cva } from "class-variance-authority"
import { PanelLeft } from "lucide-react"

import { useIsMobile } from "@/hooks/use-mobile"
import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Separator } from "@/components/ui/separator"
import { Sheet, SheetContent } from "@/components/ui/sheet"
import { Skeleton } from "@/components/ui/skeleton"
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip"

const SIDEBAR_COOKIE_NAME = "sidebar:state"
const SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7
const SIDEBAR_WIDTH = "16rem"
const SIDEBAR_WIDTH_MOBILE = "18rem"
const SIDEBAR_WIDTH_ICON = "3rem"
const SIDEBAR_KEYBOARD_SHORTCUT = "b"

type SidebarContext = {
  state: "expanded" | "collapsed"
  open: boolean
  setOpen: (open: boolean) => void
  openMobile: boolean
  setOpenMobile: (open: boolean) => void
  isMobile: boolean
  toggleSidebar: () => void
}

const SidebarContext = React.createContext<SidebarContext | null>(null)

function useSidebar() {
  const context = React.useContext(SidebarContext)
  if (!context) {
    throw new Error("useSidebar must be used within a SidebarProvider.")
  }

  return context
}

const SidebarProvider = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    defaultOpen?: boolean
    open?: boolean
    onOpenChange?: (open: boolean) => void
  }
>(
  (
    {
      defaultOpen = true,
      open: openProp,
      onOpenChange: setOpenProp,
      className,
      style,
      children,
      ...props
    },
    ref
  ) => {
    const isMobile = useIsMobile()
    const [openMobile, setOpenMobile] = React.useState(false)

    // This is the internal state of the sidebar.
    // We use openProp and setOpenProp for control from outside the component.
    const [_open, _setOpen] = React.useState(defaultOpen)
    const open = openProp ?? _open
    const setOpen = React.useCallback(
      (value: boolean | ((value: boolean) => boolean)) => {
        const openState = typeof value === "function" ? value(open) : value
        if (setOpenProp) {
          setOpenProp(openState)
        } else {
          _setOpen(openState)
        }

        // This sets the cookie to keep the sidebar state.
        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`
      },
      [setOpenProp, open]
    )

    // Helper to toggle the sidebar.
    const toggleSidebar = React.useCallback(() => {
      return isMobile
        ? setOpenMobile((open) => !open)
        : setOpen((open) => !open)
    }, [isMobile, setOpen, setOpenMobile])

    // Adds a keyboard shortcut to toggle the sidebar.
    React.useEffect(() => {
      const handleKeyDown = (event: KeyboardEvent) => {
        if (
          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&
          (event.metaKey || event.ctrlKey)
        ) {
          event.preventDefault()
          toggleSidebar()
        }
      }

      window.addEventListener("keydown", handleKeyDown)
      return () => window.removeEventListener("keydown", handleKeyDown)
    }, [toggleSidebar])

    // We add a state so that we can do data-state="expanded" or "collapsed".
    // This makes it easier to style the sidebar with Tailwind classes.
    const state = open ? "expanded" : "collapsed"

    const contextValue = React.useMemo<SidebarContext>(
      () => ({
        state,
        open,
        setOpen,
        isMobile,
        openMobile,
        setOpenMobile,
        toggleSidebar,
      }),
      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]
    )

    return (
      <SidebarContext.Provider value={contextValue}>
        <TooltipProvider delayDuration={0}>
          <div
            style={
              {
                "--sidebar-width": SIDEBAR_WIDTH,
                "--sidebar-width-icon": SIDEBAR_WIDTH_ICON,
                ...style,
              } as React.CSSProperties
            }
            className={cn(
              "group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar",
              className
            )}
            ref={ref}
            {...props}
          >
            {children}
          </div>
        </TooltipProvider>
      </SidebarContext.Provider>
    )
  }
)
SidebarProvider.displayName = "SidebarProvider"

const Sidebar = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    side?: "left" | "right"
    variant?: "sidebar" | "floating" | "inset"
    collapsible?: "offcanvas" | "icon" | "none"
  }
>(
  (
    {
      side = "left",
      variant = "sidebar",
      collapsible = "offcanvas",
      className,
      children,
      ...props
    },
    ref
  ) => {
    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()

    if (collapsible === "none") {
      return (
        <div
          className={cn(
            "flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground",
            className
          )}
          ref={ref}
          {...props}
        >
          {children}
        </div>
      )
    }

    if (isMobile) {
      return (
        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>
          <SheetContent
            data-sidebar="sidebar"
            data-mobile="true"
            className="w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden"
            style={
              {
                "--sidebar-width": SIDEBAR_WIDTH_MOBILE,
              } as React.CSSProperties
            }
            side={side}
          >
            <div className="flex h-full w-full flex-col">{children}</div>
          </SheetContent>
        </Sheet>
      )
    }

    return (
      <div
        ref={ref}
        className="group peer hidden md:block text-sidebar-foreground"
        data-state={state}
        data-collapsible={state === "collapsed" ? collapsible : ""}
        data-variant={variant}
        data-side={side}
      >
        {/* This is what handles the sidebar gap on desktop */}
        <div
          className={cn(
            "duration-200 relative h-svh w-[--sidebar-width] bg-transparent transition-[width] ease-linear",
            "group-data-[collapsible=offcanvas]:w-0",
            "group-data-[side=right]:rotate-180",
            variant === "floating" || variant === "inset"
              ? "group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]"
              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon]"
          )}
        />
        <div
          className={cn(
            "duration-200 fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] ease-linear md:flex",
            side === "left"
              ? "left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]"
              : "right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]",
            // Adjust the padding for floating and inset variants.
            variant === "floating" || variant === "inset"
              ? "p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]"
              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l",
            className
          )}
          {...props}
        >
          <div
            data-sidebar="sidebar"
            className="flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow"
          >
            {children}
          </div>
        </div>
      </div>
    )
  }
)
Sidebar.displayName = "Sidebar"

const SidebarTrigger = React.forwardRef<
  React.ElementRef<typeof Button>,
  React.ComponentProps<typeof Button>
>(({ className, onClick, ...props }, ref) => {
  const { toggleSidebar } = useSidebar()

  return (
    <Button
      ref={ref}
      data-sidebar="trigger"
      variant="ghost"
      size="icon"
      className={cn("h-7 w-7", className)}
      onClick={(event) => {
        onClick?.(event)
        toggleSidebar()
      }}
      {...props}
    >
      <PanelLeft />
      <span className="sr-only">Toggle Sidebar</span>
    </Button>
  )
})
SidebarTrigger.displayName = "SidebarTrigger"

const SidebarRail = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button">
>(({ className, ...props }, ref) => {
  const { toggleSidebar } = useSidebar()

  return (
    <button
      ref={ref}
      data-sidebar="rail"
      aria-label="Toggle Sidebar"
      tabIndex={-1}
      onClick={toggleSidebar}
      title="Toggle Sidebar"
      className={cn(
        "absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex",
        "[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize",
        "[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize",
        "group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar",
        "[[data-side=left][data-collapsible=offcanvas]_&]:-right-2",
        "[[data-side=right][data-collapsible=offcanvas]_&]:-left-2",
        className
      )}
      {...props}
    />
  )
})
SidebarRail.displayName = "SidebarRail"

const SidebarInset = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"main">
>(({ className, ...props }, ref) => {
  return (
    <main
      ref={ref}
      className={cn(
        "relative flex min-h-svh flex-1 flex-col bg-background",
        "peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow",
        className
      )}
      {...props}
    />
  )
})
SidebarInset.displayName = "SidebarInset"

const SidebarInput = React.forwardRef<
  React.ElementRef<typeof Input>,
  React.ComponentProps<typeof Input>
>(({ className, ...props }, ref) => {
  return (
    <Input
      ref={ref}
      data-sidebar="input"
      className={cn(
        "h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring",
        className
      )}
      {...props}
    />
  )
})
SidebarInput.displayName = "SidebarInput"

const SidebarHeader = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="header"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  )
})
SidebarHeader.displayName = "SidebarHeader"

const SidebarFooter = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="footer"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  )
})
SidebarFooter.displayName = "SidebarFooter"

const SidebarSeparator = React.forwardRef<
  React.ElementRef<typeof Separator>,
  React.ComponentProps<typeof Separator>
>(({ className, ...props }, ref) => {
  return (
    <Separator
      ref={ref}
      data-sidebar="separator"
      className={cn("mx-2 w-auto bg-sidebar-border", className)}
      {...props}
    />
  )
})
SidebarSeparator.displayName = "SidebarSeparator"

const SidebarContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="content"
      className={cn(
        "flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarContent.displayName = "SidebarContent"

const SidebarGroup = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="group"
      className={cn("relative flex w-full min-w-0 flex-col p-2", className)}
      {...props}
    />
  )
})
SidebarGroup.displayName = "SidebarGroup"

const SidebarGroupLabel = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & { asChild?: boolean }
>(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "div"

  return (
    <Comp
      ref={ref}
      data-sidebar="group-label"
      className={cn(
        "duration-200 flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        "group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0",
        className
      )}
      {...props}
    />
  )
})
SidebarGroupLabel.displayName = "SidebarGroupLabel"

const SidebarGroupAction = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & { asChild?: boolean }
>(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      ref={ref}
      data-sidebar="group-action"
      className={cn(
        "absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarGroupAction.displayName = "SidebarGroupAction"

const SidebarGroupContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="group-content"
    className={cn("w-full text-sm", className)}
    {...props}
  />
))
SidebarGroupContent.displayName = "SidebarGroupContent"

const SidebarMenu = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu"
    className={cn("flex w-full min-w-0 flex-col gap-1", className)}
    {...props}
  />
))
SidebarMenu.displayName = "SidebarMenu"

const SidebarMenuItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ className, ...props }, ref) => (
  <li
    ref={ref}
    data-sidebar="menu-item"
    className={cn("group/menu-item relative", className)}
    {...props}
  />
))
SidebarMenuItem.displayName = "SidebarMenuItem"

const sidebarMenuButtonVariants = cva(
  "peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "hover:bg-sidebar-accent hover:text-sidebar-accent-foreground",
        outline:
          "bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]",
      },
      size: {
        default: "h-8 text-sm",
        sm: "h-7 text-xs",
        lg: "h-12 text-sm group-data-[collapsible=icon]:!p-0",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const SidebarMenuButton = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean
    isActive?: boolean
    tooltip?: string | React.ComponentProps<typeof TooltipContent>
  } & VariantProps<typeof sidebarMenuButtonVariants>
>(
  (
    {
      asChild = false,
      isActive = false,
      variant = "default",
      size = "default",
      tooltip,
      className,
      ...props
    },
    ref
  ) => {
    const Comp = asChild ? Slot : "button"
    const { isMobile, state } = useSidebar()

    const button = (
      <Comp
        ref={ref}
        data-sidebar="menu-button"
        data-size={size}
        data-active={isActive}
        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}
        {...props}
      />
    )

    if (!tooltip) {
      return button
    }

    if (typeof tooltip === "string") {
      tooltip = {
        children: tooltip,
      }
    }

    return (
      <Tooltip>
        <TooltipTrigger asChild>{button}</TooltipTrigger>
        <TooltipContent
          side="right"
          align="center"
          hidden={state !== "collapsed" || isMobile}
          {...tooltip}
        />
      </Tooltip>
    )
  }
)
SidebarMenuButton.displayName = "SidebarMenuButton"

const SidebarMenuAction = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean
    showOnHover?: boolean
  }
>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-action"
      className={cn(
        "absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "peer-data-[size=sm]/menu-button:top-1",
        "peer-data-[size=default]/menu-button:top-1.5",
        "peer-data-[size=lg]/menu-button:top-2.5",
        "group-data-[collapsible=icon]:hidden",
        showOnHover &&
          "group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0",
        className
      )}
      {...props}
    />
  )
})
SidebarMenuAction.displayName = "SidebarMenuAction"

const SidebarMenuBadge = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="menu-badge"
    className={cn(
      "absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground select-none pointer-events-none",
      "peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground",
      "peer-data-[size=sm]/menu-button:top-1",
      "peer-data-[size=default]/menu-button:top-1.5",
      "peer-data-[size=lg]/menu-button:top-2.5",
      "group-data-[collapsible=icon]:hidden",
      className
    )}
    {...props}
  />
))
SidebarMenuBadge.displayName = "SidebarMenuBadge"

const SidebarMenuSkeleton = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    showIcon?: boolean
  }
>(({ className, showIcon = false, ...props }, ref) => {
  // Random width between 50 to 90%.
  const width = React.useMemo(() => {
    return `${Math.floor(Math.random() * 40) + 50}%`
  }, [])

  return (
    <div
      ref={ref}
      data-sidebar="menu-skeleton"
      className={cn("rounded-md h-8 flex gap-2 px-2 items-center", className)}
      {...props}
    >
      {showIcon && (
        <Skeleton
          className="size-4 rounded-md"
          data-sidebar="menu-skeleton-icon"
        />
      )}
      <Skeleton
        className="h-4 flex-1 max-w-[--skeleton-width]"
        data-sidebar="menu-skeleton-text"
        style={
          {
            "--skeleton-width": width,
          } as React.CSSProperties
        }
      />
    </div>
  )
})
SidebarMenuSkeleton.displayName = "SidebarMenuSkeleton"

const SidebarMenuSub = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu-sub"
    className={cn(
      "mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5",
      "group-data-[collapsible=icon]:hidden",
      className
    )}
    {...props}
  />
))
SidebarMenuSub.displayName = "SidebarMenuSub"

const SidebarMenuSubItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ ...props }, ref) => <li ref={ref} {...props} />)
SidebarMenuSubItem.displayName = "SidebarMenuSubItem"

const SidebarMenuSubButton = React.forwardRef<
  HTMLAnchorElement,
  React.ComponentProps<"a"> & {
    asChild?: boolean
    size?: "sm" | "md"
    isActive?: boolean
  }
>(({ asChild = false, size = "md", isActive, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a"

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-sub-button"
      data-size={size}
      data-active={isActive}
      className={cn(
        "flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground",
        "data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground",
        size === "sm" && "text-xs",
        size === "md" && "text-sm",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarMenuSubButton.displayName = "SidebarMenuSubButton"

export {
  Sidebar,
  SidebarContent,
  SidebarFooter,
  SidebarGroup,
  SidebarGroupAction,
  SidebarGroupContent,
  SidebarGroupLabel,
  SidebarHeader,
  SidebarInput,
  SidebarInset,
  SidebarMenu,
  SidebarMenuAction,
  SidebarMenuBadge,
  SidebarMenuButton,
  SidebarMenuItem,
  SidebarMenuSkeleton,
  SidebarMenuSub,
  SidebarMenuSubButton,
  SidebarMenuSubItem,
  SidebarProvider,
  SidebarRail,
  SidebarSeparator,
  SidebarTrigger,
  useSidebar,
}

│   │   │   │   │   # --- End: sidebar.tsx ---

│   │   │   │   │   ├─ skeleton.tsx

│   │   │   │   │   # --- Begin: skeleton.tsx ---
import { cn } from "@/lib/utils"

function Skeleton({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) {
  return (
    <div
      className={cn("animate-pulse rounded-md bg-muted", className)}
      {...props}
    />
  )
}

export { Skeleton }

│   │   │   │   │   # --- End: skeleton.tsx ---

│   │   │   │   │   ├─ slider.tsx

│   │   │   │   │   # --- Begin: slider.tsx ---
import * as React from "react"
import * as SliderPrimitive from "@radix-ui/react-slider"

import { cn } from "@/lib/utils"

const Slider = React.forwardRef<
  React.ElementRef<typeof SliderPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>
>(({ className, ...props }, ref) => (
  <SliderPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex w-full touch-none select-none items-center",
      className
    )}
    {...props}
  >
    <SliderPrimitive.Track className="relative h-2 w-full grow overflow-hidden rounded-full bg-secondary">
      <SliderPrimitive.Range className="absolute h-full bg-primary" />
    </SliderPrimitive.Track>
    <SliderPrimitive.Thumb className="block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50" />
  </SliderPrimitive.Root>
))
Slider.displayName = SliderPrimitive.Root.displayName

export { Slider }

│   │   │   │   │   # --- End: slider.tsx ---

│   │   │   │   │   ├─ sonner.tsx

│   │   │   │   │   # --- Begin: sonner.tsx ---
import { useTheme } from "next-themes"
import { Toaster as Sonner, toast } from "sonner"

type ToasterProps = React.ComponentProps<typeof Sonner>

const Toaster = ({ ...props }: ToasterProps) => {
  const { theme = "system" } = useTheme()

  return (
    <Sonner
      theme={theme as ToasterProps["theme"]}
      className="toaster group"
      toastOptions={{
        classNames: {
          toast:
            "group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg",
          description: "group-[.toast]:text-muted-foreground",
          actionButton:
            "group-[.toast]:bg-primary group-[.toast]:text-primary-foreground",
          cancelButton:
            "group-[.toast]:bg-muted group-[.toast]:text-muted-foreground",
        },
      }}
      {...props}
    />
  )
}

export { Toaster, toast }

│   │   │   │   │   # --- End: sonner.tsx ---

│   │   │   │   │   ├─ switch.tsx

│   │   │   │   │   # --- Begin: switch.tsx ---
import * as React from "react"
import * as SwitchPrimitives from "@radix-ui/react-switch"

import { cn } from "@/lib/utils"

const Switch = React.forwardRef<
  React.ElementRef<typeof SwitchPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>
>(({ className, ...props }, ref) => (
  <SwitchPrimitives.Root
    className={cn(
      "peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input",
      className
    )}
    {...props}
    ref={ref}
  >
    <SwitchPrimitives.Thumb
      className={cn(
        "pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0"
      )}
    />
  </SwitchPrimitives.Root>
))
Switch.displayName = SwitchPrimitives.Root.displayName

export { Switch }

│   │   │   │   │   # --- End: switch.tsx ---

│   │   │   │   │   ├─ table.tsx

│   │   │   │   │   # --- Begin: table.tsx ---
import * as React from "react"

import { cn } from "@/lib/utils"

const Table = React.forwardRef<
  HTMLTableElement,
  React.HTMLAttributes<HTMLTableElement>
>(({ className, ...props }, ref) => (
  <div className="relative w-full overflow-auto">
    <table
      ref={ref}
      className={cn("w-full caption-bottom text-sm", className)}
      {...props}
    />
  </div>
))
Table.displayName = "Table"

const TableHeader = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <thead ref={ref} className={cn("[&_tr]:border-b", className)} {...props} />
))
TableHeader.displayName = "TableHeader"

const TableBody = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tbody
    ref={ref}
    className={cn("[&_tr:last-child]:border-0", className)}
    {...props}
  />
))
TableBody.displayName = "TableBody"

const TableFooter = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tfoot
    ref={ref}
    className={cn(
      "border-t bg-muted/50 font-medium [&>tr]:last:border-b-0",
      className
    )}
    {...props}
  />
))
TableFooter.displayName = "TableFooter"

const TableRow = React.forwardRef<
  HTMLTableRowElement,
  React.HTMLAttributes<HTMLTableRowElement>
>(({ className, ...props }, ref) => (
  <tr
    ref={ref}
    className={cn(
      "border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted",
      className
    )}
    {...props}
  />
))
TableRow.displayName = "TableRow"

const TableHead = React.forwardRef<
  HTMLTableCellElement,
  React.ThHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <th
    ref={ref}
    className={cn(
      "h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0",
      className
    )}
    {...props}
  />
))
TableHead.displayName = "TableHead"

const TableCell = React.forwardRef<
  HTMLTableCellElement,
  React.TdHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <td
    ref={ref}
    className={cn("p-4 align-middle [&:has([role=checkbox])]:pr-0", className)}
    {...props}
  />
))
TableCell.displayName = "TableCell"

const TableCaption = React.forwardRef<
  HTMLTableCaptionElement,
  React.HTMLAttributes<HTMLTableCaptionElement>
>(({ className, ...props }, ref) => (
  <caption
    ref={ref}
    className={cn("mt-4 text-sm text-muted-foreground", className)}
    {...props}
  />
))
TableCaption.displayName = "TableCaption"

export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
  TableCaption,
}

│   │   │   │   │   # --- End: table.tsx ---

│   │   │   │   │   ├─ tabs.tsx

│   │   │   │   │   # --- Begin: tabs.tsx ---
import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"

import { cn } from "@/lib/utils"

const Tabs = TabsPrimitive.Root

const TabsList = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.List
    ref={ref}
    className={cn(
      "inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground",
      className
    )}
    {...props}
  />
))
TabsList.displayName = TabsPrimitive.List.displayName

const TabsTrigger = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      "inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm",
      className
    )}
    {...props}
  />
))
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName

const TabsContent = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={cn(
      "mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
      className
    )}
    {...props}
  />
))
TabsContent.displayName = TabsPrimitive.Content.displayName

export { Tabs, TabsList, TabsTrigger, TabsContent }

│   │   │   │   │   # --- End: tabs.tsx ---

│   │   │   │   │   ├─ textarea.tsx

│   │   │   │   │   # --- Begin: textarea.tsx ---
import * as React from "react"

import { cn } from "@/lib/utils"

export interface TextareaProps
  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}

const Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(
  ({ className, ...props }, ref) => {
    return (
      <textarea
        className={cn(
          "flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Textarea.displayName = "Textarea"

export { Textarea }

│   │   │   │   │   # --- End: textarea.tsx ---

│   │   │   │   │   ├─ toast.tsx

│   │   │   │   │   # --- Begin: toast.tsx ---
import * as React from "react"
import * as ToastPrimitives from "@radix-ui/react-toast"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const ToastProvider = ToastPrimitives.Provider

const ToastViewport = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Viewport>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Viewport
    ref={ref}
    className={cn(
      "fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]",
      className
    )}
    {...props}
  />
))
ToastViewport.displayName = ToastPrimitives.Viewport.displayName

const toastVariants = cva(
  "group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full",
  {
    variants: {
      variant: {
        default: "border bg-background text-foreground",
        destructive:
          "destructive group border-destructive bg-destructive text-destructive-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Toast = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &
    VariantProps<typeof toastVariants>
>(({ className, variant, ...props }, ref) => {
  return (
    <ToastPrimitives.Root
      ref={ref}
      className={cn(toastVariants({ variant }), className)}
      {...props}
    />
  )
})
Toast.displayName = ToastPrimitives.Root.displayName

const ToastAction = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Action>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Action
    ref={ref}
    className={cn(
      "inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive",
      className
    )}
    {...props}
  />
))
ToastAction.displayName = ToastPrimitives.Action.displayName

const ToastClose = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Close>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Close
    ref={ref}
    className={cn(
      "absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600",
      className
    )}
    toast-close=""
    {...props}
  >
    <X className="h-4 w-4" />
  </ToastPrimitives.Close>
))
ToastClose.displayName = ToastPrimitives.Close.displayName

const ToastTitle = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Title>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Title
    ref={ref}
    className={cn("text-sm font-semibold", className)}
    {...props}
  />
))
ToastTitle.displayName = ToastPrimitives.Title.displayName

const ToastDescription = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Description>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Description
    ref={ref}
    className={cn("text-sm opacity-90", className)}
    {...props}
  />
))
ToastDescription.displayName = ToastPrimitives.Description.displayName

type ToastProps = React.ComponentPropsWithoutRef<typeof Toast>

type ToastActionElement = React.ReactElement<typeof ToastAction>

export {
  type ToastProps,
  type ToastActionElement,
  ToastProvider,
  ToastViewport,
  Toast,
  ToastTitle,
  ToastDescription,
  ToastClose,
  ToastAction,
}

│   │   │   │   │   # --- End: toast.tsx ---

│   │   │   │   │   ├─ toaster.tsx

│   │   │   │   │   # --- Begin: toaster.tsx ---
import { useToast } from "@/hooks/use-toast"
import {
  Toast,
  ToastClose,
  ToastDescription,
  ToastProvider,
  ToastTitle,
  ToastViewport,
} from "@/components/ui/toast"

export function Toaster() {
  const { toasts } = useToast()

  return (
    <ToastProvider>
      {toasts.map(function ({ id, title, description, action, ...props }) {
        return (
          <Toast key={id} {...props}>
            <div className="grid gap-1">
              {title && <ToastTitle>{title}</ToastTitle>}
              {description && (
                <ToastDescription>{description}</ToastDescription>
              )}
            </div>
            {action}
            <ToastClose />
          </Toast>
        )
      })}
      <ToastViewport />
    </ToastProvider>
  )
}

│   │   │   │   │   # --- End: toaster.tsx ---

│   │   │   │   │   ├─ toggle-group.tsx

│   │   │   │   │   # --- Begin: toggle-group.tsx ---
import * as React from "react"
import * as ToggleGroupPrimitive from "@radix-ui/react-toggle-group"
import { type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"
import { toggleVariants } from "@/components/ui/toggle"

const ToggleGroupContext = React.createContext<
  VariantProps<typeof toggleVariants>
>({
  size: "default",
  variant: "default",
})

const ToggleGroup = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &
    VariantProps<typeof toggleVariants>
>(({ className, variant, size, children, ...props }, ref) => (
  <ToggleGroupPrimitive.Root
    ref={ref}
    className={cn("flex items-center justify-center gap-1", className)}
    {...props}
  >
    <ToggleGroupContext.Provider value={{ variant, size }}>
      {children}
    </ToggleGroupContext.Provider>
  </ToggleGroupPrimitive.Root>
))

ToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName

const ToggleGroupItem = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &
    VariantProps<typeof toggleVariants>
>(({ className, children, variant, size, ...props }, ref) => {
  const context = React.useContext(ToggleGroupContext)

  return (
    <ToggleGroupPrimitive.Item
      ref={ref}
      className={cn(
        toggleVariants({
          variant: context.variant || variant,
          size: context.size || size,
        }),
        className
      )}
      {...props}
    >
      {children}
    </ToggleGroupPrimitive.Item>
  )
})

ToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName

export { ToggleGroup, ToggleGroupItem }

│   │   │   │   │   # --- End: toggle-group.tsx ---

│   │   │   │   │   ├─ toggle.tsx

│   │   │   │   │   # --- Begin: toggle.tsx ---
import * as React from "react"
import * as TogglePrimitive from "@radix-ui/react-toggle"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const toggleVariants = cva(
  "inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground",
  {
    variants: {
      variant: {
        default: "bg-transparent",
        outline:
          "border border-input bg-transparent hover:bg-accent hover:text-accent-foreground",
      },
      size: {
        default: "h-10 px-3",
        sm: "h-9 px-2.5",
        lg: "h-11 px-5",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const Toggle = React.forwardRef<
  React.ElementRef<typeof TogglePrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &
    VariantProps<typeof toggleVariants>
>(({ className, variant, size, ...props }, ref) => (
  <TogglePrimitive.Root
    ref={ref}
    className={cn(toggleVariants({ variant, size, className }))}
    {...props}
  />
))

Toggle.displayName = TogglePrimitive.Root.displayName

export { Toggle, toggleVariants }

│   │   │   │   │   # --- End: toggle.tsx ---

│   │   │   │   │   ├─ tooltip.tsx

│   │   │   │   │   # --- Begin: tooltip.tsx ---
import * as React from "react"
import * as TooltipPrimitive from "@radix-ui/react-tooltip"

import { cn } from "@/lib/utils"

const TooltipProvider = TooltipPrimitive.Provider

const Tooltip = TooltipPrimitive.Root

const TooltipTrigger = TooltipPrimitive.Trigger

const TooltipContent = React.forwardRef<
  React.ElementRef<typeof TooltipPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <TooltipPrimitive.Content
    ref={ref}
    sideOffset={sideOffset}
    className={cn(
      "z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
TooltipContent.displayName = TooltipPrimitive.Content.displayName

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }

│   │   │   │   │   # --- End: tooltip.tsx ---

│   │   │   │   │   ├─ use-toast.ts

│   │   │   │   │   # --- Begin: use-toast.ts ---
import { useToast, toast } from "@/hooks/use-toast";

export { useToast, toast };

│   │   │   │   │   # --- End: use-toast.ts ---

│   │   │   ├─ hooks/
│   │   │   │   ├─ use-api.ts

│   │   │   │   # --- Begin: use-api.ts ---
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { apiClient } from '@/lib/api-client';
import { toast } from 'sonner';
import type {
  User,
  Project,
  CreateProjectData,
  UpdateProfileData,
  ScanResult,
  ScanHistory,
  NotificationResponse,
  NotificationParams,
  AlertConfig,
  LoginData,
  RegisterData,
  Collaborator
} from '@/types';

// Query Keys
export const queryKeys = {
  user: ['user'] as const,
  projects: ['projects'] as const,
  project: (id: number) => ['project', id] as const,
  scanResults: (projectId: number) => ['scan', projectId] as const,
  scanHistory: (projectId: number) => ['scanHistory', projectId] as const,
  notifications: (params?: NotificationParams) => ['notifications', params] as const,
  unreadCount: ['unreadCount'] as const,
  admin: {
    users: ['admin', 'users'] as const,
    projects: ['admin', 'projects'] as const,
    logs: ['admin', 'logs'] as const,
  },
} as const;

// Authentication Hooks
export const useLogin = () => {
  const queryClient = useQueryClient();
  
  return useMutation({
    mutationFn: (credentials: LoginData) => apiClient.login(credentials),
    onSuccess: (data) => {
      localStorage.setItem('token', data.token);
      queryClient.setQueryData(queryKeys.user, data.user);
      toast.success('Login successful');
    },
    onError: (error: any) => {
      toast.error(error.message || 'Login failed');
    },
  });
};

export const useRegister = () => {
  const queryClient = useQueryClient();
  
  return useMutation({
    mutationFn: (userData: RegisterData) => apiClient.register(userData),
    onSuccess: (data) => {
      localStorage.setItem('token', data.token);
      queryClient.setQueryData(queryKeys.user, data.user);
      toast.success('Registration successful');
    },
    onError: (error: any) => {
      toast.error(error.message || 'Registration failed');
    },
  });
};

export const useLogout = () => {
  const queryClient = useQueryClient();
  
  return useMutation({
    mutationFn: () => apiClient.logout(),
    onSuccess: () => {
      localStorage.removeItem('token');
      queryClient.clear();
      toast.success('Logged out successfully');
    },
    onError: (error: any) => {
      toast.error(error.message || 'Logout failed');
    },
  });
};

export const useForgotPassword = () => {
  return useMutation({
    mutationFn: (email: string) => apiClient.forgotPassword(email),
    onSuccess: () => {
      toast.success('Password reset email sent');
    },
    onError: (error: any) => {
      toast.error(error.message || 'Failed to send reset email');
    },
  });
};

// User Hooks
export const useUser = () => {
  return useQuery({
    queryKey: queryKeys.user,
    queryFn: () => apiClient.getProfile(),
    staleTime: 5 * 60 * 1000, // 5 minutes
    retry: 1,
  });
};

export const useUpdateProfile = () => {
  const queryClient = useQueryClient();
  
  return useMutation({
    mutationFn: (data: UpdateProfileData) => apiClient.updateProfile(data),
    onSuccess: (updatedUser) => {
      queryClient.setQueryData(queryKeys.user, updatedUser);
      toast.success('Profile updated successfully');
    },
    onError: (error: any) => {
      toast.error(error.message || 'Failed to update profile');
    },
  });
};

// Project Hooks
export const useProjects = () => {
  return useQuery({
    queryKey: queryKeys.projects,
    queryFn: () => apiClient.getProjects(),
    staleTime: 2 * 60 * 1000, // 2 minutes
  });
};

export const useProject = (id: number) => {
  return useQuery({
    queryKey: queryKeys.project(id),
    queryFn: () => apiClient.getProject(id),
    enabled: !!id,
    staleTime: 2 * 60 * 1000, // 2 minutes
  });
};

export const useCreateProject = () => {
  const queryClient = useQueryClient();
  
  return useMutation({
    mutationFn: (data: CreateProjectData) => apiClient.createProject(data),
    onSuccess: (newProject) => {
      queryClient.setQueryData(queryKeys.projects, (old: Project[] = []) => [...old, newProject]);
      toast.success('Project created successfully');
    },
    onError: (error: any) => {
      toast.error(error.message || 'Failed to create project');
    },
  });
};

export const useAddCollaborator = () => {
  const queryClient = useQueryClient();
  
  return useMutation({
    mutationFn: ({ projectId, email }: { projectId: number; email: string }) =>
      apiClient.addCollaborator(projectId, email),
    onSuccess: (collaborator, { projectId }) => {
      queryClient.invalidateQueries({ queryKey: queryKeys.project(projectId) });
      toast.success('Collaborator added successfully');
    },
    onError: (error: any) => {
      toast.error(error.message || 'Failed to add collaborator');
    },
  });
};

export const useExportProject = () => {
  return useMutation({
    mutationFn: ({ id, format }: { id: number; format: 'pdf' | 'csv' }) =>
      apiClient.exportProject(id, format),
    onSuccess: (blob, { id, format }) => {
      const url = window.URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `project-${id}-report.${format}`;
      document.body.appendChild(a);
      a.click();
      window.URL.revokeObjectURL(url);
      document.body.removeChild(a);
      toast.success('Report exported successfully');
    },
    onError: (error: any) => {
      toast.error(error.message || 'Failed to export report');
    },
  });
};

// Scanning Hooks
export const useUploadAndScan = () => {
  const queryClient = useQueryClient();
  
  return useMutation({
    mutationFn: ({ file, projectId }: { file: File; projectId: number }) =>
      apiClient.uploadAndScan(file, projectId),
    onSuccess: (result, { projectId }) => {
      queryClient.invalidateQueries({ queryKey: queryKeys.scanResults(projectId) });
      queryClient.invalidateQueries({ queryKey: queryKeys.scanHistory(projectId) });
      queryClient.invalidateQueries({ queryKey: queryKeys.project(projectId) });
      toast.success('Scan completed successfully');
    },
    onError: (error: any) => {
      toast.error(error.message || 'Scan failed');
    },
  });
};

export const useScanResults = (projectId: number) => {
  return useQuery({
    queryKey: queryKeys.scanResults(projectId),
    queryFn: () => apiClient.getScanResults(projectId),
    enabled: !!projectId,
    staleTime: 1 * 60 * 1000, // 1 minute
  });
};

export const useScanHistory = (projectId: number) => {
  return useQuery({
    queryKey: queryKeys.scanHistory(projectId),
    queryFn: () => apiClient.getScanHistory(projectId),
    enabled: !!projectId,
    staleTime: 5 * 60 * 1000, // 5 minutes
  });
};

// Notification Hooks
export const useNotifications = (params: NotificationParams = {}) => {
  return useQuery({
    queryKey: queryKeys.notifications(params),
    queryFn: () => apiClient.getNotifications(params),
    staleTime: 30 * 1000, // 30 seconds
  });
};

export const useUnreadCount = () => {
  return useQuery({
    queryKey: queryKeys.unreadCount,
    queryFn: () => apiClient.getUnreadCount(),
    staleTime: 30 * 1000, // 30 seconds
    refetchInterval: 30 * 1000, // Refetch every 30 seconds
  });
};

export const useMarkAsRead = () => {
  const queryClient = useQueryClient();
  
  return useMutation({
    mutationFn: (notificationId: number) => apiClient.markAsRead(notificationId),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: queryKeys.notifications() });
      queryClient.invalidateQueries({ queryKey: queryKeys.unreadCount });
    },
  });
};

export const useMarkAllAsRead = () => {
  const queryClient = useQueryClient();
  
  return useMutation({
    mutationFn: () => apiClient.markAllAsRead(),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: queryKeys.notifications() });
      queryClient.invalidateQueries({ queryKey: queryKeys.unreadCount });
      toast.success('All notifications marked as read');
    },
    onError: (error: any) => {
      toast.error(error.message || 'Failed to mark notifications as read');
    },
  });
};

export const useCreateTestNotification = () => {
  const queryClient = useQueryClient();
  
  return useMutation({
    mutationFn: ({ message, type }: { message: string; type: string }) =>
      apiClient.createTestNotification(message, type),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: queryKeys.notifications() });
      queryClient.invalidateQueries({ queryKey: queryKeys.unreadCount });
      toast.success('Test notification created');
    },
    onError: (error: any) => {
      toast.error(error.message || 'Failed to create test notification');
    },
  });
};

// Alert Hooks
export const useSetAlertConfig = () => {
  const queryClient = useQueryClient();
  
  return useMutation({
    mutationFn: (config: AlertConfig) => apiClient.setAlertConfig(config),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: queryKeys.user });
      toast.success('Alert configuration updated');
    },
    onError: (error: any) => {
      toast.error(error.message || 'Failed to update alert configuration');
    },
  });
};

export const useSendTestAlert = () => {
  return useMutation({
    mutationFn: () => apiClient.sendTestAlert(),
    onSuccess: () => {
      toast.success('Test alert sent successfully');
    },
    onError: (error: any) => {
      toast.error(error.message || 'Failed to send test alert');
    },
  });
};

// Admin Hooks
export const useAdminUsers = () => {
  return useQuery({
    queryKey: queryKeys.admin.users,
    queryFn: () => apiClient.getUsers(),
    staleTime: 5 * 60 * 1000, // 5 minutes
  });
};

export const useAdminProjects = () => {
  return useQuery({
    queryKey: queryKeys.admin.projects,
    queryFn: () => apiClient.getAdminProjects(),
    staleTime: 5 * 60 * 1000, // 5 minutes
  });
};

export const useAdminLogs = () => {
  return useQuery({
    queryKey: queryKeys.admin.logs,
    queryFn: () => apiClient.getAuditLogs(),
    staleTime: 2 * 60 * 1000, // 2 minutes
  });
};

// Health Check Hook
export const useHealthCheck = () => {
  return useQuery({
    queryKey: ['health'],
    queryFn: () => apiClient.healthCheck(),
    staleTime: 30 * 1000, // 30 seconds
    refetchInterval: 60 * 1000, // Refetch every minute
  });
}; 
│   │   │   │   # --- End: use-api.ts ---

│   │   │   │   ├─ use-auth.tsx

│   │   │   │   # --- Begin: use-auth.tsx ---
import { createContext, useContext, useEffect, useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { useUser, useLogin, useRegister, useLogout } from './use-api';
import type { User } from '@/types';

interface AuthContextType {
  user: User | null;
  loading: boolean;
  login: (email: string, password: string) => Promise<boolean>;
  register: (email: string, password: string, name: string) => Promise<boolean>;
  logout: () => void;
  isAuthenticated: boolean;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

export const AuthProvider = ({ children }: { children: React.ReactNode }) => {
  const [user, setUser] = useState<User | null>(null);
  const [loading, setLoading] = useState(true);
  const navigate = useNavigate();

  // React Query hooks
  const { data: userData, isLoading: userLoading, error: userError } = useUser();
  const loginMutation = useLogin();
  const registerMutation = useRegister();
  const logoutMutation = useLogout();

  // Check for existing token on mount
  useEffect(() => {
    const token = localStorage.getItem('token');
    if (!token) {
      setLoading(false);
      return;
    }

    // User data will be fetched automatically by React Query
    if (userData) {
      setUser(userData);
    }
    
    if (!userLoading) {
      setLoading(false);
    }
  }, [userData, userLoading]);

  // Update user state when userData changes
  useEffect(() => {
    if (userData) {
      setUser(userData);
    } else if (userError) {
      // Token is invalid, clear it
      localStorage.removeItem('token');
      setUser(null);
    }
  }, [userData, userError]);

  const login = async (email: string, password: string): Promise<boolean> => {
    try {
      await loginMutation.mutateAsync({ email, password });
      return true;
    } catch (error) {
      return false;
    }
  };

  const register = async (email: string, password: string, name: string): Promise<boolean> => {
    try {
      await registerMutation.mutateAsync({ email, password, name });
      return true;
    } catch (error) {
      return false;
    }
  };

  const logout = () => {
    logoutMutation.mutate();
    setUser(null);
    navigate('/login');
  };

  const value: AuthContextType = {
    user,
    loading: loading || userLoading,
    login,
    register,
    logout,
    isAuthenticated: !!user,
  };

  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;
};

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};
│   │   │   │   # --- End: use-auth.tsx ---

│   │   │   │   ├─ use-mobile.tsx

│   │   │   │   # --- Begin: use-mobile.tsx ---
import * as React from "react"

const MOBILE_BREAKPOINT = 768

export function useIsMobile() {
  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)

  React.useEffect(() => {
    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)
    const onChange = () => {
      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    }
    mql.addEventListener("change", onChange)
    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    return () => mql.removeEventListener("change", onChange)
  }, [])

  return !!isMobile
}

│   │   │   │   # --- End: use-mobile.tsx ---

│   │   │   │   ├─ use-notifications-realtime.ts

│   │   │   │   # --- Begin: use-notifications-realtime.ts ---
import { useState, useEffect, useRef } from 'react';
import { apiClient } from '@/lib/api-client';
import { useQueryClient } from '@tanstack/react-query';
import { toast } from 'sonner';
import type { Notification, SSEEvent } from '@/types';
import { queryKeys } from './use-api';

export const useNotificationsRealtime = () => {
  const [notifications, setNotifications] = useState<Notification[]>([]);
  const [unreadCount, setUnreadCount] = useState(0);
  const [isConnected, setIsConnected] = useState(false);
  const eventSourceRef = useRef<EventSource | null>(null);
  const queryClient = useQueryClient();

  useEffect(() => {
    const token = localStorage.getItem('token');
    if (!token) return;

    const connectSSE = () => {
      try {
        // Create SSE connection with token as query param
        const url = `${import.meta.env.VITE_API_URL || 'http://localhost:5000/api'}/notifications/stream${token ? `?token=${encodeURIComponent(token)}` : ''}`;
        const eventSource = new EventSource(url);

        eventSourceRef.current = eventSource;

        eventSource.onopen = () => {
          setIsConnected(true);
          console.log('SSE connection established');
        };

        eventSource.onmessage = (event) => {
          try {
            const data: SSEEvent = JSON.parse(event.data);
            
            switch (data.type) {
              case 'connected':
                console.log('SSE connected:', data.message);
                break;
                
              case 'new_notification':
                if (data.notification) {
                  setNotifications(prev => [data.notification!, ...prev]);
                  setUnreadCount(prev => prev + 1);
                  
                  // Show toast notification
                  toast(data.notification.message, {
                    description: `Type: ${data.notification.type}`,
                    action: {
                      label: 'View',
                      onClick: () => {
                        // Navigate to notifications page or open notification
                        window.location.href = '/notifications';
                      }
                    }
                  });
                  
                  // Invalidate queries to refresh data
                  queryClient.invalidateQueries({ queryKey: queryKeys.notifications() });
                  queryClient.invalidateQueries({ queryKey: queryKeys.unreadCount });
                }
                break;
                
              case 'unread_count':
                if (data.count !== undefined) {
                  setUnreadCount(data.count);
                }
                break;
                
              case 'heartbeat':
                // Connection is alive, no action needed
                break;
                
              default:
                console.log('Unknown SSE event type:', data.type);
            }
          } catch (error) {
            console.error('Error parsing SSE message:', error);
          }
        };

        eventSource.onerror = (error) => {
          console.error('SSE connection error:', error);
          setIsConnected(false);
          
          // Attempt to reconnect after 5 seconds
          setTimeout(() => {
            if (eventSourceRef.current) {
              eventSourceRef.current.close();
              connectSSE();
            }
          }, 5000);
        };

        eventSource.onclose = () => {
          console.log('SSE connection closed');
          setIsConnected(false);
        };

      } catch (error) {
        console.error('Failed to establish SSE connection:', error);
        setIsConnected(false);
      }
    };

    connectSSE();

    // Cleanup on unmount
    return () => {
      if (eventSourceRef.current) {
        eventSourceRef.current.close();
        eventSourceRef.current = null;
      }
    };
  }, [queryClient]);

  // Function to manually add a notification (for testing)
  const addTestNotification = (notification: Notification) => {
    setNotifications(prev => [notification, ...prev]);
    setUnreadCount(prev => prev + 1);
  };

  // Function to mark notification as read
  const markAsRead = (notificationId: number) => {
    setNotifications(prev => 
      prev.map(notification => 
        notification.id === notificationId 
          ? { ...notification, read: true }
          : notification
      )
    );
    setUnreadCount(prev => Math.max(0, prev - 1));
  };

  // Function to mark all notifications as read
  const markAllAsRead = () => {
    setNotifications(prev => 
      prev.map(notification => ({ ...notification, read: true }))
    );
    setUnreadCount(0);
  };

  return {
    notifications,
    unreadCount,
    isConnected,
    addTestNotification,
    markAsRead,
    markAllAsRead
  };
}; 
│   │   │   │   # --- End: use-notifications-realtime.ts ---

│   │   │   │   ├─ use-notifications.ts

│   │   │   │   # --- Begin: use-notifications.ts ---
import { useState, useEffect } from 'react';
import { apiClient } from '@/lib/api';
import { useToast } from '@/hooks/use-toast';

interface Notification {
  id: number;
  userId: number;
  message: string;
  type: 'security' | 'scan' | 'system' | 'collaboration';
  metadata: string;
  read: boolean;
  createdAt: string;
}

export const useNotifications = () => {
  const [notifications, setNotifications] = useState<Notification[]>([]);
  const [unreadCount, setUnreadCount] = useState(0);
  const [loading, setLoading] = useState(true);
  const { toast } = useToast();

  // Initialize notifications
  useEffect(() => {
    const fetchNotifications = async () => {
      try {
        const [notificationsData, unreadData] = await Promise.all([
          apiClient.getNotifications(),
          apiClient.getUnreadCount()
        ]);
        setNotifications((notificationsData as any)?.notifications || []);
        setUnreadCount(unreadData.count);
      } catch (error) {
        console.error('Failed to fetch notifications:', error);
      } finally {
        setLoading(false);
      }
    };

    fetchNotifications();
  }, []);

  // Setup SSE connection
  useEffect(() => {
    const token = localStorage.getItem('token');
    if (!token) return;

    // Use token as query param for SSE
    const url = `${import.meta.env.VITE_API_URL || 'http://localhost:5000'}/api/notifications/stream${token ? `?token=${encodeURIComponent(token)}` : ''}`;
    const eventSource = new EventSource(url);
    
    eventSource.onmessage = (event) => {
      const data = JSON.parse(event.data);
      
      switch (data.type) {
        case 'new_notification':
          setNotifications(prev => [data.notification, ...prev]);
          setUnreadCount(prev => prev + 1);
          
          // Show toast for important notifications
          if (data.notification.type === 'security') {
            toast({
              title: "Security Alert",
              description: data.notification.message,
              variant: "destructive"
            });
          }
          break;
        case 'unread_count':
          setUnreadCount(data.count);
          break;
        case 'connected':
          console.log('SSE connected');
          break;
        case 'heartbeat':
          // Keep connection alive
          break;
      }
    };

    eventSource.onerror = (error) => {
      console.error('SSE connection failed:', error);
      eventSource.close();
      
      // Fallback to polling
      const pollInterval = setInterval(async () => {
        try {
          const unreadData = await apiClient.getUnreadCount();
          setUnreadCount(unreadData.count);
        } catch (error) {
          console.error('Polling failed:', error);
        }
      }, 30000); // Poll every 30 seconds

      return () => clearInterval(pollInterval);
    };

    return () => eventSource.close();
  }, [toast]);

  const markAsRead = async (notificationId: number) => {
    try {
      await apiClient.markAsRead(notificationId.toString());
      setNotifications(prev => 
        prev.map(notif => 
          notif.id === notificationId 
            ? { ...notif, read: true }
            : notif
        )
      );
      setUnreadCount(prev => Math.max(0, prev - 1));
    } catch (error) {
      console.error('Failed to mark notification as read:', error);
    }
  };

  const markAllAsRead = async () => {
    try {
      await apiClient.markAllAsRead();
      setNotifications(prev => 
        prev.map(notif => ({ ...notif, read: true }))
      );
      setUnreadCount(0);
    } catch (error) {
      console.error('Failed to mark all notifications as read:', error);
    }
  };

  const createTestNotification = async () => {
    try {
      await apiClient.createTestNotification();
      toast({
        title: "Test notification sent",
        description: "Check your notifications panel"
      });
    } catch (error) {
      console.error('Failed to create test notification:', error);
    }
  };

  return {
    notifications,
    unreadCount,
    loading,
    markAsRead,
    markAllAsRead,
    createTestNotification
  };
};

│   │   │   │   # --- End: use-notifications.ts ---

│   │   │   │   ├─ use-toast.ts

│   │   │   │   # --- Begin: use-toast.ts ---
import * as React from "react"

import type {
  ToastActionElement,
  ToastProps,
} from "@/components/ui/toast"

const TOAST_LIMIT = 1
const TOAST_REMOVE_DELAY = 1000000

type ToasterToast = ToastProps & {
  id: string
  title?: React.ReactNode
  description?: React.ReactNode
  action?: ToastActionElement
}

const actionTypes = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
} as const

let count = 0

function genId() {
  count = (count + 1) % Number.MAX_SAFE_INTEGER
  return count.toString()
}

type ActionType = typeof actionTypes

type Action =
  | {
      type: ActionType["ADD_TOAST"]
      toast: ToasterToast
    }
  | {
      type: ActionType["UPDATE_TOAST"]
      toast: Partial<ToasterToast>
    }
  | {
      type: ActionType["DISMISS_TOAST"]
      toastId?: ToasterToast["id"]
    }
  | {
      type: ActionType["REMOVE_TOAST"]
      toastId?: ToasterToast["id"]
    }

interface State {
  toasts: ToasterToast[]
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId)
    dispatch({
      type: "REMOVE_TOAST",
      toastId: toastId,
    })
  }, TOAST_REMOVE_DELAY)

  toastTimeouts.set(toastId, timeout)
}

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case "ADD_TOAST":
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      }

    case "UPDATE_TOAST":
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t
        ),
      }

    case "DISMISS_TOAST": {
      const { toastId } = action

      // ! Side effects ! - This could be extracted into a dismissToast() action,
      // but I'll keep it here for simplicity
      if (toastId) {
        addToRemoveQueue(toastId)
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id)
        })
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t
        ),
      }
    }
    case "REMOVE_TOAST":
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        }
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      }
  }
}

const listeners: Array<(state: State) => void> = []

let memoryState: State = { toasts: [] }

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action)
  listeners.forEach((listener) => {
    listener(memoryState)
  })
}

type Toast = Omit<ToasterToast, "id">

function toast({ ...props }: Toast) {
  const id = genId()

  const update = (props: ToasterToast) =>
    dispatch({
      type: "UPDATE_TOAST",
      toast: { ...props, id },
    })
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id })

  dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss()
      },
    },
  })

  return {
    id: id,
    dismiss,
    update,
  }
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState)

  React.useEffect(() => {
    listeners.push(setState)
    return () => {
      const index = listeners.indexOf(setState)
      if (index > -1) {
        listeners.splice(index, 1)
      }
    }
  }, [state])

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
  }
}

export { useToast, toast }

│   │   │   │   # --- End: use-toast.ts ---

│   │   │   ├─ lib/
│   │   │   │   ├─ api-client.ts

│   │   │   │   # --- Begin: api-client.ts ---
import {
  AuthResponse,
  LoginData,
  RegisterData,
  UpdateProfileData,
  User,
  Project,
  CreateProjectData,
  Collaborator,
  ScanResult,
  ScanHistory,
  NotificationResponse,
  NotificationParams,
  AlertConfig,
  UnreadCountResponse,
  AuditLog,
  ApiError,
  ExportFormat
} from '@/types';

const API_BASE = import.meta.env.VITE_API_URL || 'http://localhost:5000/api'; // Updated to match backend default

class ApiErrorClass extends Error {
  constructor(
    message: string,
    public status: number,
    public details?: string
  ) {
    super(message);
    this.name = 'ApiError';
  }
}

class ApiClient {
  private baseURL: string;

  constructor() {
    this.baseURL = API_BASE;
  }

  private getHeaders(): Record<string, string> {
    const token = localStorage.getItem('token');
    return {
      'Content-Type': 'application/json',
      ...(token && { Authorization: `Bearer ${token}` })
    };
  }

  private async request<T>(endpoint: string, options: RequestInit = {}): Promise<T> {
    const url = `${this.baseURL}${endpoint}`;
    
    try {
      const response = await fetch(url, {
        ...options,
        headers: {
          ...this.getHeaders(),
          ...options.headers
        }
      });
      
      const data = await response.json();
      
      if (!response.ok) {
        throw new ApiErrorClass(
          data.error || 'API Error',
          response.status,
          data.details
        );
      }
      
      return data;
    } catch (error) {
      if (error instanceof ApiErrorClass) {
        throw error;
      }
      throw new ApiErrorClass('Network error', 0);
    }
  }

  // Authentication
  async register(userData: RegisterData): Promise<AuthResponse> {
    return this.request<AuthResponse>('/auth/register', {
      method: 'POST',
      body: JSON.stringify(userData)
    });
  }

  async login(credentials: LoginData): Promise<AuthResponse> {
    return this.request<AuthResponse>('/auth/login', {
      method: 'POST',
      body: JSON.stringify(credentials)
    });
  }

  async logout(): Promise<void> {
    return this.request<void>('/auth/logout', { method: 'POST' });
  }

  async forgotPassword(email: string): Promise<void> {
    return this.request<void>('/auth/forgot', {
      method: 'POST',
      body: JSON.stringify({ email })
    });
  }

  // User Management
  async getProfile(): Promise<User> {
    return this.request<User>('/user/profile');
  }

  async updateProfile(data: UpdateProfileData): Promise<User> {
    return this.request<User>('/user/profile', {
      method: 'PUT',
      body: JSON.stringify(data)
    });
  }

  // Project Management
  async getProjects(): Promise<Project[]> {
    return this.request<Project[]>('/project');
  }

  async createProject(data: CreateProjectData): Promise<Project> {
    return this.request<Project>('/project', {
      method: 'POST',
      body: JSON.stringify(data)
    });
  }

  async getProject(id: number): Promise<Project> {
    return this.request<Project>(`/project/${id}`);
  }

  async addCollaborator(projectId: number, email: string): Promise<Collaborator> {
    return this.request<Collaborator>(`/project/${projectId}/collaborator`, {
      method: 'POST',
      body: JSON.stringify({ email })
    });
  }

  async exportProject(id: number, format: ExportFormat = 'pdf'): Promise<Blob> {
    const token = localStorage.getItem('token');
    const response = await fetch(`${this.baseURL}/project/${id}/export?format=${format}`, {
      headers: {
        Authorization: `Bearer ${token}`
      }
    });

    if (!response.ok) {
      const error = await response.json();
      throw new ApiErrorClass(error.error || 'Export failed', response.status);
    }

    return response.blob();
  }

  // Vulnerability Scanning
  async uploadAndScan(file: File, projectId: number): Promise<ScanResult> {
    const formData = new FormData();
    formData.append('file', file);
    formData.append('projectId', projectId.toString());

    const token = localStorage.getItem('token');
    const response = await fetch(`${this.baseURL}/scan`, {
      method: 'POST',
      headers: { 
        Authorization: `Bearer ${token}`
      },
      body: formData
    });

    if (!response.ok) {
      const error = await response.json();
      throw new ApiErrorClass(error.error || 'Scan failed', response.status, error.details);
    }

    return response.json();
  }

  async getScanResults(projectId: number): Promise<ScanResult> {
    return this.request<ScanResult>(`/scan/${projectId}`);
  }

  async getScanHistory(projectId: number): Promise<ScanHistory[]> {
    return this.request<ScanHistory[]>(`/scan/history/${projectId}`);
  }

  // Notifications
  async getNotifications(params: NotificationParams = {}): Promise<NotificationResponse> {
    const searchParams = new URLSearchParams();
    if (params.page) searchParams.append('page', params.page.toString());
    if (params.limit) searchParams.append('limit', params.limit.toString());
    if (params.type) searchParams.append('type', params.type);

    return this.request<NotificationResponse>(`/notifications?${searchParams.toString()}`);
  }

  async markAsRead(notificationId: number): Promise<void> {
    return this.request<void>('/notifications/read', {
      method: 'POST',
      body: JSON.stringify({ notificationId })
    });
  }

  async markAllAsRead(): Promise<void> {
    return this.request<void>('/notifications/read-all', { method: 'POST' });
  }

  async getUnreadCount(): Promise<UnreadCountResponse> {
    return this.request<UnreadCountResponse>('/notifications/unread-count');
  }

  async createTestNotification(message: string, type: string): Promise<void> {
    return this.request<void>('/notifications/test', {
      method: 'POST',
      body: JSON.stringify({ message, type })
    });
  }

  // Alerts
  async setAlertConfig(config: AlertConfig): Promise<void> {
    return this.request<void>('/alerts/config', {
      method: 'POST',
      body: JSON.stringify(config)
    });
  }

  async sendTestAlert(): Promise<void> {
    return this.request<void>('/alerts/test', { method: 'POST' });
  }

  // Admin (requires admin role)
  async getUsers(): Promise<User[]> {
    return this.request<User[]>('/admin/users');
  }

  async getAdminProjects(): Promise<Project[]> {
    return this.request<Project[]>('/admin/projects');
  }

  async getAuditLogs(): Promise<AuditLog[]> {
    return this.request<AuditLog[]>('/admin/logs');
  }

  // Health Check
  async healthCheck(): Promise<{ status: string; timestamp: string }> {
    return this.request<{ status: string; timestamp: string }>('/health');
  }

  // SSE Connection for real-time notifications
  createSSEConnection(): EventSource {
    const token = localStorage.getItem('token');
    // Pass token as query param for SSE authentication
    const url = `${this.baseURL}/notifications/stream${token ? `?token=${encodeURIComponent(token)}` : ''}`;
    const eventSource = new EventSource(url);
    return eventSource;
  }
}

export const apiClient = new ApiClient();
export { ApiErrorClass as ApiError }; 
│   │   │   │   # --- End: api-client.ts ---

│   │   │   │   ├─ api.ts

│   │   │   │   # --- Begin: api.ts ---
// DEPRECATED: Use api-client.ts for all API calls. This file is kept for legacy support.
const API_BASE = import.meta.env.VITE_API_URL || 'http://localhost:5000/api'; // Updated to match backend default

interface ApiResponse<T = any> {
  data?: T;
  error?: string;
  details?: string;
}

class ApiClient {
  private baseURL: string;

  constructor() {
    this.baseURL = API_BASE;
  }

  private getHeaders(): Record<string, string> {
    const token = localStorage.getItem('token');
    return {
      'Content-Type': 'application/json',
      ...(token && { Authorization: `Bearer ${token}` })
    };
  }

  private async request<T>(endpoint: string, options: RequestInit = {}): Promise<T> {
    const url = `${this.baseURL}${endpoint}`;
    const response = await fetch(url, {
      ...options,
      headers: {
        ...this.getHeaders(),
        ...options.headers
      }
    });
    
    const data = await response.json();
    
    if (!response.ok) {
      throw new ApiError(data.error || 'API Error', response.status, data.details);
    }
    
    return data;
  }

  // Authentication
  async register(userData: { email: string; password: string; name: string }) {
    return this.request<{ token: string; user: any }>('/auth/register', {
      method: 'POST',
      body: JSON.stringify(userData)
    });
  }

  async login(credentials: { email: string; password: string }) {
    return this.request<{ token: string; user: any }>('/auth/login', {
      method: 'POST',
      body: JSON.stringify(credentials)
    });
  }

  async logout() {
    return this.request('/auth/logout', { method: 'POST' });
  }

  async forgotPassword(email: string) {
    return this.request('/auth/forgot', {
      method: 'POST',
      body: JSON.stringify({ email })
    });
  }

  // User Management
  async getUserProfile() {
    return this.request<any>('/user/profile');
  }

  async updateUserProfile(userData: any) {
    return this.request('/user/profile', {
      method: 'PUT',
      body: JSON.stringify(userData)
    });
  }

  // Project Management
  async getProjects() {
    return this.request<any[]>('/project');
  }

  async createProject(projectData: { name: string; description?: string }) {
    return this.request('/project', {
      method: 'POST',
      body: JSON.stringify(projectData)
    });
  }

  async getProject(id: string) {
    return this.request(`/project/${id}`);
  }

  async addCollaborator(projectId: string, email: string) {
    return this.request(`/project/${projectId}/collaborator`, {
      method: 'POST',
      body: JSON.stringify({ email })
    });
  }

  async exportProject(projectId: string) {
    return this.request(`/project/${projectId}/export`);
  }

  // Vulnerability Scanning
  async uploadAndScan(projectId: string, file: File) {
    const formData = new FormData();
    formData.append('file', file);
    formData.append('projectId', projectId);

    const response = await fetch(`${this.baseURL}/scan`, {
      method: 'POST',
      headers: { 
        Authorization: this.getHeaders().Authorization || ''
      },
      body: formData
    });

    if (!response.ok) {
      const error = await response.json();
      throw new ApiError(error.error || 'Scan failed', response.status, error.details);
    }

    return response.json();
  }

  async getScanResults(projectId: string) {
    return this.request(`/scan/${projectId}`);
  }

  async getScanHistory(projectId: string) {
    return this.request(`/scan/history/${projectId}`);
  }

  // Notifications
  async getNotifications(page = 1, limit = 20) {
    return this.request(`/notifications?page=${page}&limit=${limit}`);
  }

  async markAsRead(notificationId: string) {
    return this.request('/notifications/read', {
      method: 'POST',
      body: JSON.stringify({ notificationId })
    });
  }

  async markAllAsRead() {
    return this.request('/notifications/read-all', { method: 'POST' });
  }

  async getUnreadCount() {
    return this.request<{ count: number }>('/notifications/unread-count');
  }

  async createTestNotification() {
    return this.request('/notifications/test', { method: 'POST' });
  }

  // Alerts
  async setAlertConfig(config: any) {
    return this.request('/alerts/config', {
      method: 'POST',
      body: JSON.stringify(config)
    });
  }

  async sendTestAlert() {
    return this.request('/alerts/test', { method: 'POST' });
  }

  // Admin (requires admin role)
  async getUsers() {
    return this.request('/admin/users');
  }

  async getAdminProjects() {
    return this.request('/admin/projects');
  }

  async getAuditLogs() {
    return this.request('/admin/logs');
  }
}

export class ApiError extends Error {
  constructor(
    message: string,
    public status: number,
    public details?: string
  ) {
    super(message);
    this.name = 'ApiError';
  }
}

export const apiClient = new ApiClient();
│   │   │   │   # --- End: api.ts ---

│   │   │   │   ├─ utils.ts

│   │   │   │   # --- Begin: utils.ts ---
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

│   │   │   │   # --- End: utils.ts ---

│   │   │   ├─ pages/
│   │   │   │   ├─ AdminDashboard.tsx

│   │   │   │   # --- Begin: AdminDashboard.tsx ---
import { useState } from 'react';
import { MainLayout } from '@/components/layout/main-layout';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Input } from '@/components/ui/input';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Separator } from '@/components/ui/separator';
import { 
  Users, 
  Shield, 
  Settings, 
  Activity, 
  TrendingUp, 
  AlertTriangle,
  CheckCircle,
  Clock,
  Eye,
  Edit,
  Trash2,
  Download,
  RefreshCw,
  BarChart3,
  Database,
  Server,
  Bell,
  Calendar,
  Search,
  Filter,
  Plus
} from 'lucide-react';
import { useAdminUsers, useAdminProjects, useAdminLogs } from '@/hooks/use-api';
import { useNotificationsRealtime } from '@/hooks/use-notifications-realtime';
import { useAuth } from '@/hooks/use-auth';
import type { User, Project, AuditLog } from '@/types';

export default function AdminDashboard() {
  const { user } = useAuth();
  const { isConnected } = useNotificationsRealtime();
  
  const [searchQuery, setSearchQuery] = useState('');
  const [selectedView, setSelectedView] = useState<'overview' | 'users' | 'projects' | 'logs'>('overview');
  
  const { data: users = [], isLoading: usersLoading } = useAdminUsers();
  const { data: projects = [], isLoading: projectsLoading } = useAdminProjects();
  const { data: auditLogs = [], isLoading: logsLoading } = useAdminLogs();

  // Calculate admin stats
  const totalUsers = users.length;
  const activeUsers = users.filter(u => u.createdAt).length; // Simplified active check
  const adminUsers = users.filter(u => u.role === 'admin').length;
  const totalProjects = projects.length;
  const totalVulnerabilities = projects.reduce((sum, p) => sum + (p.totalVulnerabilities || 0), 0);
  const criticalVulnerabilities = projects.reduce((sum, p) => {
    return sum + (p.dependencies?.reduce((depSum, dep) => 
      depSum + (dep.issues?.filter(issue => issue.severity === 'CRITICAL').length || 0), 0
    ) || 0);
  }, 0);

  const recentAuditLogs = auditLogs.slice(0, 10);
  const recentUsers = users.slice(0, 5);
  const recentProjects = projects.slice(0, 5);

  const getRoleBadge = (role: string) => {
    switch (role) {
      case 'admin':
        return <Badge variant="destructive">Admin</Badge>;
      case 'user':
        return <Badge variant="secondary">User</Badge>;
      default:
        return <Badge variant="outline">{role}</Badge>;
    }
  };

  const getSecurityStatus = (project: Project) => {
    const criticalCount = project.dependencies?.reduce((total, dep) => 
      total + (dep.issues?.filter(issue => issue.severity === 'CRITICAL').length || 0), 0
    ) || 0;
    
    const highCount = project.dependencies?.reduce((total, dep) => 
      total + (dep.issues?.filter(issue => issue.severity === 'HIGH').length || 0), 0
    ) || 0;

    if (criticalCount > 0) return { status: 'Critical', color: 'destructive' as const };
    if (highCount > 0) return { status: 'High Risk', color: 'destructive' as const };
    if ((project.totalVulnerabilities || 0) > 0) return { status: 'Medium Risk', color: 'default' as const };
    return { status: 'Secure', color: 'secondary' as const };
  };

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString('en-US', {
      month: 'short',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  const getActionIcon = (action: string) => {
    switch (action.toLowerCase()) {
      case 'login':
        return <CheckCircle className="h-4 w-4 text-green-500" />;
      case 'logout':
        return <Clock className="h-4 w-4 text-gray-500" />;
      case 'create':
        return <Plus className="h-4 w-4 text-blue-500" />;
      case 'update':
        return <Edit className="h-4 w-4 text-orange-500" />;
      case 'delete':
        return <Trash2 className="h-4 w-4 text-red-500" />;
      case 'scan':
        return <Shield className="h-4 w-4 text-purple-500" />;
      default:
        return <Activity className="h-4 w-4 text-muted-foreground" />;
    }
  };

  // Check if current user is admin
  if (user?.role !== 'admin') {
    return (
      <MainLayout>
        <Alert variant="destructive">
          <AlertTriangle className="h-4 w-4" />
          <AlertDescription>
            Access denied. Admin privileges required.
          </AlertDescription>
        </Alert>
      </MainLayout>
    );
  }

  return (
    <MainLayout>
      <div className="space-y-6">
        {/* Header */}
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-3xl font-bold text-foreground">Admin Dashboard</h1>
            <p className="text-muted-foreground">
              System administration and monitoring
            </p>
          </div>
          <div className="flex items-center space-x-2">
            <Badge variant={isConnected ? "default" : "secondary"}>
              {isConnected ? "Connected" : "Disconnected"}
            </Badge>
            <Badge variant="destructive">Admin</Badge>
          </div>
        </div>

        {/* Navigation Tabs */}
        <Card>
          <CardContent className="p-4">
            <div className="flex space-x-4">
              <Button
                variant={selectedView === 'overview' ? 'default' : 'outline'}
                onClick={() => setSelectedView('overview')}
              >
                <BarChart3 className="mr-2 h-4 w-4" />
                Overview
              </Button>
              <Button
                variant={selectedView === 'users' ? 'default' : 'outline'}
                onClick={() => setSelectedView('users')}
              >
                <Users className="mr-2 h-4 w-4" />
                Users ({totalUsers})
              </Button>
              <Button
                variant={selectedView === 'projects' ? 'default' : 'outline'}
                onClick={() => setSelectedView('projects')}
              >
                <Shield className="mr-2 h-4 w-4" />
                Projects ({totalProjects})
              </Button>
              <Button
                variant={selectedView === 'logs' ? 'default' : 'outline'}
                onClick={() => setSelectedView('logs')}
              >
                <Activity className="mr-2 h-4 w-4" />
                Audit Logs
              </Button>
            </div>
          </CardContent>
        </Card>

        {/* Overview Dashboard */}
        {selectedView === 'overview' && (
          <div className="space-y-6">
            {/* Stats Cards */}
            <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-4">
              <Card>
                <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                  <CardTitle className="text-sm font-medium">Total Users</CardTitle>
                  <Users className="h-4 w-4 text-primary" />
                </CardHeader>
                <CardContent>
                  <div className="text-2xl font-bold">{totalUsers}</div>
                  <p className="text-xs text-muted-foreground">
                    {activeUsers} active users
                  </p>
                </CardContent>
              </Card>

              <Card>
                <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                  <CardTitle className="text-sm font-medium">Total Projects</CardTitle>
                  <Shield className="h-4 w-4 text-primary" />
                </CardHeader>
                <CardContent>
                  <div className="text-2xl font-bold">{totalProjects}</div>
                  <p className="text-xs text-muted-foreground">
                    Across all users
                  </p>
                </CardContent>
              </Card>

              <Card>
                <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                  <CardTitle className="text-sm font-medium">Total Vulnerabilities</CardTitle>
                  <AlertTriangle className="h-4 w-4 text-destructive" />
                </CardHeader>
                <CardContent>
                  <div className="text-2xl font-bold text-destructive">{totalVulnerabilities}</div>
                  <p className="text-xs text-muted-foreground">
                    {criticalVulnerabilities} critical
                  </p>
                </CardContent>
              </Card>

              <Card>
                <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                  <CardTitle className="text-sm font-medium">System Health</CardTitle>
                  <CheckCircle className="h-4 w-4 text-green-500" />
                </CardHeader>
                <CardContent>
                  <div className="text-2xl font-bold text-green-500">Healthy</div>
                  <p className="text-xs text-muted-foreground">
                    All systems operational
                  </p>
                </CardContent>
              </Card>
            </div>

            {/* Recent Activity */}
            <div className="grid gap-6 lg:grid-cols-2">
              <Card>
                <CardHeader>
                  <CardTitle>Recent Users</CardTitle>
                  <CardDescription>Latest user registrations</CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    {recentUsers.map((user) => (
                      <div key={user.id} className="flex items-center justify-between p-3 border rounded-lg">
                        <div className="flex items-center space-x-3">
                          <div className="p-2 bg-primary/10 rounded-lg">
                            <Users className="h-4 w-4 text-primary" />
                          </div>
                          <div>
                            <p className="font-medium">{user.name}</p>
                            <p className="text-sm text-muted-foreground">{user.email}</p>
                          </div>
                        </div>
                        <div className="flex items-center space-x-2">
                          {getRoleBadge(user.role)}
                          <Button variant="ghost" size="sm">
                            <Eye className="h-4 w-4" />
                          </Button>
                        </div>
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>

              <Card>
                <CardHeader>
                  <CardTitle>Recent Projects</CardTitle>
                  <CardDescription>Latest project activities</CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    {recentProjects.map((project) => {
                      const securityStatus = getSecurityStatus(project);
                      return (
                        <div key={project.id} className="flex items-center justify-between p-3 border rounded-lg">
                          <div className="flex items-center space-x-3">
                            <div className="p-2 bg-primary/10 rounded-lg">
                              <Shield className="h-4 w-4 text-primary" />
                            </div>
                            <div>
                              <p className="font-medium">{project.name}</p>
                              <p className="text-sm text-muted-foreground">
                                {project.totalVulnerabilities || 0} vulnerabilities
                              </p>
                            </div>
                          </div>
                          <div className="flex items-center space-x-2">
                            <Badge variant={securityStatus.color}>
                              {securityStatus.status}
                            </Badge>
                            <Button variant="ghost" size="sm">
                              <Eye className="h-4 w-4" />
                            </Button>
                          </div>
                        </div>
                      );
                    })}
                  </div>
                </CardContent>
              </Card>
            </div>

            {/* System Status */}
            <Card>
              <CardHeader>
                <CardTitle>System Status</CardTitle>
                <CardDescription>Current system health and performance</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="grid gap-4 md:grid-cols-3">
                  <div className="flex items-center space-x-3 p-3 border rounded-lg">
                    <Server className="h-5 w-5 text-green-500" />
                    <div>
                      <p className="font-medium">API Server</p>
                      <p className="text-sm text-muted-foreground">Operational</p>
                    </div>
                  </div>
                  
                  <div className="flex items-center space-x-3 p-3 border rounded-lg">
                    <Database className="h-5 w-5 text-green-500" />
                    <div>
                      <p className="font-medium">Database</p>
                      <p className="text-sm text-muted-foreground">Connected</p>
                    </div>
                  </div>
                  
                  <div className="flex items-center space-x-3 p-3 border rounded-lg">
                    <Bell className="h-5 w-5 text-green-500" />
                    <div>
                      <p className="font-medium">Notifications</p>
                      <p className="text-sm text-muted-foreground">Active</p>
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>
        )}

        {/* Users Management */}
        {selectedView === 'users' && (
          <div className="space-y-6">
            {/* Search and Filters */}
            <Card>
              <CardContent className="p-4">
                <div className="flex items-center space-x-4">
                  <div className="relative flex-1">
                    <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground" />
                    <Input
                      placeholder="Search users..."
                      value={searchQuery}
                      onChange={(e) => setSearchQuery(e.target.value)}
                      className="pl-10"
                    />
                  </div>
                  <Select>
                    <SelectTrigger className="w-48">
                      <SelectValue placeholder="Filter by role" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="all">All Roles</SelectItem>
                      <SelectItem value="admin">Admin</SelectItem>
                      <SelectItem value="user">User</SelectItem>
                    </SelectContent>
                  </Select>
                  <Button variant="outline">
                    <Download className="mr-2 h-4 w-4" />
                    Export
                  </Button>
                </div>
              </CardContent>
            </Card>

            {/* Users List */}
            <Card>
              <CardHeader>
                <CardTitle>User Management</CardTitle>
                <CardDescription>
                  Manage system users and their permissions
                </CardDescription>
              </CardHeader>
              <CardContent>
                {usersLoading ? (
                  <div className="space-y-4">
                    {[...Array(5)].map((_, i) => (
                      <div key={i} className="animate-pulse">
                        <div className="h-4 bg-muted rounded w-3/4 mb-2"></div>
                        <div className="h-3 bg-muted rounded w-1/2"></div>
                      </div>
                    ))}
                  </div>
                ) : (
                  <div className="space-y-4">
                    {users.map((user) => (
                      <div key={user.id} className="flex items-center justify-between p-4 border rounded-lg">
                        <div className="flex items-center space-x-4">
                          <div className="p-2 bg-primary/10 rounded-lg">
                            <Users className="h-5 w-5 text-primary" />
                          </div>
                          <div>
                            <p className="font-medium">{user.name}</p>
                            <p className="text-sm text-muted-foreground">{user.email}</p>
                            <p className="text-xs text-muted-foreground">
                              Joined {formatDate(user.createdAt)}
                            </p>
                          </div>
                        </div>
                        <div className="flex items-center space-x-2">
                          {getRoleBadge(user.role)}
                          <Button variant="ghost" size="sm">
                            <Edit className="h-4 w-4" />
                          </Button>
                          <Button variant="ghost" size="sm">
                            <Eye className="h-4 w-4" />
                          </Button>
                        </div>
                      </div>
                    ))}
                  </div>
                )}
              </CardContent>
            </Card>
          </div>
        )}

        {/* Projects Management */}
        {selectedView === 'projects' && (
          <div className="space-y-6">
            {/* Search and Filters */}
            <Card>
              <CardContent className="p-4">
                <div className="flex items-center space-x-4">
                  <div className="relative flex-1">
                    <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground" />
                    <Input
                      placeholder="Search projects..."
                      value={searchQuery}
                      onChange={(e) => setSearchQuery(e.target.value)}
                      className="pl-10"
                    />
                  </div>
                  <Select>
                    <SelectTrigger className="w-48">
                      <SelectValue placeholder="Filter by status" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="all">All Status</SelectItem>
                      <SelectItem value="secure">Secure</SelectItem>
                      <SelectItem value="at-risk">At Risk</SelectItem>
                      <SelectItem value="critical">Critical</SelectItem>
                    </SelectContent>
                  </Select>
                  <Button variant="outline">
                    <Download className="mr-2 h-4 w-4" />
                    Export
                  </Button>
                </div>
              </CardContent>
            </Card>

            {/* Projects List */}
            <Card>
              <CardHeader>
                <CardTitle>Project Management</CardTitle>
                <CardDescription>
                  Monitor all projects and their security status
                </CardDescription>
              </CardHeader>
              <CardContent>
                {projectsLoading ? (
                  <div className="space-y-4">
                    {[...Array(5)].map((_, i) => (
                      <div key={i} className="animate-pulse">
                        <div className="h-4 bg-muted rounded w-3/4 mb-2"></div>
                        <div className="h-3 bg-muted rounded w-1/2"></div>
                      </div>
                    ))}
                  </div>
                ) : (
                  <div className="space-y-4">
                    {projects.map((project) => {
                      const securityStatus = getSecurityStatus(project);
                      return (
                        <div key={project.id} className="flex items-center justify-between p-4 border rounded-lg">
                          <div className="flex items-center space-x-4">
                            <div className="p-2 bg-primary/10 rounded-lg">
                              <Shield className="h-5 w-5 text-primary" />
                            </div>
                            <div>
                              <p className="font-medium">{project.name}</p>
                              <p className="text-sm text-muted-foreground">
                                {project.totalDependencies || 0} dependencies • {project.totalVulnerabilities || 0} vulnerabilities
                              </p>
                              <p className="text-xs text-muted-foreground">
                                Created {formatDate(project.createdAt)}
                              </p>
                            </div>
                          </div>
                          <div className="flex items-center space-x-2">
                            <Badge variant={securityStatus.color}>
                              {securityStatus.status}
                            </Badge>
                            <Button variant="ghost" size="sm">
                              <Eye className="h-4 w-4" />
                            </Button>
                            <Button variant="ghost" size="sm">
                              <Edit className="h-4 w-4" />
                            </Button>
                          </div>
                        </div>
                      );
                    })}
                  </div>
                )}
              </CardContent>
            </Card>
          </div>
        )}

        {/* Audit Logs */}
        {selectedView === 'logs' && (
          <div className="space-y-6">
            {/* Search and Filters */}
            <Card>
              <CardContent className="p-4">
                <div className="flex items-center space-x-4">
                  <div className="relative flex-1">
                    <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground" />
                    <Input
                      placeholder="Search audit logs..."
                      value={searchQuery}
                      onChange={(e) => setSearchQuery(e.target.value)}
                      className="pl-10"
                    />
                  </div>
                  <Select>
                    <SelectTrigger className="w-48">
                      <SelectValue placeholder="Filter by action" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="all">All Actions</SelectItem>
                      <SelectItem value="login">Login</SelectItem>
                      <SelectItem value="create">Create</SelectItem>
                      <SelectItem value="update">Update</SelectItem>
                      <SelectItem value="delete">Delete</SelectItem>
                    </SelectContent>
                  </Select>
                  <Button variant="outline">
                    <Download className="mr-2 h-4 w-4" />
                    Export
                  </Button>
                </div>
              </CardContent>
            </Card>

            {/* Audit Logs List */}
            <Card>
              <CardHeader>
                <CardTitle>Audit Logs</CardTitle>
                <CardDescription>
                  System activity and user actions
                </CardDescription>
              </CardHeader>
              <CardContent>
                {logsLoading ? (
                  <div className="space-y-4">
                    {[...Array(5)].map((_, i) => (
                      <div key={i} className="animate-pulse">
                        <div className="h-4 bg-muted rounded w-3/4 mb-2"></div>
                        <div className="h-3 bg-muted rounded w-1/2"></div>
                      </div>
                    ))}
                  </div>
                ) : (
                  <div className="space-y-4">
                    {recentAuditLogs.map((log) => (
                      <div key={log.id} className="flex items-center justify-between p-4 border rounded-lg">
                        <div className="flex items-center space-x-4">
                          <div className="flex-shrink-0">
                            {getActionIcon(log.action)}
                          </div>
                          <div>
                            <p className="font-medium">{log.action}</p>
                            <p className="text-sm text-muted-foreground">{log.details}</p>
                            <p className="text-xs text-muted-foreground">
                              {log.user?.name || 'System'} • {formatDate(log.createdAt)}
                            </p>
                          </div>
                        </div>
                        <div className="flex items-center space-x-2">
                          <Button variant="ghost" size="sm">
                            <Eye className="h-4 w-4" />
                          </Button>
                        </div>
                      </div>
                    ))}
                  </div>
                )}
              </CardContent>
            </Card>
          </div>
        )}
      </div>
    </MainLayout>
  );
}
│   │   │   │   # --- End: AdminDashboard.tsx ---

│   │   │   │   ├─ AlertsConfig.tsx

│   │   │   │   # --- Begin: AlertsConfig.tsx ---
import { useState } from 'react';
import { MainLayout } from '@/components/layout/main-layout';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Switch } from '@/components/ui/switch';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Badge } from '@/components/ui/badge';
import { Separator } from '@/components/ui/separator';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { 
  Bell, 
  Mail, 
  Shield, 
  Settings, 
  TestTube, 
  Clock, 
  AlertTriangle,
  CheckCircle,
  XCircle,
  Info,
  Save,
  RefreshCw
} from 'lucide-react';
import { useAuth } from '@/hooks/use-auth';
import { useSetAlertConfig, useSendTestAlert, useCreateTestNotification } from '@/hooks/use-api';
import { useNotificationsRealtime } from '@/hooks/use-notifications-realtime';
import type { AlertConfigFormData } from '@/types';

export default function AlertsConfig() {
  const { user } = useAuth();
  const { isConnected } = useNotificationsRealtime();
  
  const setAlertConfigMutation = useSetAlertConfig();
  const sendTestAlertMutation = useSendTestAlert();
  const createTestNotificationMutation = useCreateTestNotification();

  const [alertConfig, setAlertConfig] = useState<AlertConfigFormData>({
    emailNotifications: user?.emailNotifications || false,
    dailyDigest: user?.dailyDigest || false,
    securityAlerts: user?.securityAlerts || false,
    alertFrequency: user?.alertFrequency || 'immediate'
  });

  const [testNotification, setTestNotification] = useState({
    message: 'This is a test notification from VulnWatchdog',
    type: 'system'
  });

  const [customEmail, setCustomEmail] = useState(user?.email || '');

  const handleAlertConfigUpdate = async () => {
    try {
      await setAlertConfigMutation.mutateAsync(alertConfig);
    } catch (error) {
      // Error is handled by the mutation hook
    }
  };

  const handleSendTestAlert = async () => {
    try {
      await sendTestAlertMutation.mutateAsync();
    } catch (error) {
      // Error is handled by the mutation hook
    }
  };

  const handleCreateTestNotification = async () => {
    try {
      await createTestNotificationMutation.mutateAsync({
        message: testNotification.message,
        type: testNotification.type
      });
    } catch (error) {
      // Error is handled by the mutation hook
    }
  };

  const getNotificationTypeIcon = (type: string) => {
    switch (type) {
      case 'security':
        return <Shield className="h-4 w-4 text-destructive" />;
      case 'scan':
        return <RefreshCw className="h-4 w-4 text-blue-500" />;
      case 'system':
        return <Settings className="h-4 w-4 text-gray-500" />;
      case 'collaboration':
        return <Bell className="h-4 w-4 text-green-500" />;
      default:
        return <Info className="h-4 w-4 text-muted-foreground" />;
    }
  };

  const getFrequencyDescription = (frequency: string) => {
    switch (frequency) {
      case 'immediate':
        return 'Receive notifications as soon as they occur';
      case 'daily':
        return 'Get a daily summary of all notifications';
      case 'weekly':
        return 'Receive a weekly digest of notifications';
      default:
        return '';
    }
  };

  return (
    <MainLayout>
      <div className="space-y-6">
        {/* Header */}
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-3xl font-bold text-foreground">Alert Configuration</h1>
            <p className="text-muted-foreground">
              Configure how you receive security notifications and alerts
            </p>
          </div>
          <div className="flex items-center space-x-2">
            <Badge variant={isConnected ? "default" : "secondary"}>
              {isConnected ? "Connected" : "Disconnected"}
            </Badge>
          </div>
        </div>

        <div className="grid gap-6 lg:grid-cols-3">
          {/* Main Configuration */}
          <div className="lg:col-span-2 space-y-6">
            {/* Email Notifications */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center space-x-2">
                  <Mail className="h-5 w-5" />
                  <span>Email Notifications</span>
                </CardTitle>
                <CardDescription>
                  Configure email-based security alerts and notifications
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-6">
                <div className="space-y-4">
                  <div className="flex items-center justify-between">
                    <div>
                      <Label className="text-base font-medium">Enable Email Notifications</Label>
                      <p className="text-sm text-muted-foreground">
                        Receive security alerts and updates via email
                      </p>
                    </div>
                    <Switch
                      checked={alertConfig.emailNotifications}
                      onCheckedChange={(checked) => {
                        setAlertConfig(prev => ({ ...prev, emailNotifications: checked }));
                        handleAlertConfigUpdate();
                      }}
                    />
                  </div>

                  <div className="flex items-center justify-between">
                    <div>
                      <Label className="text-base font-medium">Daily Security Digest</Label>
                      <p className="text-sm text-muted-foreground">
                        Get a daily summary of all vulnerabilities and security events
                      </p>
                    </div>
                    <Switch
                      checked={alertConfig.dailyDigest}
                      onCheckedChange={(checked) => {
                        setAlertConfig(prev => ({ ...prev, dailyDigest: checked }));
                        handleAlertConfigUpdate();
                      }}
                    />
                  </div>

                  <div className="flex items-center justify-between">
                    <div>
                      <Label className="text-base font-medium">Critical Security Alerts</Label>
                      <p className="text-sm text-muted-foreground">
                        Immediate notifications for critical vulnerabilities
                      </p>
                    </div>
                    <Switch
                      checked={alertConfig.securityAlerts}
                      onCheckedChange={(checked) => {
                        setAlertConfig(prev => ({ ...prev, securityAlerts: checked }));
                        handleAlertConfigUpdate();
                      }}
                    />
                  </div>
                </div>

                <Separator />

                <div className="space-y-4">
                  <div>
                    <Label>Notification Email</Label>
                    <Input
                      value={customEmail}
                      onChange={(e) => setCustomEmail(e.target.value)}
                      placeholder="Enter email address for notifications"
                      className="mt-2"
                    />
                    <p className="text-xs text-muted-foreground mt-1">
                      Leave empty to use your account email: {user?.email}
                    </p>
                  </div>

                  <div>
                    <Label>Alert Frequency</Label>
                    <Select
                      value={alertConfig.alertFrequency}
                      onValueChange={(value: 'immediate' | 'daily' | 'weekly') => {
                        setAlertConfig(prev => ({ ...prev, alertFrequency: value }));
                        handleAlertConfigUpdate();
                      }}
                    >
                      <SelectTrigger className="mt-2">
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="immediate">Immediate</SelectItem>
                        <SelectItem value="daily">Daily</SelectItem>
                        <SelectItem value="weekly">Weekly</SelectItem>
                      </SelectContent>
                    </Select>
                    <p className="text-xs text-muted-foreground mt-1">
                      {getFrequencyDescription(alertConfig.alertFrequency)}
                    </p>
                  </div>
                </div>
              </CardContent>
            </Card>

            {/* Alert Rules */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center space-x-2">
                  <Shield className="h-5 w-5" />
                  <span>Alert Rules</span>
                </CardTitle>
                <CardDescription>
                  Define custom rules for when to receive notifications
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-6">
                <div className="grid gap-4 md:grid-cols-2">
                  <div className="space-y-2">
                    <Label>Critical Vulnerabilities</Label>
                    <div className="flex items-center space-x-2">
                      <Switch defaultChecked />
                      <span className="text-sm">Always notify</span>
                    </div>
                  </div>

                  <div className="space-y-2">
                    <Label>High Severity</Label>
                    <div className="flex items-center space-x-2">
                      <Switch defaultChecked />
                      <span className="text-sm">Always notify</span>
                    </div>
                  </div>

                  <div className="space-y-2">
                    <Label>Medium Severity</Label>
                    <div className="flex items-center space-x-2">
                      <Switch defaultChecked />
                      <span className="text-sm">Daily digest only</span>
                    </div>
                  </div>

                  <div className="space-y-2">
                    <Label>Low Severity</Label>
                    <div className="flex items-center space-x-2">
                      <Switch />
                      <span className="text-sm">Weekly digest only</span>
                    </div>
                  </div>
                </div>

                <Separator />

                <div className="space-y-4">
                  <Label>Custom Alert Conditions</Label>
                  <div className="space-y-2">
                    <div className="flex items-center space-x-2">
                      <Switch defaultChecked />
                      <span className="text-sm">New project created</span>
                    </div>
                    <div className="flex items-center space-x-2">
                      <Switch defaultChecked />
                      <span className="text-sm">Scan completed</span>
                    </div>
                    <div className="flex items-center space-x-2">
                      <Switch />
                      <span className="text-sm">Collaborator added</span>
                    </div>
                    <div className="flex items-center space-x-2">
                      <Switch />
                      <span className="text-sm">System maintenance</span>
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>

            {/* Test Notifications */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center space-x-2">
                  <TestTube className="h-5 w-5" />
                  <span>Test Notifications</span>
                </CardTitle>
                <CardDescription>
                  Test your notification settings to ensure they work correctly
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-6">
                <div className="space-y-4">
                  <div>
                    <Label>Test Email Alert</Label>
                    <Button
                      variant="outline"
                      className="w-full mt-2"
                      onClick={handleSendTestAlert}
                      disabled={sendTestAlertMutation.isPending}
                    >
                      {sendTestAlertMutation.isPending ? 'Sending...' : 'Send Test Email'}
                    </Button>
                    <p className="text-xs text-muted-foreground mt-1">
                      Send a test email to verify your email notifications are working
                    </p>
                  </div>

                  <Separator />

                  <div className="space-y-4">
                    <div>
                      <Label>Test In-App Notification</Label>
                      <div className="space-y-2">
                        <Select
                          value={testNotification.type}
                          onValueChange={(value) => setTestNotification(prev => ({ ...prev, type: value }))}
                        >
                          <SelectTrigger>
                            <SelectValue />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="system">System</SelectItem>
                            <SelectItem value="security">Security</SelectItem>
                            <SelectItem value="scan">Scan</SelectItem>
                            <SelectItem value="collaboration">Collaboration</SelectItem>
                          </SelectContent>
                        </Select>
                        <Textarea
                          value={testNotification.message}
                          onChange={(e) => setTestNotification(prev => ({ ...prev, message: e.target.value }))}
                          placeholder="Enter test notification message"
                          rows={2}
                        />
                        <Button
                          variant="outline"
                          className="w-full"
                          onClick={handleCreateTestNotification}
                          disabled={createTestNotificationMutation.isPending}
                        >
                          {createTestNotificationMutation.isPending ? 'Creating...' : 'Create Test Notification'}
                        </Button>
                      </div>
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>

          {/* Sidebar */}
          <div className="space-y-6">
            {/* Current Status */}
            <Card>
              <CardHeader>
                <CardTitle>Notification Status</CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="flex items-center justify-between">
                  <span className="text-sm">Email Notifications</span>
                  <Badge variant={alertConfig.emailNotifications ? "default" : "secondary"}>
                    {alertConfig.emailNotifications ? "Enabled" : "Disabled"}
                  </Badge>
                </div>
                
                <div className="flex items-center justify-between">
                  <span className="text-sm">Daily Digest</span>
                  <Badge variant={alertConfig.dailyDigest ? "default" : "secondary"}>
                    {alertConfig.dailyDigest ? "Enabled" : "Disabled"}
                  </Badge>
                </div>
                
                <div className="flex items-center justify-between">
                  <span className="text-sm">Security Alerts</span>
                  <Badge variant={alertConfig.securityAlerts ? "default" : "secondary"}>
                    {alertConfig.securityAlerts ? "Enabled" : "Disabled"}
                  </Badge>
                </div>
                
                <div className="flex items-center justify-between">
                  <span className="text-sm">Alert Frequency</span>
                  <Badge variant="outline">
                    {alertConfig.alertFrequency}
                  </Badge>
                </div>
              </CardContent>
            </Card>

            {/* Notification Types */}
            <Card>
              <CardHeader>
                <CardTitle>Notification Types</CardTitle>
              </CardHeader>
              <CardContent className="space-y-3">
                <div className="flex items-center space-x-3 p-2 border rounded-lg">
                  {getNotificationTypeIcon('security')}
                  <div>
                    <div className="font-medium text-sm">Security</div>
                    <div className="text-xs text-muted-foreground">Vulnerability alerts</div>
                  </div>
                </div>
                
                <div className="flex items-center space-x-3 p-2 border rounded-lg">
                  {getNotificationTypeIcon('scan')}
                  <div>
                    <div className="font-medium text-sm">Scan</div>
                    <div className="text-xs text-muted-foreground">Scan completion</div>
                  </div>
                </div>
                
                <div className="flex items-center space-x-3 p-2 border rounded-lg">
                  {getNotificationTypeIcon('system')}
                  <div>
                    <div className="font-medium text-sm">System</div>
                    <div className="text-xs text-muted-foreground">System updates</div>
                  </div>
                </div>
                
                <div className="flex items-center space-x-3 p-2 border rounded-lg">
                  {getNotificationTypeIcon('collaboration')}
                  <div>
                    <div className="font-medium text-sm">Collaboration</div>
                    <div className="text-xs text-muted-foreground">Team updates</div>
                  </div>
                </div>
              </CardContent>
            </Card>

            {/* Quick Actions */}
            <Card>
              <CardHeader>
                <CardTitle>Quick Actions</CardTitle>
              </CardHeader>
              <CardContent className="space-y-3">
                <Button variant="outline" className="w-full justify-start">
                  <Save className="mr-2 h-4 w-4" />
                  Save Configuration
                </Button>
                <Button variant="outline" className="w-full justify-start">
                  <RefreshCw className="mr-2 h-4 w-4" />
                  Reset to Defaults
                </Button>
                <Button variant="outline" className="w-full justify-start">
                  <TestTube className="mr-2 h-4 w-4" />
                  Test All Notifications
                </Button>
              </CardContent>
            </Card>

            {/* Help */}
            <Card>
              <CardHeader>
                <CardTitle>Need Help?</CardTitle>
              </CardHeader>
              <CardContent className="space-y-3">
                <div className="flex items-start space-x-2">
                  <Info className="h-4 w-4 text-blue-500 mt-0.5" />
                  <p className="text-sm">
                    Critical vulnerabilities are always notified immediately regardless of frequency settings.
                  </p>
                </div>
                <div className="flex items-start space-x-2">
                  <Info className="h-4 w-4 text-blue-500 mt-0.5" />
                  <p className="text-sm">
                    Daily digest includes all non-critical notifications from the past 24 hours.
                  </p>
                </div>
                <div className="flex items-start space-x-2">
                  <Info className="h-4 w-4 text-blue-500 mt-0.5" />
                  <p className="text-sm">
                    You can customize notification rules for different severity levels.
                  </p>
                </div>
              </CardContent>
            </Card>
          </div>
        </div>
      </div>
    </MainLayout>
  );
}
│   │   │   │   # --- End: AlertsConfig.tsx ---

│   │   │   │   ├─ Dashboard.tsx

│   │   │   │   # --- Begin: Dashboard.tsx ---
import { MainLayout } from '@/components/layout/main-layout';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { 
  Shield, 
  AlertTriangle, 
  TrendingUp, 
  Users, 
  Clock, 
  Plus,
  Eye,
  Download,
  Bell,
  CheckCircle,
  XCircle
} from 'lucide-react';
import { useNavigate } from 'react-router-dom';
import { useProjects, useNotifications, useUnreadCount } from '@/hooks/use-api';
import { useNotificationsRealtime } from '@/hooks/use-notifications-realtime';
import { useAuth } from '@/hooks/use-auth';
import type { Project } from '@/types';

export default function Dashboard() {
  const navigate = useNavigate();
  const { user } = useAuth();
  const { data: projects = [], isLoading: projectsLoading } = useProjects();
  const { data: notificationsResponse = { notifications: [] }, isLoading: notificationsLoading } = useNotifications({ limit: 5 });
  const notifications = notificationsResponse.notifications;
  const { data: unreadCount = 0 } = useUnreadCount();
  const { isConnected } = useNotificationsRealtime();

  // Calculate dashboard stats
  const totalProjects = projects.length;
  const totalVulnerabilities = projects.reduce((sum, project) => sum + (project.totalVulnerabilities || 0), 0);
  const criticalVulnerabilities = projects.reduce((sum, project) => {
    return sum + (project.dependencies?.reduce((depSum, dep) => 
      depSum + (dep.issues?.filter(issue => issue.severity === 'CRITICAL').length || 0), 0
    ) || 0);
  }, 0);
  
  const securityScore = totalProjects > 0 
    ? Math.max(0, 100 - (totalVulnerabilities * 5) - (criticalVulnerabilities * 20))
    : 100;

  const recentProjects = projects
    .sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime())
    .slice(0, 3);

  const getSecurityStatus = (project: Project) => {
    const criticalCount = project.dependencies?.reduce((total, dep) => 
      total + (dep.issues?.filter(issue => issue.severity === 'CRITICAL').length || 0), 0
    ) || 0;
    
    const highCount = project.dependencies?.reduce((total, dep) => 
      total + (dep.issues?.filter(issue => issue.severity === 'HIGH').length || 0), 0
    ) || 0;

    if (criticalCount > 0) return { status: 'Critical', color: 'destructive' as const };
    if (highCount > 0) return { status: 'High Risk', color: 'destructive' as const };
    if ((project.totalVulnerabilities || 0) > 0) return { status: 'Medium Risk', color: 'default' as const };
    return { status: 'Secure', color: 'secondary' as const };
  };

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString('en-US', {
      month: 'short',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  const getSeverityIcon = (severity: string) => {
    switch (severity) {
      case 'CRITICAL':
      case 'HIGH':
        return <AlertTriangle className="h-4 w-4 text-destructive" />;
      case 'MEDIUM':
        return <AlertTriangle className="h-4 w-4 text-orange-500" />;
      case 'LOW':
        return <AlertTriangle className="h-4 w-4 text-yellow-500" />;
      default:
        return <CheckCircle className="h-4 w-4 text-green-500" />;
    }
  };

  return (
    <MainLayout>
      <div className="space-y-6">
        {/* Welcome Header */}
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-3xl font-bold text-foreground">
              Welcome back, {user?.name || 'User'}!
            </h1>
            <p className="text-muted-foreground">
              Here's what's happening with your security projects
            </p>
          </div>
          <div className="flex items-center space-x-2">
            <Badge variant={isConnected ? "default" : "secondary"}>
              {isConnected ? "Connected" : "Disconnected"}
            </Badge>
            <Button onClick={() => navigate('/scan')}>
              <Plus className="mr-2 h-4 w-4" />
              New Scan
            </Button>
          </div>
        </div>

        {/* Stats Cards */}
        <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-4">
          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Total Projects</CardTitle>
              <Shield className="h-4 w-4 text-primary" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">{totalProjects}</div>
              <p className="text-xs text-muted-foreground">
                Active security projects
              </p>
            </CardContent>
          </Card>

          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Total Vulnerabilities</CardTitle>
              <AlertTriangle className="h-4 w-4 text-destructive" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold text-destructive">{totalVulnerabilities}</div>
              <p className="text-xs text-muted-foreground">
                Across all projects
              </p>
            </CardContent>
          </Card>

          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Critical Issues</CardTitle>
              <XCircle className="h-4 w-4 text-destructive" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold text-destructive">{criticalVulnerabilities}</div>
              <p className="text-xs text-muted-foreground">
                Require immediate attention
              </p>
            </CardContent>
          </Card>

          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Security Score</CardTitle>
              <TrendingUp className="h-4 w-4 text-primary" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">{securityScore}</div>
              <Progress value={securityScore} className="mt-2" />
              <p className="text-xs text-muted-foreground mt-1">
                Overall security health
              </p>
            </CardContent>
          </Card>
        </div>

        {/* Main Content Grid */}
        <div className="grid gap-6 lg:grid-cols-3">
          {/* Recent Projects */}
          <div className="lg:col-span-2 space-y-6">
            <Card>
              <CardHeader>
                <div className="flex items-center justify-between">
                  <div>
                    <CardTitle>Recent Projects</CardTitle>
                    <CardDescription>
                      Your latest security projects and their status
                    </CardDescription>
                  </div>
                  <Button variant="outline" size="sm" onClick={() => navigate('/projects')}>
                    View All
                  </Button>
                </div>
              </CardHeader>
              <CardContent>
                {projectsLoading ? (
                  <div className="space-y-4">
                    {[...Array(3)].map((_, i) => (
                      <div key={i} className="flex items-center space-x-4 animate-pulse">
                        <div className="h-10 w-10 bg-muted rounded"></div>
                        <div className="flex-1 space-y-2">
                          <div className="h-4 bg-muted rounded w-3/4"></div>
                          <div className="h-3 bg-muted rounded w-1/2"></div>
                        </div>
                      </div>
                    ))}
                  </div>
                ) : recentProjects.length === 0 ? (
                  <div className="text-center py-8">
                    <Shield className="h-12 w-12 text-muted-foreground mx-auto mb-4" />
                    <h3 className="text-lg font-semibold mb-2">No projects yet</h3>
                    <p className="text-muted-foreground mb-4">
                      Create your first project to start monitoring dependencies
                    </p>
                    <Button onClick={() => navigate('/projects')}>
                      <Plus className="mr-2 h-4 w-4" />
                      Create Project
                    </Button>
                  </div>
                ) : (
                  <div className="space-y-4">
                    {recentProjects.map((project) => {
                      const securityStatus = getSecurityStatus(project);
                      return (
                        <div key={project.id} className="flex items-center justify-between p-4 border rounded-lg hover:bg-muted/50 transition-colors">
                          <div className="flex items-center space-x-4">
                            <div className="p-2 bg-primary/10 rounded-lg">
                              <Shield className="h-5 w-5 text-primary" />
                            </div>
                            <div>
                              <h4 className="font-medium">{project.name}</h4>
                              <p className="text-sm text-muted-foreground">
                                {project.totalDependencies || 0} dependencies • {project.totalVulnerabilities || 0} vulnerabilities
                              </p>
                            </div>
                          </div>
                          <div className="flex items-center space-x-2">
                            <Badge variant={securityStatus.color}>
                              {securityStatus.status}
                            </Badge>
                            <Button
                              variant="ghost"
                              size="sm"
                              onClick={() => navigate(`/projects/${project.id}`)}
                            >
                              <Eye className="h-4 w-4" />
                            </Button>
                          </div>
                        </div>
                      );
                    })}
                  </div>
                )}
              </CardContent>
            </Card>

            {/* Quick Actions */}
            <Card>
              <CardHeader>
                <CardTitle>Quick Actions</CardTitle>
                <CardDescription>
                  Common tasks to keep your projects secure
                </CardDescription>
              </CardHeader>
              <CardContent>
                <div className="grid gap-4 md:grid-cols-2">
                  <Button
                    variant="outline"
                    className="h-auto p-4 flex flex-col items-start space-y-2"
                    onClick={() => navigate('/scan')}
                  >
                    <Shield className="h-5 w-5 text-primary" />
                    <div className="text-left">
                      <div className="font-medium">New Vulnerability Scan</div>
                      <div className="text-sm text-muted-foreground">Upload dependency files for analysis</div>
                    </div>
                  </Button>
                  
                  <Button
                    variant="outline"
                    className="h-auto p-4 flex flex-col items-start space-y-2"
                    onClick={() => navigate('/projects')}
                  >
                    <Plus className="h-5 w-5 text-primary" />
                    <div className="text-left">
                      <div className="font-medium">Create New Project</div>
                      <div className="text-sm text-muted-foreground">Set up a new security project</div>
                    </div>
                  </Button>
                  
                  <Button
                    variant="outline"
                    className="h-auto p-4 flex flex-col items-start space-y-2"
                    onClick={() => navigate('/notifications')}
                  >
                    <Bell className="h-5 w-5 text-primary" />
                    <div className="text-left">
                      <div className="font-medium">View Notifications</div>
                      <div className="text-sm text-muted-foreground">
                        {unreadCount > 0 ? `${unreadCount} unread` : 'All caught up'}
                      </div>
                    </div>
                  </Button>
                  
                  <Button
                    variant="outline"
                    className="h-auto p-4 flex flex-col items-start space-y-2"
                    onClick={() => navigate('/alerts-config')}
                  >
                    <Download className="h-5 w-5 text-primary" />
                    <div className="text-left">
                      <div className="font-medium">Export Reports</div>
                      <div className="text-sm text-muted-foreground">Generate security reports</div>
                    </div>
                  </Button>
                </div>
              </CardContent>
            </Card>
          </div>

          {/* Sidebar */}
          <div className="space-y-6">
            {/* Recent Notifications */}
            <Card>
              <CardHeader>
                <div className="flex items-center justify-between">
                  <CardTitle>Recent Notifications</CardTitle>
                  <Button variant="outline" size="sm" onClick={() => navigate('/notifications')}>
                    View All
                  </Button>
                </div>
              </CardHeader>
              <CardContent>
                {notificationsLoading ? (
                  <div className="space-y-3">
                    {[...Array(3)].map((_, i) => (
                      <div key={i} className="animate-pulse">
                        <div className="h-4 bg-muted rounded w-full mb-2"></div>
                        <div className="h-3 bg-muted rounded w-2/3"></div>
                      </div>
                    ))}
                  </div>
                ) : notifications.length === 0 ? (
                  <div className="text-center py-4">
                    <CheckCircle className="h-8 w-8 text-green-500 mx-auto mb-2" />
                    <p className="text-sm text-muted-foreground">All caught up!</p>
                  </div>
                ) : (
                  <div className="space-y-3">
                    {notifications.slice(0, 5).map((notification) => (
                      <div key={notification.id} className="flex items-start space-x-3 p-3 border rounded-lg hover:bg-muted/50 transition-colors">
                        <div className="flex-shrink-0 mt-1">
                          {getSeverityIcon(notification.type as any)}
                        </div>
                        <div className="flex-1 min-w-0">
                          <p className="text-sm font-medium line-clamp-2">
                            {notification.message}
                          </p>
                          <div className="flex items-center space-x-2 mt-1">
                            <Badge variant="outline" className="text-xs">
                              {notification.type}
                            </Badge>
                            <span className="text-xs text-muted-foreground">
                              {formatDate(notification.createdAt)}
                            </span>
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                )}
              </CardContent>
            </Card>

            {/* Security Alerts */}
            {criticalVulnerabilities > 0 && (
              <Alert variant="destructive">
                <AlertTriangle className="h-4 w-4" />
                <AlertDescription>
                  <strong>{criticalVulnerabilities} critical vulnerabilities</strong> detected across your projects. 
                  <Button
                    variant="link"
                    className="p-0 h-auto text-destructive-foreground underline"
                    onClick={() => navigate('/vulnerabilities')}
                  >
                    Review now
                  </Button>
                </AlertDescription>
              </Alert>
            )}

            {/* System Status */}
            <Card>
              <CardHeader>
                <CardTitle>System Status</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-3">
                  <div className="flex items-center justify-between">
                    <span className="text-sm">API Connection</span>
                    <Badge variant={isConnected ? "default" : "secondary"}>
                      {isConnected ? "Connected" : "Disconnected"}
                    </Badge>
                  </div>
                  <div className="flex items-center justify-between">
                    <span className="text-sm">Real-time Updates</span>
                    <Badge variant={isConnected ? "default" : "secondary"}>
                      {isConnected ? "Active" : "Inactive"}
                    </Badge>
                  </div>
                  <div className="flex items-center justify-between">
                    <span className="text-sm">Last Scan</span>
                    <span className="text-sm text-muted-foreground">
                      {projects.length > 0 ? formatDate(projects[0].createdAt) : 'Never'}
                    </span>
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>
        </div>
      </div>
    </MainLayout>
  );
}
│   │   │   │   # --- End: Dashboard.tsx ---

│   │   │   │   ├─ ForgotPassword.tsx

│   │   │   │   # --- Begin: ForgotPassword.tsx ---
import { useState } from 'react';
import { MainLayout } from '@/components/layout/main-layout';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Button } from '@/components/ui/button';
import { useToast } from '@/hooks/use-toast';
import { apiClient } from '@/lib/api';

export default function ForgotPassword() {
  const [email, setEmail] = useState('');
  const [loading, setLoading] = useState(false);
  const [sent, setSent] = useState(false);
  const { toast } = useToast();

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);
    try {
      await apiClient.forgotPassword(email);
      setSent(true);
      toast({ title: 'Check your email', description: 'If that email exists, a reset link will be sent.' });
    } catch (error) {
      toast({ title: 'Error', description: 'Failed to send reset email', variant: 'destructive' });
    } finally {
      setLoading(false);
    }
  };

  return (
    <MainLayout>
      <div className="max-w-md mx-auto py-8">
        <Card className="bg-gradient-card border-security">
          <CardHeader>
            <CardTitle className="text-foreground">Forgot Password</CardTitle>
          </CardHeader>
          <CardContent>
            {sent ? (
              <div className="py-8 text-center">If that email exists, a reset link will be sent.</div>
            ) : (
              <form onSubmit={handleSubmit} className="space-y-4">
                <div>
                  <label className="block text-sm font-medium mb-1">Email</label>
                  <Input
                    type="email"
                    value={email}
                    onChange={e => setEmail(e.target.value)}
                    required
                    disabled={loading}
                  />
                </div>
                <Button type="submit" disabled={loading || !email}>
                  {loading ? 'Sending...' : 'Send Reset Link'}
                </Button>
              </form>
            )}
          </CardContent>
        </Card>
      </div>
    </MainLayout>
  );
}
│   │   │   │   # --- End: ForgotPassword.tsx ---

│   │   │   │   ├─ Index.tsx

│   │   │   │   # --- Begin: Index.tsx ---
// Update this page (the content is just a fallback if you fail to update the page)

const Index = () => {
  return (
    <div className="min-h-screen flex items-center justify-center bg-background">
      <div className="text-center">
        <h1 className="text-4xl font-bold mb-4">Welcome to Your Blank App</h1>
        <p className="text-xl text-muted-foreground">Start building your amazing project here!</p>
      </div>
    </div>
  );
};

export default Index;

│   │   │   │   # --- End: Index.tsx ---

│   │   │   │   ├─ Landing.tsx

│   │   │   │   # --- Begin: Landing.tsx ---
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { 
  Shield, 
  Zap, 
  Bell, 
  Users, 
  TrendingUp, 
  CheckCircle,
  ArrowRight,
  Star,
  Github,
  Lock,
  Eye,
  AlertTriangle
} from "lucide-react";
import { Link } from "react-router-dom";
import heroImage from "@/assets/hero-bg.jpg";

const features = [
  {
    icon: Shield,
    title: "Real-time Vulnerability Detection",
    description: "Automatically scan your dependencies and get instant alerts about security vulnerabilities."
  },
  {
    icon: Zap,
    title: "Lightning Fast Scanning",
    description: "Scan thousands of dependencies in seconds with our optimized vulnerability database."
  },
  {
    icon: Bell,
    title: "Smart Notifications",
    description: "Get notified via email, Slack, or webhooks when new vulnerabilities are discovered."
  },
  {
    icon: Users,
    title: "Team Collaboration",
    description: "Share projects with your team and collaborate on vulnerability remediation."
  },
  {
    icon: TrendingUp,
    title: "Security Analytics",
    description: "Track your security posture over time with detailed analytics and reporting."
  },
  {
    icon: Eye,
    title: "Continuous Monitoring",
    description: "24/7 monitoring ensures you're always aware of new threats to your applications."
  }
];

const supportedFiles = [
  { name: "package.json", ecosystem: "Node.js" },
  { name: "requirements.txt", ecosystem: "Python" },
  { name: "pom.xml", ecosystem: "Java/Maven" },
  { name: "Gemfile", ecosystem: "Ruby" },
  { name: "composer.json", ecosystem: "PHP" },
  { name: "go.mod", ecosystem: "Go" }
];

const stats = [
  { value: "10K+", label: "Projects Secured" },
  { value: "1M+", label: "Vulnerabilities Detected" },
  { value: "99.9%", label: "Uptime" },
  { value: "24/7", label: "Monitoring" }
];

export default function Landing() {
  return (
    <div className="min-h-screen bg-background">
      {/* Navigation */}
      <nav className="border-b border-security bg-gradient-card/50 backdrop-blur-sm sticky top-0 z-50">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center h-16">
            <div className="flex items-center space-x-2">
              <div className="flex h-8 w-8 items-center justify-center rounded-lg bg-gradient-primary">
                <Shield className="h-5 w-5 text-primary-foreground" />
              </div>
              <span className="text-xl font-bold text-security">VulnWatch</span>
            </div>
            
            <div className="hidden md:flex items-center space-x-8">
              <a href="#features" className="text-muted-foreground hover:text-primary transition-smooth">
                Features
              </a>
              <a href="#pricing" className="text-muted-foreground hover:text-primary transition-smooth">
                Pricing
              </a>
              <a href="#docs" className="text-muted-foreground hover:text-primary transition-smooth">
                Docs
              </a>
            </div>

            <div className="flex items-center space-x-4">
              <Link to="/login">
                <Button variant="ghost">Sign In</Button>
              </Link>
              <Link to="/register">
                <Button className="shadow-security">Get Started</Button>
              </Link>
            </div>
          </div>
        </div>
      </nav>

      {/* Hero Section */}
      <section className="relative overflow-hidden">
        <div 
          className="absolute inset-0 opacity-10"
          style={{
            backgroundImage: `url(${heroImage})`,
            backgroundSize: 'cover',
            backgroundPosition: 'center'
          }}
        />
        <div className="absolute inset-0 bg-gradient-hero/90" />
        
        <div className="relative max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-24 lg:py-32">
          <div className="text-center">
            <Badge variant="outline" className="mb-6 bg-primary/10 text-primary border-primary">
              🚀 Now with real-time monitoring
            </Badge>
            
            <h1 className="text-4xl md:text-6xl lg:text-7xl font-bold text-foreground mb-6">
              Secure Your Applications
              <span className="block text-transparent bg-gradient-primary bg-clip-text">
                Before Threats Strike
              </span>
            </h1>
            
            <p className="text-xl md:text-2xl text-muted-foreground mb-8 max-w-3xl mx-auto">
              VulnWatch monitors your dependencies 24/7, alerting you instantly about security vulnerabilities 
              so you can fix them before they become problems.
            </p>

            <div className="flex flex-col sm:flex-row gap-4 justify-center items-center mb-12">
              <Link to="/register">
                <Button size="lg" className="shadow-security text-lg px-8 py-6">
                  Start Free Trial
                  <ArrowRight className="ml-2 h-5 w-5" />
                </Button>
              </Link>
              <Link to="/login">
                <Button variant="outline" size="lg" className="text-lg px-8 py-6">
                  <Github className="mr-2 h-5 w-5" />
                  View Demo
                </Button>
              </Link>
            </div>

            {/* Stats */}
            <div className="grid grid-cols-2 md:grid-cols-4 gap-8 max-w-4xl mx-auto">
              {stats.map((stat, index) => (
                <div key={index} className="text-center">
                  <div className="text-3xl md:text-4xl font-bold text-primary mb-2">
                    {stat.value}
                  </div>
                  <div className="text-sm text-muted-foreground">
                    {stat.label}
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>
      </section>

      {/* Features Section */}
      <section id="features" className="py-24 bg-muted/20">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="text-center mb-16">
            <h2 className="text-3xl md:text-4xl font-bold text-foreground mb-4">
              Comprehensive Security Monitoring
            </h2>
            <p className="text-xl text-muted-foreground max-w-3xl mx-auto">
              Everything you need to keep your applications secure, from dependency scanning 
              to real-time threat intelligence.
            </p>
          </div>

          <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-8">
            {features.map((feature, index) => (
              <Card key={index} className="bg-gradient-card border-security transition-smooth hover:shadow-glow">
                <CardHeader>
                  <div className="flex h-12 w-12 items-center justify-center rounded-lg bg-primary/10 mb-4">
                    <feature.icon className="h-6 w-6 text-primary" />
                  </div>
                  <CardTitle className="text-xl text-foreground">{feature.title}</CardTitle>
                </CardHeader>
                <CardContent>
                  <CardDescription className="text-muted-foreground">
                    {feature.description}
                  </CardDescription>
                </CardContent>
              </Card>
            ))}
          </div>
        </div>
      </section>

      {/* Supported Files Section */}
      <section className="py-24">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="text-center mb-16">
            <h2 className="text-3xl md:text-4xl font-bold text-foreground mb-4">
              Universal Language Support
            </h2>
            <p className="text-xl text-muted-foreground">
              Scan dependencies from any ecosystem
            </p>
          </div>

          <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-4">
            {supportedFiles.map((file, index) => (
              <Card key={index} className="bg-gradient-card border-security text-center p-6 transition-smooth hover:shadow-glow">
                <div className="text-lg font-semibold text-foreground mb-2">
                  {file.name}
                </div>
                <div className="text-sm text-muted-foreground">
                  {file.ecosystem}
                </div>
              </Card>
            ))}
          </div>
        </div>
      </section>

      {/* Security Section */}
      <section className="py-24 bg-muted/20">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="grid lg:grid-cols-2 gap-12 items-center">
            <div>
              <Badge variant="outline" className="mb-4 bg-success/10 text-success border-success">
                Enterprise Security
              </Badge>
              <h2 className="text-3xl md:text-4xl font-bold text-foreground mb-6">
                Built with Security in Mind
              </h2>
              <p className="text-xl text-muted-foreground mb-8">
                Your code and data are protected with enterprise-grade security measures. 
                We never store your source code, only dependency metadata.
              </p>
              
              <div className="space-y-4">
                <div className="flex items-center space-x-3">
                  <CheckCircle className="h-5 w-5 text-success" />
                  <span className="text-foreground">End-to-end encryption</span>
                </div>
                <div className="flex items-center space-x-3">
                  <CheckCircle className="h-5 w-5 text-success" />
                  <span className="text-foreground">SOC 2 Type II compliance</span>
                </div>
                <div className="flex items-center space-x-3">
                  <CheckCircle className="h-5 w-5 text-success" />
                  <span className="text-foreground">Zero source code storage</span>
                </div>
                <div className="flex items-center space-x-3">
                  <CheckCircle className="h-5 w-5 text-success" />
                  <span className="text-foreground">Regular security audits</span>
                </div>
              </div>
            </div>
            
            <div className="relative">
              <Card className="bg-gradient-card border-security p-8">
                <div className="flex items-center space-x-3 mb-6">
                  <Lock className="h-6 w-6 text-primary" />
                  <span className="text-lg font-semibold text-foreground">Security Dashboard</span>
                </div>
                
                <div className="space-y-4">
                  <div className="flex items-center justify-between p-3 bg-critical/10 border border-critical/20 rounded-lg">
                    <div className="flex items-center space-x-3">
                      <AlertTriangle className="h-4 w-4 text-critical" />
                      <span className="text-sm text-foreground">CVE-2024-1234</span>
                    </div>
                    <Badge variant="outline" className="bg-critical text-critical-foreground border-critical">
                      CRITICAL
                    </Badge>
                  </div>
                  
                  <div className="flex items-center justify-between p-3 bg-high/10 border border-high/20 rounded-lg">
                    <div className="flex items-center space-x-3">
                      <AlertTriangle className="h-4 w-4 text-high" />
                      <span className="text-sm text-foreground">CVE-2024-5678</span>
                    </div>
                    <Badge variant="outline" className="bg-high text-high-foreground border-high">
                      HIGH
                    </Badge>
                  </div>
                  
                  <div className="flex items-center justify-between p-3 bg-success/10 border border-success/20 rounded-lg">
                    <div className="flex items-center space-x-3">
                      <CheckCircle className="h-4 w-4 text-success" />
                      <span className="text-sm text-foreground">No vulnerabilities found</span>
                    </div>
                    <Badge variant="outline" className="bg-success text-success-foreground border-success">
                      SECURE
                    </Badge>
                  </div>
                </div>
              </Card>
            </div>
          </div>
        </div>
      </section>

      {/* CTA Section */}
      <section className="py-24">
        <div className="max-w-4xl mx-auto text-center px-4 sm:px-6 lg:px-8">
          <h2 className="text-3xl md:text-4xl font-bold text-foreground mb-6">
            Start Securing Your Applications Today
          </h2>
          <p className="text-xl text-muted-foreground mb-8">
            Join thousands of developers who trust VulnWatch to keep their applications secure.
          </p>
          
          <div className="flex flex-col sm:flex-row gap-4 justify-center">
            <Link to="/register">
              <Button size="lg" className="shadow-security text-lg px-8 py-6">
                Start Free Trial
                <ArrowRight className="ml-2 h-5 w-5" />
              </Button>
            </Link>
            <Link to="/login">
              <Button variant="outline" size="lg" className="text-lg px-8 py-6">
                Sign In
              </Button>
            </Link>
          </div>
        </div>
      </section>

      {/* Footer */}
      <footer className="border-t border-security bg-gradient-card/50">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
          <div className="grid md:grid-cols-4 gap-8">
            <div>
              <div className="flex items-center space-x-2 mb-4">
                <div className="flex h-8 w-8 items-center justify-center rounded-lg bg-gradient-primary">
                  <Shield className="h-5 w-5 text-primary-foreground" />
                </div>
                <span className="text-xl font-bold text-security">VulnWatch</span>
              </div>
              <p className="text-muted-foreground">
                Keeping your applications secure with real-time vulnerability monitoring.
              </p>
            </div>
            
            <div>
              <h3 className="font-semibold text-foreground mb-4">Product</h3>
              <div className="space-y-2">
                <a href="#" className="block text-muted-foreground hover:text-primary transition-smooth">Features</a>
                <a href="#" className="block text-muted-foreground hover:text-primary transition-smooth">Pricing</a>
                <a href="#" className="block text-muted-foreground hover:text-primary transition-smooth">Security</a>
              </div>
            </div>
            
            <div>
              <h3 className="font-semibold text-foreground mb-4">Support</h3>
              <div className="space-y-2">
                <a href="#" className="block text-muted-foreground hover:text-primary transition-smooth">Documentation</a>
                <a href="#" className="block text-muted-foreground hover:text-primary transition-smooth">API Reference</a>
                <a href="#" className="block text-muted-foreground hover:text-primary transition-smooth">Contact</a>
              </div>
            </div>
            
            <div>
              <h3 className="font-semibold text-foreground mb-4">Company</h3>
              <div className="space-y-2">
                <a href="#" className="block text-muted-foreground hover:text-primary transition-smooth">About</a>
                <a href="#" className="block text-muted-foreground hover:text-primary transition-smooth">Blog</a>
                <a href="#" className="block text-muted-foreground hover:text-primary transition-smooth">Careers</a>
              </div>
            </div>
          </div>
          
          <div className="border-t border-security mt-8 pt-8 text-center text-muted-foreground">
            <p>&copy; 2024 VulnWatch. All rights reserved.</p>
          </div>
        </div>
      </footer>
    </div>
  );
}
│   │   │   │   # --- End: Landing.tsx ---

│   │   │   │   ├─ Login.tsx

│   │   │   │   # --- Begin: Login.tsx ---
import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { Shield, Eye, EyeOff, Mail, Lock } from "lucide-react";
import { Link, useNavigate } from "react-router-dom";
import { useAuth } from "@/hooks/use-auth";
import heroImage from "@/assets/hero-bg.jpg";

export default function Login() {
  const { login } = useAuth();
  const navigate = useNavigate();
  const [showPassword, setShowPassword] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState("");
  const [formData, setFormData] = useState({
    email: "",
    password: ""
  });

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsLoading(true);
    setError("");

    try {
      const success = await login(formData.email, formData.password);
      if (success) {
        navigate("/dashboard");
      } else {
        setError("Invalid email or password");
      }
    } catch (err) {
      setError("Login failed. Please try again.");
    } finally {
      setIsLoading(false);
    }
  };

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setFormData(prev => ({
      ...prev,
      [e.target.name]: e.target.value
    }));
  };

  return (
    <div className="min-h-screen bg-background">
      <div className="flex min-h-screen">
        {/* Left side - Hero */}
        <div className="hidden lg:flex lg:flex-1 relative">
          <div 
            className="absolute inset-0 bg-gradient-hero"
            style={{
              backgroundImage: `url(${heroImage})`,
              backgroundSize: 'cover',
              backgroundPosition: 'center'
            }}
          />
          <div className="absolute inset-0 bg-gradient-hero/90" />
          
          <div className="relative flex flex-col justify-center px-12 text-center">
            <div className="mx-auto mb-8">
              <div className="flex h-16 w-16 items-center justify-center rounded-2xl bg-gradient-primary shadow-glow">
                <Shield className="h-8 w-8 text-primary-foreground" />
              </div>
            </div>
            
            <h1 className="text-4xl font-bold text-foreground mb-4">
              Secure Your Applications
            </h1>
            <p className="text-xl text-muted-foreground mb-8 max-w-md mx-auto">
              VulnWatch helps you monitor and secure your dependencies with real-time vulnerability detection.
            </p>
            
            <div className="grid grid-cols-3 gap-4 max-w-sm mx-auto text-center">
              <div>
                <div className="text-2xl font-bold text-primary">10K+</div>
                <div className="text-sm text-muted-foreground">Projects Secured</div>
              </div>
              <div>
                <div className="text-2xl font-bold text-primary">99.9%</div>
                <div className="text-sm text-muted-foreground">Uptime</div>
              </div>
              <div>
                <div className="text-2xl font-bold text-primary">24/7</div>
                <div className="text-sm text-muted-foreground">Monitoring</div>
              </div>
            </div>
          </div>
        </div>

        {/* Right side - Login Form */}
        <div className="flex flex-1 flex-col justify-center py-12 px-4 sm:px-6 lg:flex-none lg:px-20 xl:px-24">
          <div className="mx-auto w-full max-w-sm lg:w-96">
            <div className="mb-8">
              <div className="flex items-center space-x-2 lg:hidden mb-6">
                <div className="flex h-10 w-10 items-center justify-center rounded-lg bg-gradient-primary">
                  <Shield className="h-6 w-6 text-primary-foreground" />
                </div>
                <span className="text-2xl font-bold text-security">VulnWatch</span>
              </div>
              
              <h2 className="text-3xl font-bold text-foreground">
                Welcome back
              </h2>
              <p className="mt-2 text-sm text-muted-foreground">
                Sign in to your account to continue monitoring your projects.
              </p>
            </div>

            <Card className="bg-gradient-card border-security shadow-security">
              <CardHeader className="space-y-1">
                <CardTitle className="text-2xl text-center text-foreground">Sign In</CardTitle>
                <CardDescription className="text-center text-muted-foreground">
                  Enter your credentials to access your dashboard
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                {error && (
                  <Alert variant="destructive">
                    <AlertDescription>{error}</AlertDescription>
                  </Alert>
                )}

                <form onSubmit={handleSubmit} className="space-y-4">
                  <div className="space-y-2">
                    <Label htmlFor="email" className="text-foreground">Email</Label>
                    <div className="relative">
                      <Mail className="absolute left-3 top-3 h-4 w-4 text-muted-foreground" />
                      <Input
                        id="email"
                        name="email"
                        type="email"
                        value={formData.email}
                        onChange={handleChange}
                        placeholder="Enter your email"
                        className="pl-10 bg-background border-security"
                        required
                      />
                    </div>
                  </div>

                  <div className="space-y-2">
                    <Label htmlFor="password" className="text-foreground">Password</Label>
                    <div className="relative">
                      <Lock className="absolute left-3 top-3 h-4 w-4 text-muted-foreground" />
                      <Input
                        id="password"
                        name="password"
                        type={showPassword ? "text" : "password"}
                        value={formData.password}
                        onChange={handleChange}
                        placeholder="Enter your password"
                        className="pl-10 pr-10 bg-background border-security"
                        required
                      />
                      <Button
                        type="button"
                        variant="ghost"
                        size="sm"
                        className="absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent"
                        onClick={() => setShowPassword(!showPassword)}
                      >
                        {showPassword ? (
                          <EyeOff className="h-4 w-4 text-muted-foreground" />
                        ) : (
                          <Eye className="h-4 w-4 text-muted-foreground" />
                        )}
                      </Button>
                    </div>
                  </div>

                  <div className="flex items-center justify-between">
                    <Link 
                      to="/forgot-password" 
                      className="text-sm text-security hover:text-primary-glow transition-smooth"
                    >
                      Forgot password?
                    </Link>
                  </div>

                  <Button 
                    type="submit" 
                    className="w-full shadow-security" 
                    disabled={isLoading}
                  >
                    {isLoading ? "Signing in..." : "Sign In"}
                  </Button>

                  <div className="text-center text-sm text-muted-foreground">
                    Don't have an account?{" "}
                    <Link 
                      to="/register" 
                      className="text-security hover:text-primary-glow transition-smooth font-medium"
                    >
                      Sign up
                    </Link>
                  </div>
                </form>
              </CardContent>
            </Card>
          </div>
        </div>
      </div>
    </div>
  );
}
│   │   │   │   # --- End: Login.tsx ---

│   │   │   │   ├─ NotFound.tsx

│   │   │   │   # --- Begin: NotFound.tsx ---
import { useLocation } from "react-router-dom";
import { useEffect } from "react";

const NotFound = () => {
  const location = useLocation();

  useEffect(() => {
    console.error(
      "404 Error: User attempted to access non-existent route:",
      location.pathname
    );
  }, [location.pathname]);

  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-100">
      <div className="text-center">
        <h1 className="text-4xl font-bold mb-4">404</h1>
        <p className="text-xl text-gray-600 mb-4">Oops! Page not found</p>
        <a href="/" className="text-blue-500 hover:text-blue-700 underline">
          Return to Home
        </a>
      </div>
    </div>
  );
};

export default NotFound;

│   │   │   │   # --- End: NotFound.tsx ---

│   │   │   │   ├─ Notifications.tsx

│   │   │   │   # --- Begin: Notifications.tsx ---
import { useState } from 'react';
import { MainLayout } from '@/components/layout/main-layout';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Input } from '@/components/ui/input';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Separator } from '@/components/ui/separator';
import { 
  Bell, 
  Search, 
  Filter, 
  Check, 
  CheckCheck, 
  AlertTriangle,
  Shield,
  Settings,
  RefreshCw,
  Clock,
  Eye,
  Trash2,
  Archive,
  Mail,
  Info
} from 'lucide-react';
import { useNotifications, useMarkAsRead, useMarkAllAsRead } from '@/hooks/use-api';
import { useNotificationsRealtime } from '@/hooks/use-notifications-realtime';
import type { Notification, NotificationType } from '@/types';

export default function Notifications() {
  const [searchQuery, setSearchQuery] = useState('');
  const [selectedType, setSelectedType] = useState<string>('all');
  const [showRead, setShowRead] = useState(true);
  
  const { data: notificationsData, isLoading, error } = useNotifications({ limit: 50 });
  const markAsReadMutation = useMarkAsRead();
  const markAllAsReadMutation = useMarkAllAsRead();
  const { isConnected } = useNotificationsRealtime();

  const notifications = notificationsData?.notifications || [];
  const pagination = notificationsData?.pagination;

  // Filter notifications based on search and filters
  const filteredNotifications = notifications.filter(notification => {
    const matchesSearch = notification.message.toLowerCase().includes(searchQuery.toLowerCase());
    const matchesType = selectedType === 'all' || notification.type === selectedType;
    const matchesReadStatus = showRead || !notification.read;
    
    return matchesSearch && matchesType && matchesReadStatus;
  });

  const unreadNotifications = notifications.filter(n => !n.read);
  const readNotifications = notifications.filter(n => n.read);

  const handleMarkAsRead = async (notificationId: number) => {
    try {
      await markAsReadMutation.mutateAsync(notificationId);
    } catch (error) {
      // Error is handled by the mutation hook
    }
  };

  const handleMarkAllAsRead = async () => {
    try {
      await markAllAsReadMutation.mutateAsync();
    } catch (error) {
      // Error is handled by the mutation hook
    }
  };

  const getNotificationIcon = (type: NotificationType) => {
    switch (type) {
      case 'security':
        return <Shield className="h-4 w-4 text-destructive" />;
      case 'scan':
        return <RefreshCw className="h-4 w-4 text-blue-500" />;
      case 'system':
        return <Settings className="h-4 w-4 text-gray-500" />;
      case 'collaboration':
        return <Bell className="h-4 w-4 text-green-500" />;
      default:
        return <Info className="h-4 w-4 text-muted-foreground" />;
    }
  };

  const getNotificationColor = (type: NotificationType) => {
    switch (type) {
      case 'security':
        return 'border-l-destructive bg-destructive/5';
      case 'scan':
        return 'border-l-blue-500 bg-blue-50';
      case 'system':
        return 'border-l-gray-500 bg-gray-50';
      case 'collaboration':
        return 'border-l-green-500 bg-green-50';
      default:
        return 'border-l-muted bg-muted/50';
    }
  };

  const formatDate = (dateString: string) => {
    const date = new Date(dateString);
    const now = new Date();
    const diffInHours = Math.floor((now.getTime() - date.getTime()) / (1000 * 60 * 60));
    
    if (diffInHours < 1) {
      return 'Just now';
    } else if (diffInHours < 24) {
      return `${diffInHours}h ago`;
    } else if (diffInHours < 168) {
      const days = Math.floor(diffInHours / 24);
      return `${days}d ago`;
    } else {
      return date.toLocaleDateString('en-US', {
        month: 'short',
        day: 'numeric',
        year: 'numeric'
      });
    }
  };

  if (error) {
    return (
      <MainLayout>
        <Alert variant="destructive">
          <AlertTriangle className="h-4 w-4" />
          <AlertDescription>
            Failed to load notifications. Please try again later.
          </AlertDescription>
        </Alert>
      </MainLayout>
    );
  }

  return (
    <MainLayout>
      <div className="space-y-6">
        {/* Header */}
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-3xl font-bold text-foreground">Notifications</h1>
            <p className="text-muted-foreground">
              Stay updated with security alerts and system notifications
            </p>
          </div>
          <div className="flex items-center space-x-2">
            <Badge variant={isConnected ? "default" : "secondary"}>
              {isConnected ? "Connected" : "Disconnected"}
            </Badge>
            {unreadNotifications.length > 0 && (
              <Badge variant="destructive">
                {unreadNotifications.length} unread
              </Badge>
            )}
          </div>
        </div>

        {/* Stats Cards */}
        <div className="grid gap-4 md:grid-cols-4">
          <Card>
            <CardContent className="p-4">
              <div className="flex items-center space-x-2">
                <Bell className="h-4 w-4 text-primary" />
                <div>
                  <div className="text-2xl font-bold">{notifications.length}</div>
                  <div className="text-sm text-muted-foreground">Total</div>
                </div>
              </div>
            </CardContent>
          </Card>
          
          <Card>
            <CardContent className="p-4">
              <div className="flex items-center space-x-2">
                <AlertTriangle className="h-4 w-4 text-destructive" />
                <div>
                  <div className="text-2xl font-bold text-destructive">
                    {notifications.filter(n => n.type === 'security').length}
                  </div>
                  <div className="text-sm text-muted-foreground">Security</div>
                </div>
              </div>
            </CardContent>
          </Card>
          
          <Card>
            <CardContent className="p-4">
              <div className="flex items-center space-x-2">
                <RefreshCw className="h-4 w-4 text-blue-500" />
                <div>
                  <div className="text-2xl font-bold text-blue-500">
                    {notifications.filter(n => n.type === 'scan').length}
                  </div>
                  <div className="text-sm text-muted-foreground">Scans</div>
                </div>
              </div>
            </CardContent>
          </Card>
          
          <Card>
            <CardContent className="p-4">
              <div className="flex items-center space-x-2">
                <Check className="h-4 w-4 text-green-500" />
                <div>
                  <div className="text-2xl font-bold text-green-500">{readNotifications.length}</div>
                  <div className="text-sm text-muted-foreground">Read</div>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>

        {/* Filters and Actions */}
        <Card>
          <CardContent className="p-4">
            <div className="flex flex-col sm:flex-row gap-4">
              <div className="relative flex-1">
                <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground" />
                <Input
                  placeholder="Search notifications..."
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                  className="pl-10"
                />
              </div>
              
              <Select value={selectedType} onValueChange={setSelectedType}>
                <SelectTrigger className="w-full sm:w-48">
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">All Types</SelectItem>
                  <SelectItem value="security">Security</SelectItem>
                  <SelectItem value="scan">Scan</SelectItem>
                  <SelectItem value="system">System</SelectItem>
                  <SelectItem value="collaboration">Collaboration</SelectItem>
                </SelectContent>
              </Select>
              
              <div className="flex items-center space-x-2">
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => setShowRead(!showRead)}
                >
                  {showRead ? 'Hide Read' : 'Show Read'}
                </Button>
                
                {unreadNotifications.length > 0 && (
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={handleMarkAllAsRead}
                    disabled={markAllAsReadMutation.isPending}
                  >
                    {markAllAsReadMutation.isPending ? 'Marking...' : 'Mark All Read'}
                  </Button>
                )}
              </div>
            </div>
          </CardContent>
        </Card>

        {/* Notifications List */}
        <Card>
          <CardHeader>
            <CardTitle>Recent Notifications</CardTitle>
            <CardDescription>
              {filteredNotifications.length} notification{filteredNotifications.length !== 1 ? 's' : ''} found
            </CardDescription>
          </CardHeader>
          <CardContent>
            {isLoading ? (
              <div className="space-y-4">
                {[...Array(5)].map((_, i) => (
                  <div key={i} className="animate-pulse">
                    <div className="h-4 bg-muted rounded w-3/4 mb-2"></div>
                    <div className="h-3 bg-muted rounded w-1/2"></div>
                  </div>
                ))}
              </div>
            ) : filteredNotifications.length === 0 ? (
              <div className="text-center py-8">
                <Bell className="h-12 w-12 text-muted-foreground mx-auto mb-4" />
                <h3 className="text-lg font-semibold mb-2">No notifications found</h3>
                <p className="text-muted-foreground">
                  {searchQuery || selectedType !== 'all' || !showRead 
                    ? 'Try adjusting your filters.' 
                    : 'You\'re all caught up!'}
                </p>
              </div>
            ) : (
              <div className="space-y-4">
                {filteredNotifications.map((notification) => (
                  <div
                    key={notification.id}
                    className={`p-4 border rounded-lg transition-colors hover:bg-muted/50 ${
                      notification.read ? 'opacity-75' : ''
                    } ${getNotificationColor(notification.type)}`}
                  >
                    <div className="flex items-start justify-between">
                      <div className="flex items-start space-x-3 flex-1">
                        <div className="flex-shrink-0 mt-1">
                          {getNotificationIcon(notification.type)}
                        </div>
                        
                        <div className="flex-1 min-w-0">
                          <div className="flex items-center space-x-2 mb-1">
                            <p className={`font-medium ${notification.read ? 'text-muted-foreground' : 'text-foreground'}`}>
                              {notification.message}
                            </p>
                            {!notification.read && (
                              <Badge variant="default" className="text-xs">
                                New
                              </Badge>
                            )}
                          </div>
                          
                          <div className="flex items-center space-x-4 text-xs text-muted-foreground">
                            <div className="flex items-center space-x-1">
                              <Badge variant="outline" className="text-xs">
                                {notification.type}
                              </Badge>
                            </div>
                            <div className="flex items-center space-x-1">
                              <Clock className="h-3 w-3" />
                              <span>{formatDate(notification.createdAt)}</span>
                            </div>
                          </div>
                        </div>
                      </div>
                      
                      <div className="flex items-center space-x-1">
                        {!notification.read && (
                          <Button
                            variant="ghost"
                            size="sm"
                            onClick={() => handleMarkAsRead(notification.id)}
                            disabled={markAsReadMutation.isPending}
                          >
                            <Check className="h-4 w-4" />
                          </Button>
                        )}
                        <Button variant="ghost" size="sm">
                          <Eye className="h-4 w-4" />
                        </Button>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            )}
          </CardContent>
        </Card>

        {/* Pagination */}
        {pagination && pagination.pages > 1 && (
          <Card>
            <CardContent className="p-4">
              <div className="flex items-center justify-between">
                <div className="text-sm text-muted-foreground">
                  Showing {((pagination.page - 1) * pagination.limit) + 1} to{' '}
                  {Math.min(pagination.page * pagination.limit, pagination.total)} of{' '}
                  {pagination.total} notifications
                </div>
                
                <div className="flex items-center space-x-2">
                  <Button variant="outline" size="sm" disabled={pagination.page === 1}>
                    Previous
                  </Button>
                  <span className="text-sm">
                    Page {pagination.page} of {pagination.pages}
                  </span>
                  <Button variant="outline" size="sm" disabled={pagination.page === pagination.pages}>
                    Next
                  </Button>
                </div>
              </div>
            </CardContent>
          </Card>
        )}
      </div>
    </MainLayout>
  );
}
│   │   │   │   # --- End: Notifications.tsx ---

│   │   │   │   ├─ Projects.tsx

│   │   │   │   # --- Begin: Projects.tsx ---
import { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { MainLayout } from '@/components/layout/main-layout';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Input } from '@/components/ui/input';
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { 
  Plus, 
  Search, 
  Filter, 
  Eye, 
  Shield, 
  Users, 
  Calendar,
  AlertTriangle,
  CheckCircle,
  Clock,
  Download
} from 'lucide-react';
import { useProjects, useCreateProject, useExportProject } from '@/hooks/use-api';
import { useNotificationsRealtime } from '@/hooks/use-notifications-realtime';
import type { Project } from '@/types';

export default function Projects() {
  const [searchQuery, setSearchQuery] = useState('');
  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);
  const [newProject, setNewProject] = useState({ name: '', description: '' });
  
  const navigate = useNavigate();
  const { data: projects = [], isLoading, error } = useProjects();
  const createProjectMutation = useCreateProject();
  const exportProjectMutation = useExportProject();
  const { isConnected } = useNotificationsRealtime();

  // Filter projects based on search query
  const filteredProjects = projects.filter(project =>
    project.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
    project.description?.toLowerCase().includes(searchQuery.toLowerCase())
  );

  const handleCreateProject = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!newProject.name.trim()) return;

    try {
      await createProjectMutation.mutateAsync({
        name: newProject.name,
        description: newProject.description
      });
      
      setNewProject({ name: '', description: '' });
      setIsCreateDialogOpen(false);
    } catch (error) {
      // Error is handled by the mutation hook
    }
  };

  const handleViewProject = (projectId: number) => {
    navigate(`/projects/${projectId}`);
  };

  const handleScanProject = (projectId: number) => {
    navigate(`/scan?projectId=${projectId}`);
  };

  const handleExportProject = async (projectId: number, format: 'pdf' | 'csv') => {
    try {
      await exportProjectMutation.mutateAsync({ id: projectId, format });
    } catch (error) {
      // Error is handled by the mutation hook
    }
  };

  const getSecurityStatus = (project: Project) => {
    const criticalCount = project.dependencies?.reduce((total, dep) => 
      total + (dep.issues?.filter(issue => issue.severity === 'CRITICAL').length || 0), 0
    ) || 0;
    
    const highCount = project.dependencies?.reduce((total, dep) => 
      total + (dep.issues?.filter(issue => issue.severity === 'HIGH').length || 0), 0
    ) || 0;

    if (criticalCount > 0) return { status: 'Critical', color: 'destructive' as const };
    if (highCount > 0) return { status: 'High Risk', color: 'destructive' as const };
    if ((project.totalVulnerabilities || 0) > 0) return { status: 'Medium Risk', color: 'default' as const };
    return { status: 'Secure', color: 'secondary' as const };
  };

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'short',
      day: 'numeric'
    });
  };

  if (error) {
    return (
      <MainLayout>
        <Alert variant="destructive">
          <AlertTriangle className="h-4 w-4" />
          <AlertDescription>
            Failed to load projects. Please try again later.
          </AlertDescription>
        </Alert>
      </MainLayout>
    );
  }

  return (
    <MainLayout>
      <div className="space-y-6">
        {/* Header */}
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-3xl font-bold text-foreground">Projects</h1>
            <p className="text-muted-foreground">
              Manage and monitor your security projects
            </p>
          </div>
          <div className="flex items-center space-x-2">
            <Badge variant={isConnected ? "default" : "secondary"}>
              {isConnected ? "Connected" : "Disconnected"}
            </Badge>
            <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>
              <DialogTrigger asChild>
                <Button>
                  <Plus className="mr-2 h-4 w-4" />
                  New Project
                </Button>
              </DialogTrigger>
              <DialogContent>
                <DialogHeader>
                  <DialogTitle>Create New Project</DialogTitle>
                  <DialogDescription>
                    Create a new project to organize your vulnerability scans and dependencies.
                  </DialogDescription>
                </DialogHeader>
                <form onSubmit={handleCreateProject} className="space-y-4">
                  <div>
                    <Label htmlFor="name">Project Name</Label>
                    <Input
                      id="name"
                      value={newProject.name}
                      onChange={(e) => setNewProject(prev => ({ ...prev, name: e.target.value }))}
                      placeholder="Enter project name"
                      required
                    />
                  </div>
                  <div>
                    <Label htmlFor="description">Description</Label>
                    <Textarea
                      id="description"
                      value={newProject.description}
                      onChange={(e) => setNewProject(prev => ({ ...prev, description: e.target.value }))}
                      placeholder="Enter project description (optional)"
                      rows={3}
                    />
                  </div>
                  <div className="flex justify-end space-x-2">
                    <Button
                      type="button"
                      variant="outline"
                      onClick={() => setIsCreateDialogOpen(false)}
                    >
                      Cancel
                    </Button>
                    <Button type="submit" disabled={createProjectMutation.isPending}>
                      {createProjectMutation.isPending ? 'Creating...' : 'Create Project'}
                    </Button>
                  </div>
                </form>
              </DialogContent>
            </Dialog>
          </div>
        </div>

        {/* Search and Filters */}
        <Card>
          <CardContent className="p-4">
            <div className="flex items-center space-x-4">
              <div className="relative flex-1">
                <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground" />
                <Input
                  placeholder="Search projects..."
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                  className="pl-10"
                />
              </div>
              <Button variant="outline">
                <Filter className="mr-2 h-4 w-4" />
                Filter
              </Button>
            </div>
          </CardContent>
        </Card>

        {/* Projects Grid */}
        {isLoading ? (
          <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
            {[...Array(6)].map((_, i) => (
              <Card key={i} className="animate-pulse">
                <CardHeader>
                  <div className="h-4 bg-muted rounded w-3/4"></div>
                  <div className="h-3 bg-muted rounded w-1/2"></div>
                </CardHeader>
                <CardContent>
                  <div className="space-y-2">
                    <div className="h-3 bg-muted rounded"></div>
                    <div className="h-3 bg-muted rounded w-2/3"></div>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        ) : filteredProjects.length === 0 ? (
          <Card>
            <CardContent className="p-8 text-center">
              <div className="space-y-4">
                <Shield className="h-12 w-12 text-muted-foreground mx-auto" />
                <div>
                  <h3 className="text-lg font-semibold">No projects found</h3>
                  <p className="text-muted-foreground">
                    {searchQuery ? 'Try adjusting your search terms.' : 'Create your first project to get started.'}
                  </p>
                </div>
                {!searchQuery && (
                  <Button onClick={() => setIsCreateDialogOpen(true)}>
                    <Plus className="mr-2 h-4 w-4" />
                    Create Project
                  </Button>
                )}
              </div>
            </CardContent>
          </Card>
        ) : (
          <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
            {filteredProjects.map((project) => {
              const securityStatus = getSecurityStatus(project);
              return (
                <Card key={project.id} className="hover:shadow-lg transition-shadow">
                  <CardHeader>
                    <div className="flex items-start justify-between">
                      <div className="flex-1">
                        <CardTitle className="text-lg">{project.name}</CardTitle>
                        <CardDescription className="mt-1">
                          {project.description || 'No description provided'}
                        </CardDescription>
                      </div>
                      <Badge variant={securityStatus.color}>
                        {securityStatus.status}
                      </Badge>
                    </div>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-4">
                      {/* Stats */}
                      <div className="grid grid-cols-2 gap-4 text-sm">
                        <div className="flex items-center space-x-2">
                          <Shield className="h-4 w-4 text-muted-foreground" />
                          <span>{project.totalDependencies || 0} deps</span>
                        </div>
                        <div className="flex items-center space-x-2">
                          <AlertTriangle className="h-4 w-4 text-muted-foreground" />
                          <span>{project.totalVulnerabilities || 0} vulns</span>
                        </div>
                      </div>

                      {/* Metadata */}
                      <div className="flex items-center justify-between text-xs text-muted-foreground">
                        <div className="flex items-center space-x-1">
                          <Calendar className="h-3 w-3" />
                          <span>{formatDate(project.createdAt)}</span>
                        </div>
                        <div className="flex items-center space-x-1">
                          <Users className="h-3 w-3" />
                          <span>{project.collaborators?.length || 0}</span>
                        </div>
                      </div>

                      {/* Actions */}
                      <div className="flex space-x-2">
                        <Button
                          variant="outline"
                          size="sm"
                          className="flex-1"
                          onClick={() => handleViewProject(project.id)}
                        >
                          <Eye className="mr-1 h-3 w-3" />
                          View
                        </Button>
                        <Button
                          variant="outline"
                          size="sm"
                          className="flex-1"
                          onClick={() => handleScanProject(project.id)}
                        >
                          <Shield className="mr-1 h-3 w-3" />
                          Scan
                        </Button>
                        <Button
                          variant="outline"
                          size="sm"
                          onClick={() => handleExportProject(project.id, 'pdf')}
                        >
                          <Download className="h-3 w-3" />
                        </Button>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              );
            })}
          </div>
        )}

        {/* Summary Stats */}
        {projects.length > 0 && (
          <Card>
            <CardHeader>
              <CardTitle>Project Summary</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                <div className="text-center">
                  <div className="text-2xl font-bold">{projects.length}</div>
                  <div className="text-sm text-muted-foreground">Total Projects</div>
                </div>
                <div className="text-center">
                  <div className="text-2xl font-bold text-green-600">
                    {projects.filter(p => getSecurityStatus(p).status === 'Secure').length}
                  </div>
                  <div className="text-sm text-muted-foreground">Secure</div>
                </div>
                <div className="text-center">
                  <div className="text-2xl font-bold text-orange-600">
                    {projects.filter(p => getSecurityStatus(p).status === 'Medium Risk').length}
                  </div>
                  <div className="text-sm text-muted-foreground">At Risk</div>
                </div>
                <div className="text-center">
                  <div className="text-2xl font-bold text-red-600">
                    {projects.filter(p => getSecurityStatus(p).status === 'Critical' || getSecurityStatus(p).status === 'High Risk').length}
                  </div>
                  <div className="text-sm text-muted-foreground">Critical</div>
                </div>
              </div>
            </CardContent>
          </Card>
        )}
      </div>
    </MainLayout>
  );
}
│   │   │   │   # --- End: Projects.tsx ---

│   │   │   │   ├─ Register.tsx

│   │   │   │   # --- Begin: Register.tsx ---
import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { Checkbox } from "@/components/ui/checkbox";
import { Shield, Eye, EyeOff, Mail, Lock, User } from "lucide-react";
import { Link, useNavigate } from "react-router-dom";
import { useAuth } from "@/hooks/use-auth";
import heroImage from "@/assets/hero-bg.jpg";

export default function Register() {
  const { register } = useAuth();
  const navigate = useNavigate();
  const [showPassword, setShowPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState("");
  const [agreeTerms, setAgreeTerms] = useState(false);
  const [formData, setFormData] = useState({
    name: "",
    email: "",
    password: "",
    confirmPassword: ""
  });

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsLoading(true);
    setError("");

    if (formData.password !== formData.confirmPassword) {
      setError("Passwords do not match");
      setIsLoading(false);
      return;
    }

    if (!agreeTerms) {
      setError("Please agree to the terms and conditions");
      setIsLoading(false);
      return;
    }

    try {
      const success = await register(formData.email, formData.password, formData.name);
      if (success) {
        navigate("/dashboard");
      }
    } catch (err) {
      setError("Registration failed. Please try again.");
    } finally {
      setIsLoading(false);
    }
  };

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setFormData(prev => ({
      ...prev,
      [e.target.name]: e.target.value
    }));
  };

  return (
    <div className="min-h-screen bg-background">
      <div className="flex min-h-screen">
        {/* Left side - Hero */}
        <div className="hidden lg:flex lg:flex-1 relative">
          <div 
            className="absolute inset-0 bg-gradient-hero"
            style={{
              backgroundImage: `url(${heroImage})`,
              backgroundSize: 'cover',
              backgroundPosition: 'center'
            }}
          />
          <div className="absolute inset-0 bg-gradient-hero/90" />
          
          <div className="relative flex flex-col justify-center px-12 text-center">
            <div className="mx-auto mb-8">
              <div className="flex h-16 w-16 items-center justify-center rounded-2xl bg-gradient-primary shadow-glow">
                <Shield className="h-8 w-8 text-primary-foreground" />
              </div>
            </div>
            
            <h1 className="text-4xl font-bold text-foreground mb-4">
              Join VulnWatch
            </h1>
            <p className="text-xl text-muted-foreground mb-8 max-w-md mx-auto">
              Start monitoring your applications for vulnerabilities today. Get started with a free trial.
            </p>
            
            <div className="space-y-4 max-w-sm mx-auto text-left">
              <div className="flex items-center space-x-3">
                <div className="flex h-8 w-8 items-center justify-center rounded-full bg-success/20">
                  <svg className="h-4 w-4 text-success" fill="currentColor" viewBox="0 0 20 20">
                    <path fillRule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clipRule="evenodd" />
                  </svg>
                </div>
                <span className="text-foreground">Free 14-day trial</span>
              </div>
              <div className="flex items-center space-x-3">
                <div className="flex h-8 w-8 items-center justify-center rounded-full bg-success/20">
                  <svg className="h-4 w-4 text-success" fill="currentColor" viewBox="0 0 20 20">
                    <path fillRule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clipRule="evenodd" />
                  </svg>
                </div>
                <span className="text-foreground">No credit card required</span>
              </div>
              <div className="flex items-center space-x-3">
                <div className="flex h-8 w-8 items-center justify-center rounded-full bg-success/20">
                  <svg className="h-4 w-4 text-success" fill="currentColor" viewBox="0 0 20 20">
                    <path fillRule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clipRule="evenodd" />
                  </svg>
                </div>
                <span className="text-foreground">Cancel anytime</span>
              </div>
            </div>
          </div>
        </div>

        {/* Right side - Register Form */}
        <div className="flex flex-1 flex-col justify-center py-12 px-4 sm:px-6 lg:flex-none lg:px-20 xl:px-24">
          <div className="mx-auto w-full max-w-sm lg:w-96">
            <div className="mb-8">
              <div className="flex items-center space-x-2 lg:hidden mb-6">
                <div className="flex h-10 w-10 items-center justify-center rounded-lg bg-gradient-primary">
                  <Shield className="h-6 w-6 text-primary-foreground" />
                </div>
                <span className="text-2xl font-bold text-security">VulnWatch</span>
              </div>
              
              <h2 className="text-3xl font-bold text-foreground">
                Create your account
              </h2>
              <p className="mt-2 text-sm text-muted-foreground">
                Start monitoring your applications for vulnerabilities today.
              </p>
            </div>

            <Card className="bg-gradient-card border-security shadow-security">
              <CardHeader className="space-y-1">
                <CardTitle className="text-2xl text-center text-foreground">Sign Up</CardTitle>
                <CardDescription className="text-center text-muted-foreground">
                  Enter your details to create your account
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                {error && (
                  <Alert variant="destructive">
                    <AlertDescription>{error}</AlertDescription>
                  </Alert>
                )}

                <form onSubmit={handleSubmit} className="space-y-4">
                  <div className="space-y-2">
                    <Label htmlFor="name" className="text-foreground">Full Name</Label>
                    <div className="relative">
                      <User className="absolute left-3 top-3 h-4 w-4 text-muted-foreground" />
                      <Input
                        id="name"
                        name="name"
                        type="text"
                        value={formData.name}
                        onChange={handleChange}
                        placeholder="Enter your full name"
                        className="pl-10 bg-background border-security"
                        required
                      />
                    </div>
                  </div>

                  <div className="space-y-2">
                    <Label htmlFor="email" className="text-foreground">Email</Label>
                    <div className="relative">
                      <Mail className="absolute left-3 top-3 h-4 w-4 text-muted-foreground" />
                      <Input
                        id="email"
                        name="email"
                        type="email"
                        value={formData.email}
                        onChange={handleChange}
                        placeholder="Enter your email"
                        className="pl-10 bg-background border-security"
                        required
                      />
                    </div>
                  </div>

                  <div className="space-y-2">
                    <Label htmlFor="password" className="text-foreground">Password</Label>
                    <div className="relative">
                      <Lock className="absolute left-3 top-3 h-4 w-4 text-muted-foreground" />
                      <Input
                        id="password"
                        name="password"
                        type={showPassword ? "text" : "password"}
                        value={formData.password}
                        onChange={handleChange}
                        placeholder="Create a password"
                        className="pl-10 pr-10 bg-background border-security"
                        required
                      />
                      <Button
                        type="button"
                        variant="ghost"
                        size="sm"
                        className="absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent"
                        onClick={() => setShowPassword(!showPassword)}
                      >
                        {showPassword ? (
                          <EyeOff className="h-4 w-4 text-muted-foreground" />
                        ) : (
                          <Eye className="h-4 w-4 text-muted-foreground" />
                        )}
                      </Button>
                    </div>
                  </div>

                  <div className="space-y-2">
                    <Label htmlFor="confirmPassword" className="text-foreground">Confirm Password</Label>
                    <div className="relative">
                      <Lock className="absolute left-3 top-3 h-4 w-4 text-muted-foreground" />
                      <Input
                        id="confirmPassword"
                        name="confirmPassword"
                        type={showConfirmPassword ? "text" : "password"}
                        value={formData.confirmPassword}
                        onChange={handleChange}
                        placeholder="Confirm your password"
                        className="pl-10 pr-10 bg-background border-security"
                        required
                      />
                      <Button
                        type="button"
                        variant="ghost"
                        size="sm"
                        className="absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent"
                        onClick={() => setShowConfirmPassword(!showConfirmPassword)}
                      >
                        {showConfirmPassword ? (
                          <EyeOff className="h-4 w-4 text-muted-foreground" />
                        ) : (
                          <Eye className="h-4 w-4 text-muted-foreground" />
                        )}
                      </Button>
                    </div>
                  </div>

                  <div className="flex items-center space-x-2">
                    <Checkbox
                      id="terms"
                      checked={agreeTerms}
                      onCheckedChange={(checked) => setAgreeTerms(checked as boolean)}
                    />
                    <Label htmlFor="terms" className="text-sm text-muted-foreground">
                      I agree to the{" "}
                      <a href="#" className="text-security hover:text-primary-glow transition-smooth">
                        Terms of Service
                      </a>{" "}
                      and{" "}
                      <a href="#" className="text-security hover:text-primary-glow transition-smooth">
                        Privacy Policy
                      </a>
                    </Label>
                  </div>

                  <Button 
                    type="submit" 
                    className="w-full shadow-security" 
                    disabled={isLoading}
                  >
                    {isLoading ? "Creating account..." : "Create Account"}
                  </Button>

                  <div className="text-center text-sm text-muted-foreground">
                    Already have an account?{" "}
                    <Link 
                      to="/login" 
                      className="text-security hover:text-primary-glow transition-smooth font-medium"
                    >
                      Sign in
                    </Link>
                  </div>
                </form>
              </CardContent>
            </Card>
          </div>
        </div>
      </div>
    </div>
  );
}
│   │   │   │   # --- End: Register.tsx ---

│   │   │   │   ├─ Scan.tsx

│   │   │   │   # --- Begin: Scan.tsx ---
import { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { MainLayout } from '@/components/layout/main-layout';
import { FileUpload } from '@/components/scanning/file-upload';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Badge } from '@/components/ui/badge';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Shield, Upload, FileText, AlertTriangle, CheckCircle } from 'lucide-react';
import { useProjects, useUploadAndScan } from '@/hooks/use-api';
import { useNotificationsRealtime } from '@/hooks/use-notifications-realtime';
import type { ScanResult } from '@/types';

export default function Scan() {
  const [selectedProjectId, setSelectedProjectId] = useState<number | null>(null);
  const [scanResult, setScanResult] = useState<ScanResult | null>(null);
  const [showResults, setShowResults] = useState(false);
  
  const navigate = useNavigate();
  const { data: projects = [], isLoading: projectsLoading } = useProjects();
  const uploadMutation = useUploadAndScan();
  const { isConnected } = useNotificationsRealtime();

  const handleUpload = async (file: File) => {
    if (!selectedProjectId) {
      throw new Error('Please select a project first');
    }

    const result = await uploadMutation.mutateAsync({ file, projectId: selectedProjectId });
    setScanResult(result);
    setShowResults(true);
  };

  const handleViewResults = () => {
    if (selectedProjectId) {
      navigate(`/scan/${selectedProjectId}`);
    }
  };

  const handleNewScan = () => {
    setScanResult(null);
    setShowResults(false);
  };

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'CRITICAL': return 'destructive';
      case 'HIGH': return 'destructive';
      case 'MEDIUM': return 'default';
      case 'LOW': return 'secondary';
      default: return 'secondary';
    }
  };

  return (
    <MainLayout>
      <div className="space-y-6">
        {/* Header */}
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-3xl font-bold text-foreground">Vulnerability Scan</h1>
            <p className="text-muted-foreground">
              Upload dependency files to scan for security vulnerabilities
            </p>
          </div>
          <div className="flex items-center space-x-2">
            <Badge variant={isConnected ? "default" : "secondary"}>
              {isConnected ? "Connected" : "Disconnected"}
            </Badge>
          </div>
        </div>

        {/* Project Selection */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center space-x-2">
              <FileText className="h-5 w-5" />
              <span>Select Project</span>
            </CardTitle>
            <CardDescription>
              Choose a project to associate with this scan
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              <Select
                value={selectedProjectId?.toString() || ''}
                onValueChange={(value) => setSelectedProjectId(Number(value))}
              >
                <SelectTrigger>
                  <SelectValue placeholder="Select a project" />
                </SelectTrigger>
                <SelectContent>
                  {projects.map((project) => (
                    <SelectItem key={project.id} value={project.id.toString()}>
                      {project.name}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>

              {projects.length === 0 && !projectsLoading && (
                <Alert>
                  <AlertTriangle className="h-4 w-4" />
                  <AlertDescription>
                    No projects found. Please create a project first.
                  </AlertDescription>
                </Alert>
              )}

              {projectsLoading && (
                <div className="text-center py-4">
                  <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto"></div>
                  <p className="text-sm text-muted-foreground mt-2">Loading projects...</p>
                </div>
              )}
            </div>
          </CardContent>
        </Card>

        {/* File Upload */}
        {selectedProjectId && (
          <FileUpload onUpload={handleUpload} projectId={selectedProjectId} />
        )}

        {/* Scan Results */}
        {showResults && scanResult && (
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center space-x-2">
                <Shield className="h-5 w-5" />
                <span>Scan Results</span>
              </CardTitle>
              <CardDescription>
                Vulnerability scan completed successfully
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-6">
                {/* Summary Stats */}
                <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                  <div className="text-center p-4 bg-muted rounded-lg">
                    <div className="text-2xl font-bold">{scanResult.totalDependencies}</div>
                    <div className="text-sm text-muted-foreground">Dependencies</div>
                  </div>
                  <div className="text-center p-4 bg-muted rounded-lg">
                    <div className="text-2xl font-bold text-destructive">
                      {scanResult.totalVulnerabilities}
                    </div>
                    <div className="text-sm text-muted-foreground">Vulnerabilities</div>
                  </div>
                  <div className="text-center p-4 bg-muted rounded-lg">
                    <div className="text-2xl font-bold text-destructive">
                      {scanResult.criticalVulnerabilities}
                    </div>
                    <div className="text-sm text-muted-foreground">Critical</div>
                  </div>
                  <div className="text-center p-4 bg-muted rounded-lg">
                    <div className="text-2xl font-bold text-orange-500">
                      {scanResult.highVulnerabilities || 0}
                    </div>
                    <div className="text-sm text-muted-foreground">High</div>
                  </div>
                </div>

                {/* Vulnerability Breakdown */}
                <div className="space-y-4">
                  <h3 className="text-lg font-semibold">Vulnerability Details</h3>
                  {scanResult.results.map((result, index) => (
                    <div key={index} className="border rounded-lg p-4">
                      <div className="flex items-center justify-between mb-2">
                        <h4 className="font-medium">{result.dependency.name}</h4>
                        <Badge variant="outline">{result.dependency.version}</Badge>
                      </div>
                      
                      {result.vulnerabilities.length > 0 ? (
                        <div className="space-y-2">
                          {result.vulnerabilities.map((vuln, vulnIndex) => (
                            <div key={vulnIndex} className="flex items-center space-x-2 p-2 bg-muted/50 rounded">
                              <AlertTriangle className="h-4 w-4 text-destructive" />
                              <div className="flex-1">
                                <div className="font-medium text-sm">{vuln.title}</div>
                                {vuln.cveId && (
                                  <div className="text-xs text-muted-foreground">{vuln.cveId}</div>
                                )}
                              </div>
                              <Badge variant={getSeverityColor(vuln.severity) as any}>
                                {vuln.severity}
                              </Badge>
                            </div>
                          ))}
                        </div>
                      ) : (
                        <div className="flex items-center space-x-2 text-green-600">
                          <CheckCircle className="h-4 w-4" />
                          <span className="text-sm">No vulnerabilities found</span>
                        </div>
                      )}
                    </div>
                  ))}
                </div>

                {/* Action Buttons */}
                <div className="flex space-x-4">
                  <Button onClick={handleViewResults} className="flex-1">
                    <Shield className="mr-2 h-4 w-4" />
                    View Detailed Results
                  </Button>
                  <Button onClick={handleNewScan} variant="outline">
                    <Upload className="mr-2 h-4 w-4" />
                    New Scan
                  </Button>
                </div>
              </div>
            </CardContent>
          </Card>
        )}

        {/* Instructions */}
        {!selectedProjectId && (
          <Card>
            <CardHeader>
              <CardTitle>Getting Started</CardTitle>
              <CardDescription>
                Follow these steps to scan your dependencies for vulnerabilities
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                <div className="flex items-start space-x-3">
                  <div className="flex-shrink-0 w-6 h-6 bg-primary text-primary-foreground rounded-full flex items-center justify-center text-sm font-medium">
                    1
                  </div>
                  <div>
                    <h4 className="font-medium">Select a Project</h4>
                    <p className="text-sm text-muted-foreground">
                      Choose an existing project or create a new one to organize your scans
                    </p>
                  </div>
                </div>
                
                <div className="flex items-start space-x-3">
                  <div className="flex-shrink-0 w-6 h-6 bg-primary text-primary-foreground rounded-full flex items-center justify-center text-sm font-medium">
                    2
                  </div>
                  <div>
                    <h4 className="font-medium">Upload Dependency File</h4>
                    <p className="text-sm text-muted-foreground">
                      Upload your package.json, requirements.txt, or other dependency files
                    </p>
                  </div>
                </div>
                
                <div className="flex items-start space-x-3">
                  <div className="flex-shrink-0 w-6 h-6 bg-primary text-primary-foreground rounded-full flex items-center justify-center text-sm font-medium">
                    3
                  </div>
                  <div>
                    <h4 className="font-medium">Review Results</h4>
                    <p className="text-sm text-muted-foreground">
                      Get detailed vulnerability reports and remediation suggestions
                    </p>
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>
        )}
      </div>
    </MainLayout>
  );
}
│   │   │   │   # --- End: Scan.tsx ---

│   │   │   │   ├─ UserProfile.tsx

│   │   │   │   # --- Begin: UserProfile.tsx ---
import { useState } from 'react';
import { MainLayout } from '@/components/layout/main-layout';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Switch } from '@/components/ui/switch';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Badge } from '@/components/ui/badge';
import { Separator } from '@/components/ui/separator';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { 
  User, 
  Mail, 
  Shield, 
  Bell, 
  Settings, 
  Save, 
  Eye, 
  EyeOff,
  Calendar,
  Key,
  AlertTriangle,
  CheckCircle
} from 'lucide-react';
import { useAuth } from '@/hooks/use-auth';
import { useUpdateProfile, useSetAlertConfig, useSendTestAlert } from '@/hooks/use-api';
import { useNotificationsRealtime } from '@/hooks/use-notifications-realtime';
import type { AlertConfigFormData } from '@/types';

export default function UserProfile() {
  const { user } = useAuth();
  const { isConnected } = useNotificationsRealtime();
  
  const updateProfileMutation = useUpdateProfile();
  const sendTestAlertMutation = useSendTestAlert();

  const [showPassword, setShowPassword] = useState(false);
  const [isEditing, setIsEditing] = useState(false);
  
  const [profileData, setProfileData] = useState({
    name: user?.name || '',
    email: user?.email || ''
  });

  const [alertConfig, setAlertConfig] = useState<AlertConfigFormData>({
    emailNotifications: user?.emailNotifications || false,
    dailyDigest: user?.dailyDigest || false,
    securityAlerts: user?.securityAlerts || false,
    alertFrequency: user?.alertFrequency || 'immediate'
  });

  const [passwordData, setPasswordData] = useState({
    currentPassword: '',
    newPassword: '',
    confirmPassword: ''
  });

  const handleProfileUpdate = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      await updateProfileMutation.mutateAsync({
        name: profileData.name,
        emailNotifications: alertConfig.emailNotifications,
        dailyDigest: alertConfig.dailyDigest,
        securityAlerts: alertConfig.securityAlerts,
        alertFrequency: alertConfig.alertFrequency
      });
      setIsEditing(false);
    } catch (error) {
      // Error is handled by the mutation hook
    }
  };

  const handleSendTestAlert = async () => {
    try {
      await sendTestAlertMutation.mutateAsync();
    } catch (error) {
      // Error is handled by the mutation hook
    }
  };

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'long',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  const getRoleBadge = (role: string) => {
    switch (role) {
      case 'admin':
        return <Badge variant="destructive">Admin</Badge>;
      case 'user':
        return <Badge variant="secondary">User</Badge>;
      default:
        return <Badge variant="outline">{role}</Badge>;
    }
  };

  return (
    <MainLayout>
      <div className="space-y-6">
        {/* Header */}
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-3xl font-bold text-foreground">User Profile</h1>
            <p className="text-muted-foreground">
              Manage your account settings and preferences
            </p>
          </div>
          <div className="flex items-center space-x-2">
            <Badge variant={isConnected ? "default" : "secondary"}>
              {isConnected ? "Connected" : "Disconnected"}
            </Badge>
          </div>
        </div>

        <div className="grid gap-6 lg:grid-cols-3">
          {/* Profile Information */}
          <div className="lg:col-span-2 space-y-6">
            {/* Basic Profile */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center space-x-2">
                  <User className="h-5 w-5" />
                  <span>Profile Information</span>
                </CardTitle>
                <CardDescription>
                  Update your personal information and account details
                </CardDescription>
              </CardHeader>
              <CardContent>
                <form onSubmit={handleProfileUpdate} className="space-y-4">
                  <div className="grid gap-4 md:grid-cols-2">
                    <div>
                      <Label htmlFor="name">Full Name</Label>
                      <Input
                        id="name"
                        value={profileData.name}
                        onChange={(e) => setProfileData(prev => ({ ...prev, name: e.target.value }))}
                        disabled={!isEditing}
                        placeholder="Enter your full name"
                      />
                    </div>
                    <div>
                      <Label htmlFor="email">Email Address</Label>
                      <Input
                        id="email"
                        value={profileData.email}
                        disabled
                        className="bg-muted"
                      />
                      <p className="text-xs text-muted-foreground mt-1">
                        Email cannot be changed
                      </p>
                    </div>
                  </div>

                  <div className="grid gap-4 md:grid-cols-2">
                    <div>
                      <Label>Account Role</Label>
                      <div className="flex items-center space-x-2 mt-2">
                        {getRoleBadge(user?.role || 'user')}
                        <span className="text-sm text-muted-foreground">
                          {user?.role === 'admin' ? 'Full system access' : 'Standard user access'}
                        </span>
                      </div>
                    </div>
                    <div>
                      <Label>Member Since</Label>
                      <div className="flex items-center space-x-2 mt-2">
                        <Calendar className="h-4 w-4 text-muted-foreground" />
                        <span className="text-sm">
                          {user?.createdAt ? formatDate(user.createdAt) : 'Unknown'}
                        </span>
                      </div>
                    </div>
                  </div>

                  <div className="flex justify-end space-x-2">
                    {isEditing ? (
                      <>
                        <Button
                          type="button"
                          variant="outline"
                          onClick={() => {
                            setIsEditing(false);
                            setProfileData({
                              name: user?.name || '',
                              email: user?.email || ''
                            });
                          }}
                        >
                          Cancel
                        </Button>
                        <Button type="submit" disabled={updateProfileMutation.isPending}>
                          {updateProfileMutation.isPending ? 'Saving...' : 'Save Changes'}
                        </Button>
                      </>
                    ) : (
                      <Button onClick={() => setIsEditing(true)}>
                        <Settings className="mr-2 h-4 w-4" />
                        Edit Profile
                      </Button>
                    )}
                  </div>
                </form>
              </CardContent>
            </Card>

            {/* Password Change */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center space-x-2">
                  <Key className="h-5 w-5" />
                  <span>Change Password</span>
                </CardTitle>
                <CardDescription>
                  Update your account password for enhanced security
                </CardDescription>
              </CardHeader>
              <CardContent>
                <form className="space-y-4">
                  <div>
                    <Label htmlFor="currentPassword">Current Password</Label>
                    <div className="relative">
                      <Input
                        id="currentPassword"
                        type={showPassword ? "text" : "password"}
                        value={passwordData.currentPassword}
                        onChange={(e) => setPasswordData(prev => ({ ...prev, currentPassword: e.target.value }))}
                        placeholder="Enter current password"
                      />
                      <Button
                        type="button"
                        variant="ghost"
                        size="sm"
                        className="absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent"
                        onClick={() => setShowPassword(!showPassword)}
                      >
                        {showPassword ? <EyeOff className="h-4 w-4" /> : <Eye className="h-4 w-4" />}
                      </Button>
                    </div>
                  </div>

                  <div className="grid gap-4 md:grid-cols-2">
                    <div>
                      <Label htmlFor="newPassword">New Password</Label>
                      <Input
                        id="newPassword"
                        type="password"
                        value={passwordData.newPassword}
                        onChange={(e) => setPasswordData(prev => ({ ...prev, newPassword: e.target.value }))}
                        placeholder="Enter new password"
                      />
                    </div>
                    <div>
                      <Label htmlFor="confirmPassword">Confirm Password</Label>
                      <Input
                        id="confirmPassword"
                        type="password"
                        value={passwordData.confirmPassword}
                        onChange={(e) => setPasswordData(prev => ({ ...prev, confirmPassword: e.target.value }))}
                        placeholder="Confirm new password"
                      />
                    </div>
                  </div>

                  <div className="flex justify-end">
                    <Button variant="outline">
                      Update Password
                    </Button>
                  </div>
                </form>
              </CardContent>
            </Card>
          </div>

          {/* Alert Configuration */}
          <div className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center space-x-2">
                  <Bell className="h-5 w-5" />
                  <span>Alert Preferences</span>
                </CardTitle>
                <CardDescription>
                  Configure how you receive security notifications
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-6">
                {/* Email Notifications */}
                <div className="space-y-4">
                  <div className="flex items-center justify-between">
                    <div>
                      <Label className="text-base font-medium">Email Notifications</Label>
                      <p className="text-sm text-muted-foreground">
                        Receive security alerts via email
                      </p>
                    </div>
                    <Switch
                      checked={alertConfig.emailNotifications}
                      onCheckedChange={(checked) => {
                        setAlertConfig(prev => ({ ...prev, emailNotifications: checked }));
                      }}
                    />
                  </div>

                  <div className="flex items-center justify-between">
                    <div>
                      <Label className="text-base font-medium">Daily Digest</Label>
                      <p className="text-sm text-muted-foreground">
                        Get a daily summary of all vulnerabilities
                      </p>
                    </div>
                    <Switch
                      checked={alertConfig.dailyDigest}
                      onCheckedChange={(checked) => {
                        setAlertConfig(prev => ({ ...prev, dailyDigest: checked }));
                      }}
                    />
                  </div>

                  <div className="flex items-center justify-between">
                    <div>
                      <Label className="text-base font-medium">Security Alerts</Label>
                      <p className="text-sm text-muted-foreground">
                        Immediate notifications for critical issues
                      </p>
                    </div>
                    <Switch
                      checked={alertConfig.securityAlerts}
                      onCheckedChange={(checked) => {
                        setAlertConfig(prev => ({ ...prev, securityAlerts: checked }));
                      }}
                    />
                  </div>
                </div>

                <Separator />

                {/* Alert Frequency */}
                <div className="space-y-2">
                  <Label>Alert Frequency</Label>
                  <Select
                    value={alertConfig.alertFrequency}
                    onValueChange={(value: 'immediate' | 'daily' | 'weekly') => {
                      setAlertConfig(prev => ({ ...prev, alertFrequency: value }));
                    }}
                  >
                    <SelectTrigger>
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="immediate">Immediate</SelectItem>
                      <SelectItem value="daily">Daily</SelectItem>
                      <SelectItem value="weekly">Weekly</SelectItem>
                    </SelectContent>
                  </Select>
                  <p className="text-xs text-muted-foreground">
                    How often you want to receive non-critical alerts
                  </p>
                </div>

                <Separator />

                {/* Test Alert */}
                <div className="space-y-2">
                  <Label>Test Notifications</Label>
                  <Button
                    variant="outline"
                    className="w-full"
                    onClick={handleSendTestAlert}
                    disabled={sendTestAlertMutation.isPending}
                  >
                    {sendTestAlertMutation.isPending ? 'Sending...' : 'Send Test Alert'}
                  </Button>
                  <p className="text-xs text-muted-foreground">
                    Send a test notification to verify your settings
                  </p>
                </div>
              </CardContent>
            </Card>

            {/* Account Status */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center space-x-2">
                  <Shield className="h-5 w-5" />
                  <span>Account Status</span>
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="flex items-center justify-between">
                  <span className="text-sm">Account Status</span>
                  <Badge variant="default" className="bg-green-500">
                    <CheckCircle className="mr-1 h-3 w-3" />
                    Active
                  </Badge>
                </div>
                
                <div className="flex items-center justify-between">
                  <span className="text-sm">Email Verified</span>
                  <Badge variant="default" className="bg-green-500">
                    <CheckCircle className="mr-1 h-3 w-3" />
                    Verified
                  </Badge>
                </div>
                
                <div className="flex items-center justify-between">
                  <span className="text-sm">Two-Factor Auth</span>
                  <Badge variant="secondary">
                    Not Enabled
                  </Badge>
                </div>
                
                <div className="flex items-center justify-between">
                  <span className="text-sm">Last Login</span>
                  <span className="text-sm text-muted-foreground">
                    {formatDate(new Date().toISOString())}
                  </span>
                </div>
              </CardContent>
            </Card>

            {/* Security Tips */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center space-x-2">
                  <AlertTriangle className="h-5 w-5" />
                  <span>Security Tips</span>
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-3">
                <div className="flex items-start space-x-2">
                  <CheckCircle className="h-4 w-4 text-green-500 mt-0.5" />
                  <p className="text-sm">Use a strong, unique password</p>
                </div>
                <div className="flex items-start space-x-2">
                  <CheckCircle className="h-4 w-4 text-green-500 mt-0.5" />
                  <p className="text-sm">Enable two-factor authentication</p>
                </div>
                <div className="flex items-start space-x-2">
                  <CheckCircle className="h-4 w-4 text-green-500 mt-0.5" />
                  <p className="text-sm">Keep your email notifications enabled</p>
                </div>
                <div className="flex items-start space-x-2">
                  <CheckCircle className="h-4 w-4 text-green-500 mt-0.5" />
                  <p className="text-sm">Regularly review your security settings</p>
                </div>
              </CardContent>
            </Card>
          </div>
        </div>
      </div>
    </MainLayout>
  );
}
│   │   │   │   # --- End: UserProfile.tsx ---

│   │   │   │   ├─ Vulnerabilities.tsx

│   │   │   │   # --- Begin: Vulnerabilities.tsx ---
import { useState } from 'react';
import { MainLayout } from '@/components/layout/main-layout';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Input } from '@/components/ui/input';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Separator } from '@/components/ui/separator';
import { 
  AlertTriangle, 
  Shield, 
  Search, 
  Filter, 
  Download, 
  Eye, 
  ExternalLink,
  Clock,
  Info,
  CheckCircle,
  XCircle,
  ChevronDown,
  ChevronRight,
  BarChart3,
  TrendingUp,
  Calendar,
  Package,
  GitBranch
} from 'lucide-react';
import { useProjects } from '@/hooks/use-api';
import { useNotificationsRealtime } from '@/hooks/use-notifications-realtime';
import type { Project, Issue, Dependency, SeverityLevel } from '@/types';

export default function Vulnerabilities() {
  const { isConnected } = useNotificationsRealtime();
  
  const [searchQuery, setSearchQuery] = useState('');
  const [selectedSeverity, setSelectedSeverity] = useState<string>('all');
  const [selectedProject, setSelectedProject] = useState<string>('all');
  const [expandedVulnerabilities, setExpandedVulnerabilities] = useState<Set<number>>(new Set());
  
  const { data: projects = [], isLoading } = useProjects();

  // Collect all vulnerabilities from all projects
  const allVulnerabilities: Array<{
    issue: Issue;
    dependency: Dependency;
    project: Project;
  }> = [];

  projects.forEach(project => {
    project.dependencies?.forEach(dependency => {
      dependency.issues?.forEach(issue => {
        allVulnerabilities.push({ issue, dependency, project });
      });
    });
  });

  // Filter vulnerabilities
  const filteredVulnerabilities = allVulnerabilities.filter(({ issue, project }) => {
    const matchesSearch = 
      issue.title.toLowerCase().includes(searchQuery.toLowerCase()) ||
      issue.description?.toLowerCase().includes(searchQuery.toLowerCase()) ||
      issue.cveId?.toLowerCase().includes(searchQuery.toLowerCase());
    
    const matchesSeverity = selectedSeverity === 'all' || issue.severity === selectedSeverity;
    const matchesProject = selectedProject === 'all' || project.id.toString() === selectedProject;
    
    return matchesSearch && matchesSeverity && matchesProject;
  });

  // Calculate statistics
  const totalVulnerabilities = allVulnerabilities.length;
  const criticalVulnerabilities = allVulnerabilities.filter(v => v.issue.severity === 'CRITICAL').length;
  const highVulnerabilities = allVulnerabilities.filter(v => v.issue.severity === 'HIGH').length;
  const mediumVulnerabilities = allVulnerabilities.filter(v => v.issue.severity === 'MEDIUM').length;
  const lowVulnerabilities = allVulnerabilities.filter(v => v.issue.severity === 'LOW').length;

  const toggleVulnerabilityExpansion = (issueId: number) => {
    const newExpanded = new Set(expandedVulnerabilities);
    if (newExpanded.has(issueId)) {
      newExpanded.delete(issueId);
    } else {
      newExpanded.add(issueId);
    }
    setExpandedVulnerabilities(newExpanded);
  };

  const getSeverityColor = (severity: SeverityLevel) => {
    switch (severity) {
      case 'CRITICAL':
        return 'destructive';
      case 'HIGH':
        return 'destructive';
      case 'MEDIUM':
        return 'default';
      case 'LOW':
        return 'secondary';
      default:
        return 'secondary';
    }
  };

  const getSeverityIcon = (severity: SeverityLevel) => {
    switch (severity) {
      case 'CRITICAL':
        return <XCircle className="h-4 w-4 text-destructive" />;
      case 'HIGH':
        return <AlertTriangle className="h-4 w-4 text-destructive" />;
      case 'MEDIUM':
        return <AlertTriangle className="h-4 w-4 text-orange-500" />;
      case 'LOW':
        return <AlertTriangle className="h-4 w-4 text-yellow-500" />;
      default:
        return <Info className="h-4 w-4 text-muted-foreground" />;
    }
  };

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'short',
      day: 'numeric'
    });
  };

  const getRemediationAdvice = (severity: SeverityLevel) => {
    switch (severity) {
      case 'CRITICAL':
        return 'Update immediately to prevent potential security breaches.';
      case 'HIGH':
        return 'Update as soon as possible to mitigate security risks.';
      case 'MEDIUM':
        return 'Update when convenient, but prioritize over low severity issues.';
      case 'LOW':
        return 'Update during regular maintenance cycles.';
      default:
        return 'Review and update as needed.';
    }
  };

  return (
    <MainLayout>
      <div className="space-y-6">
        {/* Header */}
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-3xl font-bold text-foreground">Vulnerabilities</h1>
            <p className="text-muted-foreground">
              Comprehensive vulnerability analysis and management
            </p>
          </div>
          <div className="flex items-center space-x-2">
            <Badge variant={isConnected ? "default" : "secondary"}>
              {isConnected ? "Connected" : "Disconnected"}
            </Badge>
            {criticalVulnerabilities > 0 && (
              <Badge variant="destructive">
                {criticalVulnerabilities} Critical
              </Badge>
            )}
          </div>
        </div>

        {/* Statistics Cards */}
        <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-5">
          <Card>
            <CardContent className="p-4">
              <div className="flex items-center space-x-2">
                <AlertTriangle className="h-4 w-4 text-primary" />
                <div>
                  <div className="text-2xl font-bold">{totalVulnerabilities}</div>
                  <div className="text-sm text-muted-foreground">Total</div>
                </div>
              </div>
            </CardContent>
          </Card>
          
          <Card>
            <CardContent className="p-4">
              <div className="flex items-center space-x-2">
                <XCircle className="h-4 w-4 text-destructive" />
                <div>
                  <div className="text-2xl font-bold text-destructive">{criticalVulnerabilities}</div>
                  <div className="text-sm text-muted-foreground">Critical</div>
                </div>
              </div>
            </CardContent>
          </Card>
          
          <Card>
            <CardContent className="p-4">
              <div className="flex items-center space-x-2">
                <AlertTriangle className="h-4 w-4 text-destructive" />
                <div>
                  <div className="text-2xl font-bold text-destructive">{highVulnerabilities}</div>
                  <div className="text-sm text-muted-foreground">High</div>
                </div>
              </div>
            </CardContent>
          </Card>
          
          <Card>
            <CardContent className="p-4">
              <div className="flex items-center space-x-2">
                <AlertTriangle className="h-4 w-4 text-orange-500" />
                <div>
                  <div className="text-2xl font-bold text-orange-500">{mediumVulnerabilities}</div>
                  <div className="text-sm text-muted-foreground">Medium</div>
                </div>
              </div>
            </CardContent>
          </Card>
          
          <Card>
            <CardContent className="p-4">
              <div className="flex items-center space-x-2">
                <AlertTriangle className="h-4 w-4 text-yellow-500" />
                <div>
                  <div className="text-2xl font-bold text-yellow-500">{lowVulnerabilities}</div>
                  <div className="text-sm text-muted-foreground">Low</div>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>

        {/* Filters */}
        <Card>
          <CardContent className="p-4">
            <div className="flex flex-col sm:flex-row gap-4">
              <div className="relative flex-1">
                <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground" />
                <Input
                  placeholder="Search vulnerabilities, CVE IDs, or descriptions..."
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                  className="pl-10"
                />
              </div>
              
              <Select value={selectedSeverity} onValueChange={setSelectedSeverity}>
                <SelectTrigger className="w-full sm:w-48">
                  <SelectValue placeholder="Filter by severity" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">All Severities</SelectItem>
                  <SelectItem value="CRITICAL">Critical</SelectItem>
                  <SelectItem value="HIGH">High</SelectItem>
                  <SelectItem value="MEDIUM">Medium</SelectItem>
                  <SelectItem value="LOW">Low</SelectItem>
                </SelectContent>
              </Select>
              
              <Select value={selectedProject} onValueChange={setSelectedProject}>
                <SelectTrigger className="w-full sm:w-48">
                  <SelectValue placeholder="Filter by project" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">All Projects</SelectItem>
                  {projects.map((project) => (
                    <SelectItem key={project.id} value={project.id.toString()}>
                      {project.name}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
              
              <Button variant="outline">
                <Download className="mr-2 h-4 w-4" />
                Export
              </Button>
            </div>
          </CardContent>
        </Card>

        {/* Vulnerabilities List */}
        <Card>
          <CardHeader>
            <CardTitle>Vulnerability Details</CardTitle>
            <CardDescription>
              {filteredVulnerabilities.length} vulnerability{filteredVulnerabilities.length !== 1 ? 's' : ''} found
            </CardDescription>
          </CardHeader>
          <CardContent>
            {isLoading ? (
              <div className="space-y-4">
                {[...Array(5)].map((_, i) => (
                  <div key={i} className="animate-pulse">
                    <div className="h-4 bg-muted rounded w-3/4 mb-2"></div>
                    <div className="h-3 bg-muted rounded w-1/2"></div>
                  </div>
                ))}
              </div>
            ) : filteredVulnerabilities.length === 0 ? (
              <div className="text-center py-8">
                <Shield className="h-12 w-12 text-green-500 mx-auto mb-4" />
                <h3 className="text-lg font-semibold mb-2">No vulnerabilities found</h3>
                <p className="text-muted-foreground">
                  {searchQuery || selectedSeverity !== 'all' || selectedProject !== 'all'
                    ? 'Try adjusting your filters.'
                    : 'Great! No vulnerabilities detected in your projects.'}
                </p>
              </div>
            ) : (
              <div className="space-y-4">
                {filteredVulnerabilities.map(({ issue, dependency, project }) => {
                  const isExpanded = expandedVulnerabilities.has(issue.id);
                  return (
                    <div key={`${issue.id}-${dependency.id}-${project.id}`} className="border rounded-lg">
                      {/* Vulnerability Header */}
                      <div 
                        className="p-4 cursor-pointer hover:bg-muted/50 transition-colors"
                        onClick={() => toggleVulnerabilityExpansion(issue.id)}
                      >
                        <div className="flex items-center justify-between">
                          <div className="flex items-center space-x-3">
                            <div className="flex-shrink-0">
                              {getSeverityIcon(issue.severity)}
                            </div>
                            <div className="flex-1 min-w-0">
                              <div className="flex items-center space-x-2 mb-1">
                                <h3 className="font-medium truncate">{issue.title}</h3>
                                <Badge variant={getSeverityColor(issue.severity)}>
                                  {issue.severity}
                                </Badge>
                                {issue.cveId && (
                                  <Badge variant="outline" className="font-mono text-xs">
                                    {issue.cveId}
                                  </Badge>
                                )}
                              </div>
                              <div className="flex items-center space-x-4 text-sm text-muted-foreground">
                                <div className="flex items-center space-x-1">
                                  <Package className="h-3 w-3" />
                                  <span>{dependency.name}@{dependency.version}</span>
                                </div>
                                <div className="flex items-center space-x-1">
                                  <GitBranch className="h-3 w-3" />
                                  <span>{project.name}</span>
                                </div>
                                <div className="flex items-center space-x-1">
                                  <Calendar className="h-3 w-3" />
                                  <span>{formatDate(issue.createdAt)}</span>
                                </div>
                              </div>
                            </div>
                          </div>
                          <div className="flex items-center space-x-2">
                            <Button variant="ghost" size="sm">
                              <ExternalLink className="h-4 w-4" />
                            </Button>
                            {isExpanded ? (
                              <ChevronDown className="h-4 w-4" />
                            ) : (
                              <ChevronRight className="h-4 w-4" />
                            )}
                          </div>
                        </div>
                      </div>

                      {/* Expanded Details */}
                      {isExpanded && (
                        <div className="px-4 pb-4 space-y-4">
                          <Separator />
                          
                          <div className="grid gap-4 md:grid-cols-2">
                            <div>
                              <h4 className="font-medium mb-2">Description</h4>
                              <p className="text-sm text-muted-foreground">
                                {issue.description || 'No description available.'}
                              </p>
                            </div>
                  
                            <div>
                              <h4 className="font-medium mb-2">Remediation</h4>
                              <p className="text-sm text-muted-foreground">
                                {getRemediationAdvice(issue.severity)}
                              </p>
                            </div>
                          </div>

                          <div className="grid gap-4 md:grid-cols-3">
                            <div>
                              <h4 className="font-medium mb-2">Affected Package</h4>
                              <div className="space-y-1">
                                <p className="text-sm font-medium">{dependency.name}</p>
                                <p className="text-sm text-muted-foreground">Version: {dependency.version}</p>
                              </div>
                            </div>
                  
                            <div>
                              <h4 className="font-medium mb-2">Project</h4>
                              <div className="space-y-1">
                                <p className="text-sm font-medium">{project.name}</p>
                                <p className="text-sm text-muted-foreground">
                                  {project.totalDependencies || 0} dependencies
                                </p>
                              </div>
                            </div>
                  
                            <div>
                              <h4 className="font-medium mb-2">Discovery Date</h4>
                              <p className="text-sm text-muted-foreground">
                                {formatDate(issue.createdAt)}
                              </p>
                            </div>
                          </div>

                          <div className="flex space-x-2">
                            <Button variant="outline" size="sm">
                              <Eye className="mr-2 h-4 w-4" />
                              View Details
                            </Button>
                            <Button variant="outline" size="sm">
                              <ExternalLink className="mr-2 h-4 w-4" />
                              CVE Details
                            </Button>
                            <Button variant="outline" size="sm">
                              <CheckCircle className="mr-2 h-4 w-4" />
                              Mark as Resolved
                            </Button>
                          </div>
                        </div>
                      )}
                    </div>
                  );
                })}
              </div>
            )}
          </CardContent>
        </Card>

        {/* Security Recommendations */}
        {criticalVulnerabilities > 0 && (
          <Alert variant="destructive">
            <AlertTriangle className="h-4 w-4" />
            <AlertDescription>
              <strong>{criticalVulnerabilities} critical vulnerabilities</strong> require immediate attention. 
              Please update affected dependencies as soon as possible to prevent potential security breaches.
            </AlertDescription>
          </Alert>
        )}

        {/* Vulnerability Trends */}
        <Card>
          <CardHeader>
            <CardTitle>Vulnerability Trends</CardTitle>
            <CardDescription>
              Security posture over time
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4">
              <div className="text-center p-4 bg-destructive/10 rounded-lg border border-destructive/20">
                <div className="text-2xl font-bold text-destructive">{criticalVulnerabilities}</div>
                <div className="text-sm text-muted-foreground">Critical</div>
                <div className="text-xs text-muted-foreground mt-1">Immediate action required</div>
              </div>
              
              <div className="text-center p-4 bg-orange-100 rounded-lg border border-orange-200">
                <div className="text-2xl font-bold text-orange-600">{highVulnerabilities}</div>
                <div className="text-sm text-muted-foreground">High</div>
                <div className="text-xs text-muted-foreground mt-1">Update soon</div>
              </div>
              
              <div className="text-center p-4 bg-yellow-100 rounded-lg border border-yellow-200">
                <div className="text-2xl font-bold text-yellow-600">{mediumVulnerabilities}</div>
                <div className="text-sm text-muted-foreground">Medium</div>
                <div className="text-xs text-muted-foreground mt-1">Monitor closely</div>
              </div>
              
              <div className="text-center p-4 bg-green-100 rounded-lg border border-green-200">
                <div className="text-2xl font-bold text-green-600">{lowVulnerabilities}</div>
                <div className="text-sm text-muted-foreground">Low</div>
                <div className="text-xs text-muted-foreground mt-1">Low priority</div>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>
    </MainLayout>
  );
}

│   │   │   │   # --- End: Vulnerabilities.tsx ---

│   │   │   ├─ tests/
│   │   │   ├─ types/
│   │   │   │   ├─ index.ts

│   │   │   │   # --- Begin: index.ts ---
// Core Types
export interface User {
  id: number;
  email: string;
  name: string;
  role: 'user' | 'admin';
  emailNotifications: boolean;
  dailyDigest: boolean;
  securityAlerts: boolean;
  alertFrequency: 'immediate' | 'daily' | 'weekly';
  createdAt: string;
}

export interface Project {
  id: number;
  name: string;
  description?: string;
  userId: number;
  createdAt: string;
  dependencies?: Dependency[];
  collaborators?: Collaborator[];
  totalDependencies?: number;
  totalVulnerabilities?: number;
}

export interface Dependency {
  id: number;
  name: string;
  version: string;
  projectId: number;
  issues?: Issue[];
}

export interface Issue {
  id: number;
  title: string;
  description?: string;
  severity: 'CRITICAL' | 'HIGH' | 'MEDIUM' | 'LOW';
  dependencyId: number;
  cveId?: string;
  createdAt: string;
}

export interface Notification {
  id: number;
  message: string;
  type: 'system' | 'security' | 'scan' | 'collaboration';
  metadata?: string; // JSON string
  read: boolean;
  userId: number;
  createdAt: string;
}

export interface Collaborator {
  id: number;
  userId: number;
  projectId: number;
  role: string;
  invitedAt: string;
  user?: User;
}

export interface AuditLog {
  id: number;
  userId?: number;
  user?: User;
  action: string;
  details?: string;
  createdAt: string;
}

// API Request/Response Types
export interface AuthResponse {
  token: string;
  user: User;
}

export interface LoginData {
  email: string;
  password: string;
}

export interface RegisterData {
  email: string;
  password: string;
  name: string;
}

export interface UpdateProfileData {
  name?: string;
  emailNotifications?: boolean;
  dailyDigest?: boolean;
  securityAlerts?: boolean;
  alertFrequency?: string;
}

export interface CreateProjectData {
  name: string;
  description?: string;
}

export interface ScanResult {
  totalDependencies: number;
  totalVulnerabilities: number;
  criticalVulnerabilities: number;
  highVulnerabilities?: number;
  mediumVulnerabilities?: number;
  lowVulnerabilities?: number;
  scanDate: string;
  results: ScanDependencyResult[];
  projectId?: number;
  lastScan?: string;
  dependencies?: Dependency[];
}

export interface ScanDependencyResult {
  dependency: Dependency;
  vulnerabilities: Issue[];
  vulnerabilityCount: number;
  error?: string;
}

export interface ScanHistory {
  id: number;
  scanDate: string;
  totalDependencies: number;
  totalVulnerabilities: number;
  criticalVulnerabilities: number;
  highVulnerabilities: number;
  mediumVulnerabilities: number;
  lowVulnerabilities: number;
}

export interface NotificationResponse {
  notifications: Notification[];
  pagination: {
    page: number;
    limit: number;
    total: number;
    pages: number;
  };
}

export interface NotificationParams {
  page?: number;
  limit?: number;
  type?: string;
}

export interface AlertConfig {
  emailNotifications: boolean;
  dailyDigest: boolean;
  securityAlerts: boolean;
  alertFrequency: string;
}

export interface UnreadCountResponse {
  count: number;
}

// SSE Event Types
export interface SSEEvent {
  type: 'connected' | 'new_notification' | 'unread_count' | 'heartbeat';
  message?: string;
  notification?: Notification;
  count?: number;
  timestamp?: number;
}

// Component Props Types
export interface ProtectedRouteProps {
  children: React.ReactNode;
  adminOnly?: boolean;
}

export interface FileUploadProps {
  onUpload: (file: File) => Promise<ScanResult>;
  projectId: number;
}

export interface ProjectCardProps {
  project: Project;
  onView: (id: number) => void;
  onScan: (id: number) => void;
}

export interface VulnerabilityCardProps {
  issue: Issue;
  dependency: Dependency;
}

export interface NotificationCardProps {
  notification: Notification;
  onMarkAsRead: (id: number) => void;
}

// Form Types
export interface LoginFormData {
  email: string;
  password: string;
  rememberMe?: boolean;
}

export interface RegisterFormData {
  name: string;
  email: string;
  password: string;
  confirmPassword: string;
  agreeTerms: boolean;
}

export interface ProjectFormData {
  name: string;
  description: string;
}

export interface AlertConfigFormData {
  emailNotifications: boolean;
  dailyDigest: boolean;
  securityAlerts: boolean;
  alertFrequency: 'immediate' | 'daily' | 'weekly';
}

// Chart Data Types
export interface VulnerabilityChartData {
  name: string;
  critical: number;
  high: number;
  medium: number;
  low: number;
}

export interface SecurityScoreData {
  name: string;
  score: number;
  maxScore: number;
}

export interface ScanTrendData {
  date: string;
  vulnerabilities: number;
  dependencies: number;
}

// Utility Types
export type SeverityLevel = 'CRITICAL' | 'HIGH' | 'MEDIUM' | 'LOW';
export type NotificationType = 'system' | 'security' | 'scan' | 'collaboration';
export type AlertFrequency = 'immediate' | 'daily' | 'weekly';
export type ExportFormat = 'pdf' | 'csv';

// API Error Types
export interface ApiError {
  error: string;
  details?: string;
  status?: number;
}

// File Upload Types
export interface UploadProgress {
  loaded: number;
  total: number;
  percentage: number;
}

export interface SupportedFileType {
  extension: string;
  name: string;
  description: string;
  examples: string[];
}

// Dashboard Stats Types
export interface DashboardStats {
  totalProjects: number;
  totalVulnerabilities: number;
  criticalVulnerabilities: number;
  securityScore: number;
  recentScans: number;
  unreadNotifications: number;
}

// Search and Filter Types
export interface SearchFilters {
  query?: string;
  severity?: SeverityLevel[];
  type?: NotificationType[];
  dateRange?: {
    start: string;
    end: string;
  };
}

export interface PaginationParams {
  page: number;
  limit: number;
  sortBy?: string;
  sortOrder?: 'asc' | 'desc';
} 
│   │   │   │   # --- End: index.ts ---

│   ├─ server/
│   │   ├─ .env

│   │   # --- Begin: .env ---
DATABASE_URL=postgresql://postgres.jzjdmgomjdwsyrcgewqh:sushantno111@aws-0-ap-southeast-1.pooler.supabase.com:6543/postgres
EMAIL_USER=sushantgavaraskar18@gmail.com
EMAIL_PASS=vgpz jdlm mgvd ksbb
EMAIL_FROM=sushantgavaraskar18@gmail.com
JWT_SECRET=vulnwatchdog_jwt_secret_key_2024
SNYK_TOKEN=hiiamsrggavaraskarusingsybkpleaseignore
│   │   # --- End: .env ---

│   │   ├─ .gitignore

│   │   # --- Begin: .gitignore ---
# Dependencies
node_modules/
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Environment variables
.env
.env.local
.env.development.local
.env.test.local
.env.production.local

# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Coverage directory used by tools like istanbul
coverage/
*.lcov

# nyc test coverage
.nyc_output

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules/
jspm_packages/

# TypeScript v1 declaration files
typings/

# TypeScript cache
*.tsbuildinfo

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Microbundle cache
.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variables file
.env
.env.test

# parcel-bundler cache (https://parceljs.org/)
.cache
.parcel-cache

# Next.js build output
.next

# Nuxt.js build / generate output
.nuxt
dist

# Gatsby files
.cache/
# Comment in the public line in if your project uses Gatsby and not Next.js
# https://nextjs.org/blog/next-9-1#public-directory-support
# public

# vuepress build output
.vuepress/dist

# Serverless directories
.serverless/

# FuseBox cache
.fusebox/

# DynamoDB Local files
.dynamodb/

# TernJS port file
.tern-port

# Stores VSCode versions used for testing VSCode extensions
.vscode-test

# yarn v2
.yarn/cache
.yarn/unplugged
.yarn/build-state.yml
.yarn/install-state.gz
.pnp.*

# Prisma
prisma/migrations/
prisma/dev.db
prisma/dev.db-journal

# Uploads
uploads/
*.tmp
*.temp

# OS generated files
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# IDE files
.vscode/
.idea/
*.swp
*.swo
*~

# Test files
test-results/
coverage/
.nyc_output/

# Build artifacts
dist/
build/
*.tgz

# Temporary files
*.tmp
*.temp
temp/
tmp/

# Test files
test*.js
debug*.js
apiTest.js
test-fixes.js
test-upload.js
test-email-config.js

# Documentation files (except README.md)
*.md
!README.md

# Production files
PRODUCTION_*.md
WEBSOCKET_*.md
API_ROUTES_*.md
PRODUCTION_FILE_UPLOAD.md

# Backup files
*.bak
*.backup

# SSL certificates
*.pem
*.key
*.crt

# Docker
.dockerignore
Dockerfile.prod

# PM2
.pm2/ 
│   │   # --- End: .gitignore ---

│   │   ├─ app.js

│   │   # --- Begin: app.js ---
const express = require('express');
const cors = require('cors');
const dotenv = require('dotenv');
const errorHandler = require('./middlewares/errorHandler');
const { apiLimiter, authLimiter, uploadLimiter } = require('./middlewares/rateLimiter');
const logger = require('./utils/logger');
const swaggerUi = require('swagger-ui-express');
const swaggerJsdoc = require('swagger-jsdoc');

const swaggerOptions = {
  definition: {
    openapi: '3.0.0',
    info: {
      title: 'VulnWatchdog API',
      version: '1.0.0',
      description: 'API documentation for VulnWatchdog',
    },
    servers: [
      { url: 'http://localhost:5000' }
    ],
  },
  apis: ['./routes/*.js', './controllers/*.js'],
};
const swaggerSpec = swaggerJsdoc(swaggerOptions);

dotenv.config();

const app = express();

// Security middleware
app.use(cors());
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true, limit: '10mb' }));

// Logging middleware
app.use(logger.logRequest);

// Rate limiting
app.use('/api/auth', authLimiter);
app.use('/api/scan', uploadLimiter);
app.use('/api', apiLimiter);

// Routes
app.use('/api/auth', require('./routes/auth'));
app.use('/api/user', require('./routes/user'));
app.use('/api/project', require('./routes/project'));
app.use('/api/scan', require('./routes/scan'));
app.use('/api/alerts', require('./routes/alerts'));
app.use('/api/notifications', require('./routes/notifications'));
app.use('/api/admin', require('./routes/admin'));
app.use('/api/docs', swaggerUi.serve, swaggerUi.setup(swaggerSpec));

// Health check endpoint
app.get('/health', (req, res) => {
  res.json({ status: 'OK', timestamp: new Date().toISOString() });
});

// API health check endpoint
app.get('/api/health', (req, res) => {
  res.json({ status: 'OK', timestamp: new Date().toISOString() });
});

// Error handling
app.use(errorHandler);

module.exports = app;

│   │   # --- End: app.js ---

│   │   ├─ deploy.sh

│   │   # --- Begin: deploy.sh ---
#!/bin/sh

# Production deployment script for VulnWatchdog Backend

echo "🚀 Starting VulnWatchdog Backend..."

# Check if required environment variables are set
if [ -z "$DATABASE_URL" ]; then
    echo "❌ Error: DATABASE_URL is not set"
    exit 1
fi

if [ -z "$JWT_SECRET" ]; then
    echo "❌ Error: JWT_SECRET is not set"
    exit 1
fi

echo "✅ Environment variables validated"

# Generate Prisma client
echo "🔧 Generating Prisma client..."
npx prisma generate

if [ $? -ne 0 ]; then
    echo "❌ Failed to generate Prisma client"
    exit 1
fi

# Run database migrations
echo "🗄️ Running database migrations..."
npx prisma migrate deploy

if [ $? -ne 0 ]; then
    echo "❌ Failed to run database migrations"
    exit 1
fi

# Create uploads directory if it doesn't exist
echo "📁 Creating uploads directory..."
mkdir -p uploads

# Start the application
echo "🚀 Starting application..."
node server.js 
│   │   # --- End: deploy.sh ---

│   │   ├─ docker-compose.yml

│   │   # --- Begin: docker-compose.yml ---
version: '3.8'

services:
  backend:
    build: .
    ports:
      - "5000:5000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://postgres:vulnwatchdog_password@postgres:5432/vulnwatchdog
      - JWT_SECRET=${JWT_SECRET}
      - EMAIL_USER=${EMAIL_USER}
      - EMAIL_PASS=${EMAIL_PASS}
      - EMAIL_FROM=${EMAIL_FROM}
    depends_on:
      - postgres
    restart: unless-stopped
    volumes:
      - uploads:/app/uploads
    networks:
      - vulnwatchdog-network

  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: vulnwatchdog
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: vulnwatchdog_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - vulnwatchdog-network
    ports:
      - "5432:5432"

volumes:
  postgres_data:
  uploads:

networks:
  vulnwatchdog-network:
    driver: bridge 
│   │   # --- End: docker-compose.yml ---

│   │   ├─ Dockerfile

│   │   # --- Begin: Dockerfile ---
FROM node:20-alpine
WORKDIR /app

# Install dependencies for Prisma
RUN apk add --no-cache openssl

# Copy package files
COPY package.json package-lock.json ./

# Install dependencies
RUN npm ci --only=production

# Copy source code
COPY . .

# Generate Prisma client
RUN npx prisma generate

# Create uploads directory
RUN mkdir -p uploads

EXPOSE 5000

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD node -e "require('http').get('http://localhost:5000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"

CMD ["npm", "run", "start:cloud"]
│   │   # --- End: Dockerfile ---

│   │   ├─ package.json

│   │   # --- Begin: package.json ---
{
  "name": "vulnwatchdog-backend",
  "version": "1.0.0",
  "description": "Backend API for VulnWatchdog - Automated Dependency Vulnerability Monitor",
  "main": "server.js",
  "scripts": {
    "start": "node server.js",
    "start:prod": "sh deploy.sh",
    "start:cloud": "npx prisma generate && node server.js",
    "dev": "nodemon server.js",
    "test": "echo \"Error: no test specified\" && exit 1",
    "db:migrate": "npx prisma migrate deploy",
    "db:generate": "npx prisma generate",
    "db:studio": "npx prisma studio",
    "build": "npx prisma generate"
  },
  "keywords": [
    "vulnerability",
    "security",
    "dependencies",
    "monitoring",
    "api",
    "nodejs",
    "express"
  ],
  "author": "VulnWatchdog Team",
  "license": "MIT",
  "dependencies": {
    "@prisma/client": "^5.22.0",
    "aws-sdk": "^2.1531.0",
    "axios": "^1.6.0",
    "bcryptjs": "^2.4.3",
    "cors": "^2.8.5",
    "dotenv": "^16.3.1",
    "express": "^4.18.2",
    "express-rate-limit": "^7.1.5",
    "express-validator": "^7.0.1",
    "form-data": "^4.0.0",
    "helmet": "^7.1.0",
    "jsonwebtoken": "^9.0.2",
    "multer": "^2.0.0-rc.3",
    "node-cron": "^3.0.3",
    "nodemailer": "^6.9.7",
    "prisma": "^5.6.0",
    "swagger-jsdoc": "^6.2.8",
    "swagger-ui-express": "^5.0.0",
    "xml2js": "^0.6.2"
  },
  "devDependencies": {
    "nodemon": "^3.0.2"
  },
  "engines": {
    "node": ">=18.0.0"
  }
}

│   │   # --- End: package.json ---

│   │   ├─ server.js

│   │   # --- Begin: server.js ---
const app = require('./app');
const prisma = require('./config/db');

const PORT = process.env.PORT || 10000; // Render sets PORT

process.on('uncaughtException', (err) => {
  console.error('Uncaught Exception:', err);
  process.exit(1);
});
process.on('unhandledRejection', (reason, promise) => {
  console.error('Unhandled Rejection:', reason);
  process.exit(1);
});

async function start() {
  try {
    await prisma.$connect();
    console.log('✅ Connected to DB:', process.env.DATABASE_URL);
    
    // Initialize background jobs after DB connection
    const dailyScan = require('./jobs/dailyScan');
    dailyScan();
    const alertScheduler = require('./jobs/alertScheduler');
    alertScheduler();
    console.log('✅ Background jobs initialized');
    
  } catch (e) {
    console.error('❌ DB connection failed:', e.message);
    console.log('⚠️ Starting server without database connection...');
  }
  
  app.listen(PORT, '0.0.0.0', () => {
    console.log(`Server running at http://0.0.0.0:${PORT}`);
  });
}

start();

│   │   # --- End: server.js ---

│   │   ├─ config/
│   │   │   ├─ db.js

│   │   │   # --- Begin: db.js ---
// Database config for Prisma
const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

module.exports = prisma;
│   │   │   # --- End: db.js ---

│   │   │   ├─ env.js

│   │   │   # --- Begin: env.js ---
// Load environment variables
require('dotenv').config();
│   │   │   # --- End: env.js ---

│   │   │   ├─ externalApis.js

│   │   │   # --- Begin: externalApis.js ---
// External API config
module.exports = {
  osvApiUrl: 'https://api.osv.dev/v1/query',
  snykApiUrl: 'https://snyk.io/api/v1/',
  snykToken: process.env.SNYK_TOKEN,
};
│   │   │   # --- End: externalApis.js ---

│   │   ├─ controllers/
│   │   │   ├─ alertController.js

│   │   │   # --- Begin: alertController.js ---
const prisma = require('../config/db');
const emailService = require('../services/emailService');

exports.setAlertConfig = async (req, res) => {
  try {
    const userId = req.user.id;
    const { emailNotifications, dailyDigest, securityAlerts, alertFrequency } = req.body;
    await prisma.user.update({
      where: { id: userId },
      data: { emailNotifications, dailyDigest, securityAlerts, alertFrequency }
    });
    res.json({ status: 'Alert config saved' });
  } catch (e) {
    res.status(500).json({ error: e.message });
  }
};

exports.sendTestAlert = async (req, res) => {
  try {
    const user = await prisma.user.findUnique({ where: { id: req.user.id } });
    const result = await emailService.sendAlert(user, { subject: 'Test Alert', text: 'This is a test alert.' });
    
    if (result.success) {
      res.json({ status: 'Test alert sent successfully' });
    } else {
      // Don't fail the test if email is not configured
      res.json({ 
        status: 'Test alert processed', 
        message: result.message,
        note: 'Email not sent due to configuration issues'
      });
    }
  } catch (e) {
    res.status(500).json({ error: e.message });
  }
};
│   │   │   # --- End: alertController.js ---

│   │   │   ├─ authController.js

│   │   │   # --- Begin: authController.js ---
const authService = require('../services/authService');
const prisma = require('../config/db');

exports.register = async (req, res) => {
  try {
    const { email, password, name, role } = req.body;
    const user = await authService.register({ email, password, name, role });
    
    // Generate JWT token for the new user
    const jwt = require('jsonwebtoken');
    const token = jwt.sign(
      { id: user.id, role: user.role || 'user' }, 
      process.env.JWT_SECRET || 'devsecret'
    );
    
    res.json({ 
      token,
      user: {
        id: user.id,
        email: user.email,
        name: user.name,
        role: user.role || 'user'
      }
    });
  } catch (e) {
    res.status(500).json({ error: e.message });
  }
};

exports.login = async (req, res) => {
  try {
    const { email, password } = req.body;
    const result = await authService.login(email, password);
    if (!result) return res.status(401).json({ error: 'Invalid' });
    res.json(result);
  } catch (e) {
    res.status(500).json({ error: e.message });
  }
};

exports.logout = async (req, res) => {
  // JWT is stateless; client should delete token
  res.json({ status: 'Logged out' });
};

exports.forgotPassword = async (req, res) => {
  try {
    const { email } = req.body;
    // Find user
    const user = await prisma.user.findUnique({ where: { email } });
    if (!user) return res.json({ status: 'If that email exists, a reset link will be sent.' });
    // TODO: Generate reset token, save to DB, send email
    // For now, just mock
    // await emailService.sendReset(user, token)
    res.json({ status: 'If that email exists, a reset link will be sent.' });
  } catch (e) {
    res.status(500).json({ error: e.message });
  }
};
│   │   │   # --- End: authController.js ---

│   │   │   ├─ notificationController.js

│   │   │   # --- Begin: notificationController.js ---
const prisma = require('../config/db');
const NotificationService = require('../services/notificationService');

// Store active SSE connections
const sseConnections = new Map();

exports.listNotifications = async (req, res) => {
  try {
    const { page = 1, limit = 20, type } = req.query;
    const userId = req.user.id;

    const result = await NotificationService.getUserNotifications(
      userId, 
      parseInt(page), 
      parseInt(limit), 
      type
    );

    res.json(result);
  } catch (error) {
    console.error('Error listing notifications:', error);
    res.status(500).json({ error: 'Failed to retrieve notifications' });
  }
};

exports.streamNotifications = async (req, res) => {
  const userId = req.user.id;

  // Set SSE headers
  res.writeHead(200, {
    'Content-Type': 'text/event-stream',
    'Cache-Control': 'no-cache',
    'Connection': 'keep-alive',
    'Access-Control-Allow-Origin': '*',
    'Access-Control-Allow-Headers': 'Cache-Control'
  });

  // Send initial connection message
  res.write(`data: ${JSON.stringify({ type: 'connected', message: 'SSE connection established' })}\n\n`);

  // Store connection for this user
  sseConnections.set(userId, res);

  // Send current unread count
  try {
    const unreadCount = await NotificationService.getUnreadCount(userId);
    res.write(`data: ${JSON.stringify({ type: 'unread_count', count: unreadCount })}\n\n`);
  } catch (error) {
    console.error('Error getting unread count for SSE:', error);
  }

  // Handle client disconnect
  req.on('close', () => {
    sseConnections.delete(userId);
    console.log(`SSE connection closed for user ${userId}`);
  });

  // Keep connection alive with heartbeat
  const heartbeat = setInterval(() => {
    if (sseConnections.has(userId)) {
      res.write(`data: ${JSON.stringify({ type: 'heartbeat', timestamp: Date.now() })}\n\n`);
    } else {
      clearInterval(heartbeat);
    }
  }, 30000); // 30 second heartbeat
};

// Function to send notification to specific user via SSE
exports.sendNotificationToUser = async (userId, notification) => {
  const connection = sseConnections.get(userId);
  if (connection) {
    try {
      connection.write(`data: ${JSON.stringify({ type: 'new_notification', notification })}\n\n`);
    } catch (error) {
      console.error('Error sending SSE notification:', error);
      sseConnections.delete(userId);
    }
  }
};

// Function to update unread count for user
exports.updateUnreadCount = async (userId) => {
  const connection = sseConnections.get(userId);
  if (connection) {
    try {
      const unreadCount = await NotificationService.getUnreadCount(userId);
      connection.write(`data: ${JSON.stringify({ type: 'unread_count', count: unreadCount })}\n\n`);
    } catch (error) {
      console.error('Error updating unread count via SSE:', error);
    }
  }
};

exports.markAsRead = async (req, res) => {
  try {
    const { notificationId } = req.body;
    const userId = req.user.id;

    if (!notificationId) {
      return res.status(400).json({ error: 'Notification ID is required' });
    }

    const notification = await NotificationService.markAsRead(notificationId, userId);
    
    // Update unread count via SSE
    await this.updateUnreadCount(userId);
    
    res.json({ status: 'Notification marked as read', notification });
  } catch (error) {
    console.error('Error marking notification as read:', error);
    res.status(500).json({ error: 'Failed to mark notification as read' });
  }
};

exports.markAllAsRead = async (req, res) => {
  try {
    const userId = req.user.id;
    await NotificationService.markAllAsRead(userId);
    
    // Update unread count via SSE
    await this.updateUnreadCount(userId);
    
    res.json({ status: 'All notifications marked as read' });
  } catch (error) {
    console.error('Error marking all notifications as read:', error);
    res.status(500).json({ error: 'Failed to mark notifications as read' });
  }
};

exports.getUnreadCount = async (req, res) => {
  try {
    const userId = req.user.id;
    const count = await NotificationService.getUnreadCount(userId);
    res.json({ unreadCount: count });
  } catch (error) {
    console.error('Error getting unread count:', error);
    res.status(500).json({ error: 'Failed to get unread count' });
  }
};

exports.createTestNotification = async (req, res) => {
  try {
    const userId = req.user.id;
    const { message, type = 'system' } = req.body;

    if (!message) {
      return res.status(400).json({ error: 'Message is required' });
    }

    const notification = await NotificationService.createNotification(
      userId, 
      message, 
      type
    );

    // Send notification via SSE if user is connected
    await this.sendNotificationToUser(userId, notification);
    
    // Update unread count via SSE
    await this.updateUnreadCount(userId);

    res.json({ status: 'Test notification created', notification });
  } catch (error) {
    console.error('Error creating test notification:', error);
    res.status(500).json({ error: 'Failed to create test notification' });
  }
};

// Admin functions (moved from admin routes)
exports.listUsers = async (req, res) => {
  try {
    const users = await prisma.user.findMany({
      select: {
        id: true,
        email: true,
        name: true,
        role: true,
        createdAt: true,
        emailNotifications: true,
        securityAlerts: true
      }
    });
    res.json(users);
  } catch (error) {
    console.error('Error listing users:', error);
    res.status(500).json({ error: 'Failed to retrieve users' });
  }
};

exports.listProjects = async (req, res) => {
  try {
    const projects = await prisma.project.findMany({
      include: {
        user: {
          select: {
            id: true,
            email: true,
            name: true
          }
        },
        dependencies: {
          include: {
            issues: true
          }
        }
      }
    });
    res.json(projects);
  } catch (error) {
    console.error('Error listing projects:', error);
    res.status(500).json({ error: 'Failed to retrieve projects' });
  }
};

exports.listAuditLogs = async (req, res) => {
  try {
    const logs = await prisma.auditLog.findMany({
      include: {
        user: {
          select: {
            id: true,
            email: true,
            name: true
          }
        }
      },
      orderBy: { createdAt: 'desc' }
    });
    res.json(logs);
  } catch (error) {
    console.error('Error listing audit logs:', error);
    res.status(500).json({ error: 'Failed to retrieve audit logs' });
  }
};
│   │   │   # --- End: notificationController.js ---

│   │   │   ├─ projectController.js

│   │   │   # --- Begin: projectController.js ---
const prisma = require('../config/db');

exports.createProject = async (req, res) => {
  try {
    const { name, description } = req.body;
    const userId = req.user.id;
    const project = await prisma.project.create({ data: { name, description, userId } });
    res.json(project);
  } catch (e) {
    res.status(500).json({ error: e.message });
  }
};

exports.getProjects = async (req, res) => {
  try {
    const userId = req.user.id;
    const projects = await prisma.project.findMany({ where: { userId } });
    res.json(projects);
  } catch (e) {
    res.status(500).json({ error: e.message });
  }
};

exports.getProjectDetails = async (req, res) => {
  try {
    const { id } = req.params;
    const userId = req.user.id;
    const project = await prisma.project.findUnique({
      where: { id: Number(id), userId },
      include: { dependencies: { include: { issues: true } }, collaborators: true }
    });
    if (!project) return res.status(404).json({ error: 'Not found' });
    res.json(project);
  } catch (e) {
    res.status(500).json({ error: e.message });
  }
};

exports.addCollaborator = async (req, res) => {
  try {
    const { id } = req.params;
    const { email } = req.body;
    const userId = req.user.id;
    const project = await prisma.project.findUnique({ where: { id: Number(id), userId } });
    if (!project) return res.status(403).json({ error: 'Forbidden' });
    const user = await prisma.user.findUnique({ where: { email } });
    if (!user) return res.status(404).json({ error: 'User not found' });
    await prisma.collaborator.create({ data: { userId: user.id, projectId: Number(id) } });
    res.json({ status: 'Collaborator added' });
  } catch (e) {
    res.status(500).json({ error: e.message });
  }
};

exports.exportProject = async (req, res) => {
  try {
    // Placeholder: implement PDF/CSV export logic
    res.json({ status: 'Export not implemented yet' });
  } catch (e) {
    res.status(500).json({ error: e.message });
  }
};
│   │   │   # --- End: projectController.js ---

│   │   │   ├─ scanController.js

│   │   │   # --- Begin: scanController.js ---
const prisma = require('../config/db');
const fileParser = require('../utils/fileParser');
const cveFetcher = require('../utils/cveFetcher');
const dependencyService = require('../services/dependencyService');
const NotificationService = require('../services/notificationService');
const { cleanupFile } = require('../utils/uploadConfig');
const fs = require('fs');

exports.initiateScan = async (req, res) => {
  let uploadedFilePath = null;
  
  try {
    const { projectId } = req.body;
    const file = req.file;
    const userId = req.user.id;

    // Validate project ownership
    const project = await prisma.project.findUnique({ 
      where: { id: Number(projectId), userId } 
    });
    
    if (!project) {
      return res.status(403).json({ error: 'Project not found or access denied' });
    }

    if (!file) {
      return res.status(400).json({ error: 'No file uploaded' });
    }

    uploadedFilePath = file.path;

    // Read and parse the uploaded file
    const fileContent = fs.readFileSync(file.path, 'utf-8');
    const deps = fileParser.detectAndParse(fileContent, file.originalname);

    if (!deps || deps.length === 0) {
      return res.status(400).json({ 
        error: 'No dependencies found in the uploaded file',
        supportedFiles: ['package.json', 'requirements.txt', 'pom.xml', 'Gemfile', 'composer.json', 'go.mod']
      });
    }

    let results = [];
    
    // Process each dependency
    for (const dep of deps) {
      try {
        // Fetch CVE data for the dependency
        const issues = await cveFetcher.fetchCVEs(dep);
        
        // Save dependency to database
        const dbDep = await prisma.dependency.create({ 
          data: { 
            name: dep.name, 
            version: dep.version, 
            projectId: Number(projectId) 
          } 
        });

        // Save issues to database
        for (const issue of issues) {
          await prisma.issue.create({ 
            data: { 
              title: issue.title, 
              description: issue.description, 
              severity: issue.severity, 
              dependencyId: dbDep.id, 
              cveId: issue.cveId 
            } 
          });
        }

        results.push({ 
          dependency: { ...dbDep }, 
          vulnerabilities: issues,
          vulnerabilityCount: issues.length
        });
        
      } catch (depError) {
        console.error(`Error processing dependency ${dep.name}:`, depError);
        // Continue with other dependencies even if one fails
        results.push({ 
          dependency: { name: dep.name, version: dep.version }, 
          error: 'Failed to process dependency',
          vulnerabilities: []
        });
      }
    }

    // Calculate summary statistics
    const totalDependencies = results.length;
    const totalVulnerabilities = results.reduce((sum, result) => 
      sum + (result.vulnerabilities ? result.vulnerabilities.length : 0), 0
    );
    const criticalVulnerabilities = results.reduce((sum, result) => 
      sum + (result.vulnerabilities ? result.vulnerabilities.filter(v => v.severity === 'CRITICAL').length : 0), 0
    );

    const scanResults = {
      totalDependencies,
      totalVulnerabilities,
      criticalVulnerabilities,
      scanDate: new Date().toISOString()
    };

    // Create notification for scan completion
    try {
      await NotificationService.createScanCompleteNotification(userId, Number(projectId), {
        summary: scanResults
      });
    } catch (notificationError) {
      console.error('Error creating scan notification:', notificationError);
      // Don't fail the scan if notification fails
    }

    res.json({ 
      status: 'Scan complete', 
      results,
      summary: scanResults
    });

  } catch (error) {
    console.error('Scan error:', error);
    res.status(500).json({ 
      error: 'Failed to process scan',
      details: process.env.NODE_ENV === 'development' ? error.message : undefined
    });
  } finally {
    // Clean up uploaded file
    if (uploadedFilePath) {
      cleanupFile(uploadedFilePath);
    }
  }
};

exports.getScanResults = async (req, res) => {
  try {
    const { projectId } = req.params;
    const userId = req.user.id;
    
    const project = await prisma.project.findUnique({ 
      where: { id: Number(projectId), userId } 
    });
    
    if (!project) {
      return res.status(403).json({ error: 'Project not found or access denied' });
    }

    const deps = await prisma.dependency.findMany({ 
      where: { projectId: Number(projectId) }, 
      include: { issues: true } 
    });

    const classified = dependencyService.classifyRisks(
      deps.map(d => ({ ...d, issues: d.issues }))
    );

    res.json(classified);
  } catch (error) {
    console.error('Get scan results error:', error);
    res.status(500).json({ error: 'Failed to retrieve scan results' });
  }
};

exports.getScanHistory = async (req, res) => {
  try {
    const { projectId } = req.params;
    const userId = req.user.id;
    
    const project = await prisma.project.findUnique({ 
      where: { id: Number(projectId), userId } 
    });
    
    if (!project) {
      return res.status(403).json({ error: 'Project not found or access denied' });
    }
    
    const deps = await prisma.dependency.findMany({ 
      where: { projectId: Number(projectId) }, 
      include: { issues: true },
      orderBy: { id: 'desc' }
    });

    // Group by scan date (using current date since dependency doesn't have createdAt)
    const history = deps.map(dep => ({
      id: dep.id,
      dependencyName: dep.name,
      dependencyVersion: dep.version,
      scanDate: new Date().toISOString(), // Use current date as scan date
      vulnerabilityCount: dep.issues.length,
      criticalCount: dep.issues.filter(i => i.severity === 'CRITICAL').length,
      highCount: dep.issues.filter(i => i.severity === 'HIGH').length,
      mediumCount: dep.issues.filter(i => i.severity === 'MEDIUM').length,
      lowCount: dep.issues.filter(i => i.severity === 'LOW').length
    }));
    
    // Always return a valid response, even if empty
    res.json({ 
      history: history,
      totalScans: history.length,
      projectId: Number(projectId)
    });
  } catch (error) {
    console.error('Get scan history error:', error);
    // Return a more specific error message
    res.status(500).json({ 
      error: 'Failed to retrieve scan history',
      details: process.env.NODE_ENV === 'development' ? error.message : undefined
    });
  }
};
│   │   │   # --- End: scanController.js ---

│   │   │   ├─ userController.js

│   │   │   # --- Begin: userController.js ---
const prisma = require('../config/db');

exports.getProfile = async (req, res) => {
  try {
    const user = await prisma.user.findUnique({ where: { id: req.user.id } });
    if (!user) return res.status(404).json({ error: 'User not found' });
    const { id, email, name, role, emailNotifications, dailyDigest, securityAlerts, alertFrequency } = user;
    res.json({ id, email, name, role, emailNotifications, dailyDigest, securityAlerts, alertFrequency });
  } catch (e) {
    res.status(500).json({ error: e.message });
  }
};

exports.updateProfile = async (req, res) => {
  try {
    const { name, emailNotifications, dailyDigest, securityAlerts, alertFrequency } = req.body;
    const user = await prisma.user.update({
      where: { id: req.user.id },
      data: { name, emailNotifications, dailyDigest, securityAlerts, alertFrequency }
    });
    res.json({ status: 'Profile updated', user });
  } catch (e) {
    res.status(500).json({ error: e.message });
  }
};
│   │   │   # --- End: userController.js ---

│   │   ├─ jobs/
│   │   │   ├─ alertScheduler.js

│   │   │   # --- Begin: alertScheduler.js ---
const cron = require('node-cron');
const emailService = require('../services/emailService');

module.exports = () => {
  cron.schedule('0 * * * *', async () => {
    // TODO: Fetch users and alert configs, send emails
    // await emailService.sendAlert(user, alert);
    console.log('Alert scheduler ran');
  });
};
│   │   │   # --- End: alertScheduler.js ---

│   │   │   ├─ dailyScan.js

│   │   │   # --- Begin: dailyScan.js ---
const cron = require('node-cron');
const prisma = require('../config/db');
const cveFetcher = require('../utils/cveFetcher');

module.exports = () => {
  cron.schedule('0 0 * * *', async () => {
    const projects = await prisma.project.findMany();
    for (const project of projects) {
      const deps = await prisma.dependency.findMany({ where: { projectId: project.id } });
      for (const dep of deps) {
        const issues = await cveFetcher.fetchCVEs(dep);
        await prisma.issue.deleteMany({ where: { dependencyId: dep.id } });
        for (const issue of issues) {
          await prisma.issue.create({ data: { title: issue.title, description: issue.description, severity: issue.severity, dependencyId: dep.id, cveId: issue.cveId } });
        }
      }
    }
    console.log('Daily scan complete');
  });
};
│   │   │   # --- End: dailyScan.js ---

│   │   ├─ logs/
│   │   │   ├─ app.log

│   │   │   # --- Begin: app.log ---
{"timestamp":"2025-08-07T09:40:31.467Z","level":"INFO","message":"GET / - 404 (25ms)","data":{"method":"GET","url":"/","status":404,"duration":"25ms","userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36","ip":"::1"}}

│   │   │   # --- End: app.log ---

│   │   ├─ middlewares/
│   │   │   ├─ adminMiddleware.js

│   │   │   # --- Begin: adminMiddleware.js ---
module.exports = (req, res, next) => {
  if (req.user && req.user.role === 'admin') {
    return next();
  }
  return res.status(403).json({ error: 'Admin only' });
};
│   │   │   # --- End: adminMiddleware.js ---

│   │   │   ├─ authMiddleware.js

│   │   │   # --- Begin: authMiddleware.js ---
const jwt = require('jsonwebtoken');
const prisma = require('../config/db');

module.exports = async (req, res, next) => {
  const authHeader = req.headers.authorization;
  if (!authHeader) return res.status(401).json({ error: 'No token' });
  const token = authHeader.split(' ')[1];
  try {
    const decoded = jwt.verify(token, process.env.JWT_SECRET || 'devsecret');
    const user = await prisma.user.findUnique({ where: { id: decoded.id } });
    if (!user) return res.status(401).json({ error: 'Invalid user' });
    req.user = { id: user.id, role: user.role || 'user' };
    next();
  } catch (e) {
    res.status(401).json({ error: 'Invalid token' });
  }
};
│   │   │   # --- End: authMiddleware.js ---

│   │   │   ├─ errorHandler.js

│   │   │   # --- Begin: errorHandler.js ---
// Error handler middleware
module.exports = (err, req, res, next) => {
  res.status(err.status || 500).json({ error: err.message || 'Server error' });
};
│   │   │   # --- End: errorHandler.js ---

│   │   │   ├─ rateLimiter.js

│   │   │   # --- Begin: rateLimiter.js ---
// Rate limiter middleware
const rateLimit = require('express-rate-limit');

// Create rate limiter for general API endpoints
const apiLimiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 minutes
  max: 100, // limit each IP to 100 requests per windowMs
  message: {
    error: 'Too many requests from this IP, please try again later.'
  },
  standardHeaders: true, // Return rate limit info in the `RateLimit-*` headers
  legacyHeaders: false, // Disable the `X-RateLimit-*` headers
});

// Create rate limiter for auth endpoints (more strict)
const authLimiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 minutes
  max: 50, // limit each IP to 50 requests per windowMs (increased for testing)
  message: {
    error: 'Too many authentication attempts, please try again later.'
  },
  standardHeaders: true,
  legacyHeaders: false,
});

// Create rate limiter for file uploads
const uploadLimiter = rateLimit({
  windowMs: 60 * 60 * 1000, // 1 hour
  max: 10, // limit each IP to 10 uploads per hour
  message: {
    error: 'Too many file uploads, please try again later.'
  },
  standardHeaders: true,
  legacyHeaders: false,
});

module.exports = {
  apiLimiter,
  authLimiter,
  uploadLimiter
};
│   │   │   # --- End: rateLimiter.js ---

│   │   ├─ prisma/
│   │   │   ├─ schema.prisma

│   │   │   # --- Begin: schema.prisma ---
// Prisma schema for VulnWatchdog
// Data model: Users → Projects → Dependencies → Issues

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  name      String?
  role      String   @default("user")
  projects  Project[]
  createdAt DateTime @default(now())
  emailNotifications Boolean? @default(true)
  dailyDigest Boolean? @default(false)
  securityAlerts Boolean? @default(true)
  alertFrequency String? @default("immediate")
  notifications Notification[]
  collaborators Collaborator[]
  auditLogs   AuditLog[]
}

model Project {
  id           Int           @id @default(autoincrement())
  name         String
  description  String?
  user         User          @relation(fields: [userId], references: [id])
  userId       Int
  dependencies Dependency[]
  collaborators Collaborator[]
  createdAt    DateTime      @default(now())
}

model Dependency {
  id         Int      @id @default(autoincrement())
  name       String
  version    String
  project    Project  @relation(fields: [projectId], references: [id])
  projectId  Int
  issues     Issue[]
}

model Issue {
  id            Int      @id @default(autoincrement())
  title         String
  description   String?
  severity      String
  dependency    Dependency @relation(fields: [dependencyId], references: [id])
  dependencyId  Int
  cveId         String?
  createdAt     DateTime  @default(now())
}

model Notification {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  message   String
  type      String   @default("system")
  metadata  String?  // JSON string for additional data
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
}

model Collaborator {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  project   Project  @relation(fields: [projectId], references: [id])
  projectId Int
  role      String   @default("member")
  invitedAt DateTime @default(now())
}

model AuditLog {
  id        Int      @id @default(autoincrement())
  user      User?    @relation(fields: [userId], references: [id])
  userId    Int?
  action    String
  details   String?
  createdAt DateTime @default(now())
}
│   │   │   # --- End: schema.prisma ---

│   │   │   ├─ migrations/
│   │   │   │   ├─ migration_lock.toml

│   │   │   │   # --- Begin: migration_lock.toml ---
# Please do not edit this file manually
# It should be added in your version-control system (e.g., Git)
provider = "postgresql"

│   │   │   │   # --- End: migration_lock.toml ---

│   │   │   │   ├─ 20250805102817_init/
│   │   │   │   │   ├─ migration.sql

│   │   │   │   │   # --- Begin: migration.sql ---
-- CreateTable
CREATE TABLE "public"."User" (
    "id" SERIAL NOT NULL,
    "email" TEXT NOT NULL,
    "password" TEXT NOT NULL,
    "name" TEXT,
    "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "emailNotifications" BOOLEAN DEFAULT true,
    "dailyDigest" BOOLEAN DEFAULT false,
    "securityAlerts" BOOLEAN DEFAULT true,
    "alertFrequency" TEXT DEFAULT 'immediate',

    CONSTRAINT "User_pkey" PRIMARY KEY ("id")
);

-- CreateTable
CREATE TABLE "public"."Project" (
    "id" SERIAL NOT NULL,
    "name" TEXT NOT NULL,
    "description" TEXT,
    "userId" INTEGER NOT NULL,
    "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,

    CONSTRAINT "Project_pkey" PRIMARY KEY ("id")
);

-- CreateTable
CREATE TABLE "public"."Dependency" (
    "id" SERIAL NOT NULL,
    "name" TEXT NOT NULL,
    "version" TEXT NOT NULL,
    "projectId" INTEGER NOT NULL,

    CONSTRAINT "Dependency_pkey" PRIMARY KEY ("id")
);

-- CreateTable
CREATE TABLE "public"."Issue" (
    "id" SERIAL NOT NULL,
    "title" TEXT NOT NULL,
    "description" TEXT,
    "severity" TEXT NOT NULL,
    "dependencyId" INTEGER NOT NULL,
    "cveId" TEXT,
    "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,

    CONSTRAINT "Issue_pkey" PRIMARY KEY ("id")
);

-- CreateIndex
CREATE UNIQUE INDEX "User_email_key" ON "public"."User"("email");

-- AddForeignKey
ALTER TABLE "public"."Project" ADD CONSTRAINT "Project_userId_fkey" FOREIGN KEY ("userId") REFERENCES "public"."User"("id") ON DELETE RESTRICT ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "public"."Dependency" ADD CONSTRAINT "Dependency_projectId_fkey" FOREIGN KEY ("projectId") REFERENCES "public"."Project"("id") ON DELETE RESTRICT ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "public"."Issue" ADD CONSTRAINT "Issue_dependencyId_fkey" FOREIGN KEY ("dependencyId") REFERENCES "public"."Dependency"("id") ON DELETE RESTRICT ON UPDATE CASCADE;

│   │   │   │   │   # --- End: migration.sql ---

│   │   │   │   ├─ 20250805114202_add_role_to_user/
│   │   │   │   │   ├─ migration.sql

│   │   │   │   │   # --- Begin: migration.sql ---
-- AlterTable
ALTER TABLE "public"."User" ADD COLUMN     "role" TEXT NOT NULL DEFAULT 'user';

-- CreateTable
CREATE TABLE "public"."Notification" (
    "id" SERIAL NOT NULL,
    "userId" INTEGER NOT NULL,
    "message" TEXT NOT NULL,
    "read" BOOLEAN NOT NULL DEFAULT false,
    "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,

    CONSTRAINT "Notification_pkey" PRIMARY KEY ("id")
);

-- CreateTable
CREATE TABLE "public"."Collaborator" (
    "id" SERIAL NOT NULL,
    "userId" INTEGER NOT NULL,
    "projectId" INTEGER NOT NULL,
    "role" TEXT NOT NULL DEFAULT 'member',
    "invitedAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,

    CONSTRAINT "Collaborator_pkey" PRIMARY KEY ("id")
);

-- CreateTable
CREATE TABLE "public"."AuditLog" (
    "id" SERIAL NOT NULL,
    "userId" INTEGER,
    "action" TEXT NOT NULL,
    "details" TEXT,
    "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,

    CONSTRAINT "AuditLog_pkey" PRIMARY KEY ("id")
);

-- AddForeignKey
ALTER TABLE "public"."Notification" ADD CONSTRAINT "Notification_userId_fkey" FOREIGN KEY ("userId") REFERENCES "public"."User"("id") ON DELETE RESTRICT ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "public"."Collaborator" ADD CONSTRAINT "Collaborator_userId_fkey" FOREIGN KEY ("userId") REFERENCES "public"."User"("id") ON DELETE RESTRICT ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "public"."Collaborator" ADD CONSTRAINT "Collaborator_projectId_fkey" FOREIGN KEY ("projectId") REFERENCES "public"."Project"("id") ON DELETE RESTRICT ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "public"."AuditLog" ADD CONSTRAINT "AuditLog_userId_fkey" FOREIGN KEY ("userId") REFERENCES "public"."User"("id") ON DELETE SET NULL ON UPDATE CASCADE;

│   │   │   │   │   # --- End: migration.sql ---

│   │   ├─ routes/
│   │   │   ├─ admin.js

│   │   │   # --- Begin: admin.js ---
const express = require('express');
const router = express.Router();
const notificationController = require('../controllers/notificationController');
const auth = require('../middlewares/authMiddleware');
const admin = require('../middlewares/adminMiddleware');

/**
 * @swagger
 * /api/admin/users:
 *   get:
 *     summary: List all users (admin)
 *     responses:
 *       200:
 *         description: List of users
 */
router.get('/users', auth, admin, notificationController.listUsers);

/**
 * @swagger
 * /api/admin/projects:
 *   get:
 *     summary: List all projects (admin)
 *     responses:
 *       200:
 *         description: List of projects
 */
router.get('/projects', auth, admin, notificationController.listProjects);

/**
 * @swagger
 * /api/admin/logs:
 *   get:
 *     summary: Get audit logs (admin)
 *     responses:
 *       200:
 *         description: List of audit logs
 */
router.get('/logs', auth, admin, notificationController.listAuditLogs);

module.exports = router; 
│   │   │   # --- End: admin.js ---

│   │   │   ├─ alerts.js

│   │   │   # --- Begin: alerts.js ---
const express = require('express');
const router = express.Router();
const alertController = require('../controllers/alertController');
const auth = require('../middlewares/authMiddleware');

/**
 * @swagger
 * /api/alerts/config:
 *   post:
 *     summary: Set alert configuration
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               emailNotifications:
 *                 type: boolean
 *               dailyDigest:
 *                 type: boolean
 *               securityAlerts:
 *                 type: boolean
 *               alertFrequency:
 *                 type: string
 *     responses:
 *       200:
 *         description: Alert config saved
 */
router.post('/config', auth, alertController.setAlertConfig);

/**
 * @swagger
 * /api/alerts/test:
 *   post:
 *     summary: Send test alert
 *     responses:
 *       200:
 *         description: Test alert sent
 */
router.post('/test', auth, alertController.sendTestAlert);

module.exports = router;
│   │   │   # --- End: alerts.js ---

│   │   │   ├─ auth.js

│   │   │   # --- Begin: auth.js ---
const express = require('express');
const router = express.Router();
const authController = require('../controllers/authController');
const auth = require('../middlewares/authMiddleware');

/**
 * @swagger
 * /api/auth/register:
 *   post:
 *     summary: Register a new user
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               email:
 *                 type: string
 *               password:
 *                 type: string
 *               name:
 *                 type: string
 *     responses:
 *       200:
 *         description: User registered
 */
router.post('/register', authController.register);

/**
 * @swagger
 * /api/auth/login:
 *   post:
 *     summary: Login and get JWT token
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               email:
 *                 type: string
 *               password:
 *                 type: string
 *     responses:
 *       200:
 *         description: JWT token
 */
router.post('/login', authController.login);

/**
 * @swagger
 * /api/auth/logout:
 *   post:
 *     summary: Logout user (client should delete token)
 *     responses:
 *       200:
 *         description: Logged out
 */
router.post('/logout', auth, authController.logout);

/**
 * @swagger
 * /api/auth/forgot:
 *   post:
 *     summary: Request password reset
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               email:
 *                 type: string
 *     responses:
 *       200:
 *         description: Password reset email sent
 */
router.post('/forgot', authController.forgotPassword);

module.exports = router;
│   │   │   # --- End: auth.js ---

│   │   │   ├─ notifications.js

│   │   │   # --- Begin: notifications.js ---
const express = require('express');
const router = express.Router();
const notificationController = require('../controllers/notificationController');
const auth = require('../middlewares/authMiddleware');

/**
 * @swagger
 * /api/notifications:
 *   get:
 *     summary: List in-app notifications with pagination
 *     parameters:
 *       - in: query
 *         name: page
 *         schema:
 *           type: integer
 *           default: 1
 *       - in: query
 *         name: limit
 *         schema:
 *           type: integer
 *           default: 20
 *       - in: query
 *         name: type
 *         schema:
 *           type: string
 *           enum: [system, security, scan, collaboration]
 *     responses:
 *       200:
 *         description: List of notifications with pagination
 */
router.get('/', auth, notificationController.listNotifications);

/**
 * @swagger
 * /api/notifications/stream:
 *   get:
 *     summary: Server-Sent Events stream for real-time notifications
 *     responses:
 *       200:
 *         description: Event stream for real-time notifications
 */
router.get('/stream', auth, notificationController.streamNotifications);

/**
 * @swagger
 * /api/notifications/read:
 *   post:
 *     summary: Mark notification as read
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               notificationId:
 *                 type: integer
 *     responses:
 *       200:
 *         description: Notification marked as read
 */
router.post('/read', auth, notificationController.markAsRead);

/**
 * @swagger
 * /api/notifications/read-all:
 *   post:
 *     summary: Mark all notifications as read
 *     responses:
 *       200:
 *         description: All notifications marked as read
 */
router.post('/read-all', auth, notificationController.markAllAsRead);

/**
 * @swagger
 * /api/notifications/unread-count:
 *   get:
 *     summary: Get unread notification count
 *     responses:
 *       200:
 *         description: Unread notification count
 */
router.get('/unread-count', auth, notificationController.getUnreadCount);

/**
 * @swagger
 * /api/notifications/test:
 *   post:
 *     summary: Create a test notification
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               message:
 *                 type: string
 *               type:
 *                 type: string
 *                 enum: [system, security, scan, collaboration]
 *     responses:
 *       200:
 *         description: Test notification created
 */
router.post('/test', auth, notificationController.createTestNotification);

module.exports = router; 
│   │   │   # --- End: notifications.js ---

│   │   │   ├─ project.js

│   │   │   # --- Begin: project.js ---
const express = require('express');
const router = express.Router();
const projectController = require('../controllers/projectController');
const auth = require('../middlewares/authMiddleware');

/**
 * @swagger
 * /api/project:
 *   post:
 *     summary: Create a new project
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               name:
 *                 type: string
 *               description:
 *                 type: string
 *               repositoryUrl:
 *                 type: string
 *     responses:
 *       201:
 *         description: Project created
 */
router.post('/', auth, projectController.createProject);

/**
 * @swagger
 * /api/project:
 *   get:
 *     summary: Get user's projects
 *     responses:
 *       200:
 *         description: List of user's projects
 */
router.get('/', auth, projectController.getProjects);

/**
 * @swagger
 * /api/project/{id}:
 *   get:
 *     summary: Get project details
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: integer
 *     responses:
 *       200:
 *         description: Project details
 */
router.get('/:id', auth, projectController.getProjectDetails);

/**
 * @swagger
 * /api/project/{id}/collaborator:
 *   post:
 *     summary: Add collaborator to project
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: integer
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               email:
 *                 type: string
 *     responses:
 *       200:
 *         description: Collaborator added
 */
router.post('/:id/collaborator', auth, projectController.addCollaborator);

/**
 * @swagger
 * /api/project/{id}/export:
 *   get:
 *     summary: Export project report
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: integer
 *       - in: query
 *         name: format
 *         schema:
 *           type: string
 *           enum: [pdf, csv]
 *     responses:
 *       200:
 *         description: Exported report
 */
router.get('/:id/export', auth, projectController.exportProject);

module.exports = router;
│   │   │   # --- End: project.js ---

│   │   │   ├─ scan.js

│   │   │   # --- Begin: scan.js ---
const express = require('express');
const router = express.Router();
const scanController = require('../controllers/scanController');
const { upload, handleUploadError } = require('../utils/uploadConfig');
const auth = require('../middlewares/authMiddleware');

/**
 * @swagger
 * /api/scan/history/{projectId}:
 *   get:
 *     summary: Get scan history for a project
 *     parameters:
 *       - in: path
 *         name: projectId
 *         required: true
 *         schema:
 *           type: integer
 *     responses:
 *       200:
 *         description: Scan history
 */
router.get('/history/:projectId', auth, scanController.getScanHistory);

/**
 * @swagger
 * /api/scan/:
 *   post:
 *     summary: Submit dependency file and initiate scan
 *     requestBody:
 *       required: true
 *       content:
 *         multipart/form-data:
 *           schema:
 *             type: object
 *             properties:
 *               file:
 *                 type: string
 *                 format: binary
 *                 description: Dependency file (package.json, requirements.txt, etc.)
 *               projectId:
 *                 type: integer
 *                 description: Project ID to associate the scan with
 *     responses:
 *       200:
 *         description: Scan complete
 *       400:
 *         description: Invalid file or upload error
 *       413:
 *         description: File too large
 */
router.post('/', auth, upload.single('file'), handleUploadError, scanController.initiateScan);

/**
 * @swagger
 * /api/scan/{projectId}:
 *   get:
 *     summary: Get scan results for a project
 *     parameters:
 *       - in: path
 *         name: projectId
 *         required: true
 *         schema:
 *           type: integer
 *     responses:
 *       200:
 *         description: Scan results
 */
router.get('/:projectId', auth, scanController.getScanResults);

module.exports = router;
│   │   │   # --- End: scan.js ---

│   │   │   ├─ user.js

│   │   │   # --- Begin: user.js ---
const express = require('express');
const router = express.Router();
const userController = require('../controllers/userController');
const auth = require('../middlewares/authMiddleware');

/**
 * @swagger
 * /api/user/profile:
 *   get:
 *     summary: Get user profile and alert config
 *     responses:
 *       200:
 *         description: User profile
 */
router.get('/profile', auth, userController.getProfile);

/**
 * @swagger
 * /api/user/profile:
 *   put:
 *     summary: Update user profile and alert config
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               name:
 *                 type: string
 *               emailNotifications:
 *                 type: boolean
 *               dailyDigest:
 *                 type: boolean
 *               securityAlerts:
 *                 type: boolean
 *               alertFrequency:
 *                 type: string
 *     responses:
 *       200:
 *         description: Profile updated
 */
router.put('/profile', auth, userController.updateProfile);

module.exports = router; 
│   │   │   # --- End: user.js ---

│   │   ├─ services/
│   │   │   ├─ authService.js

│   │   │   # --- Begin: authService.js ---
const prisma = require('../config/db');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');

exports.register = async ({ email, password, name, role }) => {
  const hashed = await bcrypt.hash(password, 10);
  return prisma.user.create({ data: { email, password: hashed, name, role: role || 'user' } });
};

exports.login = async (email, password) => {
  const user = await prisma.user.findUnique({ where: { email } });
  if (!user || !(await bcrypt.compare(password, user.password))) return null;
  const token = jwt.sign({ id: user.id, role: user.role || 'user' }, process.env.JWT_SECRET || 'devsecret');
  return { token, role: user.role || 'user' };
};
│   │   │   # --- End: authService.js ---

│   │   │   ├─ dependencyService.js

│   │   │   # --- Begin: dependencyService.js ---
// Dependency service
exports.parseFile = async (file) => {
  // Already handled in fileParser
};
exports.classifyRisks = (deps) => {
  return deps.map(dep => {
    let risk = 'secure';
    if (dep.issues.some(i => i.severity === 'CRITICAL')) risk = 'critical';
    else if (dep.issues.some(i => i.severity === 'HIGH')) risk = 'high';
    else if (dep.issues.some(i => i.severity === 'MEDIUM')) risk = 'medium';
    else if (dep.issues.some(i => i.severity === 'LOW')) risk = 'low';
    return { ...dep, risk };
  });
};
│   │   │   # --- End: dependencyService.js ---

│   │   │   ├─ emailService.js

│   │   │   # --- Begin: emailService.js ---
const nodemailer = require('nodemailer');

// Create transporter with fallback for testing
const createTransporter = () => {
  // If email credentials are not configured, use a mock transporter
  if (!process.env.EMAIL_USER || !process.env.EMAIL_PASS) {
    console.log('Email credentials not configured, using mock transporter');
    return nodemailer.createTransport({
      host: 'localhost',
      port: 1025,
      secure: false,
      ignoreTLS: true,
      auth: {
        user: 'test',
        pass: 'test'
      }
    });
  }

  // Production SMTP configuration
  if (process.env.SMTP_HOST) {
    return nodemailer.createTransport({
      host: process.env.SMTP_HOST,
      port: parseInt(process.env.SMTP_PORT) || 587,
      secure: process.env.SMTP_SECURE === 'true',
      auth: {
        user: process.env.SMTP_USER || process.env.EMAIL_USER,
        pass: process.env.SMTP_PASS || process.env.EMAIL_PASS
      },
      tls: {
        rejectUnauthorized: false
      }
    });
  }

  // Gmail configuration (fallback)
  return nodemailer.createTransport({
    service: 'gmail',
    auth: {
      user: process.env.EMAIL_USER,
      pass: process.env.EMAIL_PASS
    }
  });
};

const transporter = createTransporter();

exports.sendAlert = async (user, alert) => {
  try {
    // Check if email credentials are configured
    if (!process.env.EMAIL_USER || !process.env.EMAIL_PASS) {
      console.log('Email credentials not configured, skipping email send');
      return { success: false, message: 'Email not configured' };
    }

    const mailOptions = {
      from: process.env.EMAIL_FROM || process.env.EMAIL_USER,
      to: user.email,
      subject: alert.subject,
      text: alert.text,
      html: alert.html || alert.text // Support HTML emails
    };
    
    await transporter.sendMail(mailOptions);
    
    console.log('Alert email sent to:', user.email);
    return { success: true, message: 'Email sent successfully' };
  } catch (error) {
    console.error('Email send error:', error);
    
    // Always return a result instead of throwing in development/test
    return { 
      success: false, 
      message: 'Email failed but continuing', 
      error: error.message 
    };
  }
};

// Enhanced email functions for production
exports.sendSecurityAlert = async (user, vulnerability) => {
  const alert = {
    subject: `🚨 Security Alert: ${vulnerability.title}`,
    text: `Critical vulnerability detected in your project: ${vulnerability.description}`,
    html: `
      <h2>🚨 Security Alert</h2>
      <p><strong>Vulnerability:</strong> ${vulnerability.title}</p>
      <p><strong>Severity:</strong> ${vulnerability.severity}</p>
      <p><strong>Description:</strong> ${vulnerability.description}</p>
      <p><strong>CVE ID:</strong> ${vulnerability.cveId || 'N/A'}</p>
      <hr>
      <p>Please update your dependencies immediately.</p>
    `
  };
  
  return await exports.sendAlert(user, alert);
};

exports.sendDailyDigest = async (user, summary) => {
  const alert = {
    subject: `📊 Daily Security Digest - ${new Date().toLocaleDateString()}`,
    text: `Daily security summary: ${summary.totalVulnerabilities} vulnerabilities found across ${summary.totalProjects} projects.`,
    html: `
      <h2>📊 Daily Security Digest</h2>
      <p><strong>Date:</strong> ${new Date().toLocaleDateString()}</p>
      <p><strong>Projects Scanned:</strong> ${summary.totalProjects}</p>
      <p><strong>Total Vulnerabilities:</strong> ${summary.totalVulnerabilities}</p>
      <p><strong>Critical:</strong> ${summary.criticalCount}</p>
      <p><strong>High:</strong> ${summary.highCount}</p>
      <p><strong>Medium:</strong> ${summary.mediumCount}</p>
      <p><strong>Low:</strong> ${summary.lowCount}</p>
    `
  };
  
  return await exports.sendAlert(user, alert);
};

exports.sendWelcomeEmail = async (user) => {
  const alert = {
    subject: '🎉 Welcome to VulnWatchdog!',
    text: `Welcome ${user.name}! Your account has been successfully created.`,
    html: `
      <h2>🎉 Welcome to VulnWatchdog!</h2>
      <p>Hello ${user.name},</p>
      <p>Your account has been successfully created. You can now:</p>
      <ul>
        <li>Create projects to monitor</li>
        <li>Upload dependency files for scanning</li>
        <li>Receive real-time security alerts</li>
        <li>View detailed vulnerability reports</li>
      </ul>
      <p>Get started by creating your first project!</p>
    `
  };
  
  return await exports.sendAlert(user, alert);
};

// Test email configuration
exports.testEmailConfig = async () => {
  try {
    if (!process.env.EMAIL_USER || !process.env.EMAIL_PASS) {
      return { success: false, message: 'Email not configured' };
    }

    await transporter.verify();
    return { success: true, message: 'Email configuration is valid' };
  } catch (error) {
    return { success: false, message: 'Email configuration failed', error: error.message };
  }
};
│   │   │   # --- End: emailService.js ---

│   │   │   ├─ notificationService.js

│   │   │   # --- Begin: notificationService.js ---
const prisma = require('../config/db');
const emailService = require('./emailService');

class NotificationService {
  /**
   * Create a new notification for a user
   * @param {number} userId - User ID
   * @param {string} message - Notification message
   * @param {string} type - Notification type (security, scan, system, etc.)
   * @param {object} metadata - Additional data for the notification
   * @returns {Promise<object>} Created notification
   */
  static async createNotification(userId, message, type = 'system', metadata = {}) {
    try {
      const notification = await prisma.notification.create({
        data: {
          userId,
          message,
          type,
          metadata: JSON.stringify(metadata),
          read: false
        }
      });

      // Check if user has email notifications enabled
      const user = await prisma.user.findUnique({ where: { id: userId } });
      if (user && user.emailNotifications) {
        await this.sendEmailNotification(user, message, type);
      }

      // Send real-time notification via SSE if available
      try {
        const notificationController = require('../controllers/notificationController');
        await notificationController.sendNotificationToUser(userId, notification);
        await notificationController.updateUnreadCount(userId);
      } catch (sseError) {
        console.log('SSE not available, notification saved to database');
      }

      return notification;
    } catch (error) {
      console.error('Error creating notification:', error);
      throw error;
    }
  }

  /**
   * Create security alert notification
   * @param {number} userId - User ID
   * @param {object} vulnerability - Vulnerability details
   * @param {number} projectId - Project ID
   */
  static async createSecurityAlert(userId, vulnerability, projectId) {
    const message = `Security Alert: ${vulnerability.title} found in your project. Severity: ${vulnerability.severity}`;
    const metadata = {
      vulnerabilityId: vulnerability.id,
      projectId,
      severity: vulnerability.severity,
      cveId: vulnerability.cveId
    };

    return await this.createNotification(userId, message, 'security', metadata);
  }

  /**
   * Create scan completion notification
   * @param {number} userId - User ID
   * @param {number} projectId - Project ID
   * @param {object} scanResults - Scan results
   */
  static async createScanCompleteNotification(userId, projectId, scanResults) {
    const { totalDependencies, totalVulnerabilities, criticalVulnerabilities } = scanResults.summary;
    
    let message = `Scan completed for your project. Found ${totalDependencies} dependencies`;
    if (totalVulnerabilities > 0) {
      message += ` with ${totalVulnerabilities} vulnerabilities (${criticalVulnerabilities} critical)`;
    } else {
      message += ' with no vulnerabilities found';
    }

    const metadata = {
      projectId,
      totalDependencies,
      totalVulnerabilities,
      criticalVulnerabilities
    };

    return await this.createNotification(userId, message, 'scan', metadata);
  }

  /**
   * Create system notification
   * @param {number} userId - User ID
   * @param {string} message - System message
   * @param {string} level - Notification level (info, warning, error)
   */
  static async createSystemNotification(userId, message, level = 'info') {
    const metadata = { level };
    return await this.createNotification(userId, message, 'system', metadata);
  }

  /**
   * Create project collaboration notification
   * @param {number} userId - User ID
   * @param {string} projectName - Project name
   * @param {string} action - Action performed (added, removed, updated)
   */
  static async createCollaborationNotification(userId, projectName, action) {
    const message = `You have been ${action} to project: ${projectName}`;
    const metadata = { projectName, action };
    return await this.createNotification(userId, message, 'collaboration', metadata);
  }

  /**
   * Send email notification
   * @param {object} user - User object
   * @param {string} message - Notification message
   * @param {string} type - Notification type
   */
  static async sendEmailNotification(user, message, type) {
    try {
      const subject = `VulnWatchdog ${type.charAt(0).toUpperCase() + type.slice(1)} Alert`;
      await emailService.sendAlert(user, { subject, text: message });
    } catch (error) {
      console.error('Error sending email notification:', error);
      // Don't throw error for email failures
    }
  }

  /**
   * Mark notification as read
   * @param {number} notificationId - Notification ID
   * @param {number} userId - User ID (for security)
   */
  static async markAsRead(notificationId, userId) {
    try {
      const notification = await prisma.notification.update({
        where: { 
          id: notificationId,
          userId // Ensure user owns the notification
        },
        data: { read: true }
      });
      return notification;
    } catch (error) {
      console.error('Error marking notification as read:', error);
      throw error;
    }
  }

  /**
   * Get user notifications with pagination
   * @param {number} userId - User ID
   * @param {number} page - Page number
   * @param {number} limit - Items per page
   * @param {string} type - Filter by type
   */
  static async getUserNotifications(userId, page = 1, limit = 20, type = null) {
    try {
      const skip = (page - 1) * limit;
      const where = { userId };
      
      if (type) {
        where.type = type;
      }

      const [notifications, total] = await Promise.all([
        prisma.notification.findMany({
          where,
          orderBy: { createdAt: 'desc' },
          skip,
          take: limit
        }),
        prisma.notification.count({ where })
      ]);

      return {
        notifications,
        pagination: {
          page,
          limit,
          total,
          pages: Math.ceil(total / limit)
        }
      };
    } catch (error) {
      console.error('Error getting user notifications:', error);
      throw error;
    }
  }

  /**
   * Get unread notification count for user
   * @param {number} userId - User ID
   */
  static async getUnreadCount(userId) {
    try {
      return await prisma.notification.count({
        where: { userId, read: false }
      });
    } catch (error) {
      console.error('Error getting unread count:', error);
      throw error;
    }
  }

  /**
   * Mark all notifications as read for user
   * @param {number} userId - User ID
   */
  static async markAllAsRead(userId) {
    try {
      await prisma.notification.updateMany({
        where: { userId, read: false },
        data: { read: true }
      });
    } catch (error) {
      console.error('Error marking all notifications as read:', error);
      throw error;
    }
  }

  /**
   * Delete old notifications (cleanup)
   * @param {number} daysOld - Delete notifications older than this many days
   */
  static async cleanupOldNotifications(daysOld = 30) {
    try {
      const cutoffDate = new Date();
      cutoffDate.setDate(cutoffDate.getDate() - daysOld);

      await prisma.notification.deleteMany({
        where: {
          createdAt: { lt: cutoffDate },
          read: true // Only delete read notifications
        }
      });
    } catch (error) {
      console.error('Error cleaning up old notifications:', error);
      throw error;
    }
  }
}

module.exports = NotificationService; 
│   │   │   # --- End: notificationService.js ---

│   │   │   ├─ scanService.js

│   │   │   # --- Begin: scanService.js ---
// Scan service
const prisma = require('../config/db');
const fileParser = require('../utils/fileParser');
const cveFetcher = require('../utils/cveFetcher');
const versionChecker = require('../utils/versionChecker');
const NotificationService = require('./notificationService');
const logger = require('../utils/logger');

exports.orchestrateScan = async (projectId, file) => {
  try {
    logger.log(`Starting scan for project ${projectId}`);
    
    // Read and parse the uploaded file
    const fileContent = file.buffer.toString('utf-8');
    const deps = fileParser.detectAndParse(fileContent, file.originalname);
    
    if (!deps || deps.length === 0) {
      throw new Error('No dependencies found in the uploaded file');
    }
    
    logger.log(`Found ${deps.length} dependencies in ${file.originalname}`);
    
    const results = [];
    const scanStartTime = new Date();
    
    // Process each dependency
    for (const dep of deps) {
      try {
        logger.log(`Processing dependency: ${dep.name}@${dep.version}`);
        
        // Fetch CVE data
        const issues = await cveFetcher.fetchCVEs(dep);
        
        // Check for version updates
        const versionInfo = await versionChecker.checkLatest(dep);
        
        // Save dependency to database
        const dbDep = await prisma.dependency.create({
          data: {
            name: dep.name,
            version: dep.version,
            projectId: Number(projectId)
          }
        });
        
        // Save issues to database
        for (const issue of issues) {
          await prisma.issue.create({
            data: {
              title: issue.title,
              description: issue.description,
              severity: issue.severity,
              dependencyId: dbDep.id,
              cveId: issue.cveId
            }
          });
        }
        
        results.push({
          dependency: { ...dbDep },
          vulnerabilities: issues,
          vulnerabilityCount: issues.length,
          versionInfo,
          risk: issues.some(i => i.severity === 'CRITICAL') ? 'critical' :
                issues.some(i => i.severity === 'HIGH') ? 'high' :
                issues.some(i => i.severity === 'MEDIUM') ? 'medium' :
                issues.some(i => i.severity === 'LOW') ? 'low' : 'secure'
        });
        
        logger.log(`Completed processing ${dep.name}: ${issues.length} vulnerabilities found`);
        
      } catch (depError) {
        logger.error(`Error processing dependency ${dep.name}:`, depError);
        results.push({
          dependency: { name: dep.name, version: dep.version },
          error: 'Failed to process dependency',
          vulnerabilities: [],
          risk: 'unknown'
        });
      }
    }
    
    // Calculate summary statistics
    const totalDependencies = results.length;
    const totalVulnerabilities = results.reduce((sum, result) => 
      sum + (result.vulnerabilities ? result.vulnerabilities.length : 0), 0
    );
    const criticalVulnerabilities = results.reduce((sum, result) => 
      sum + (result.vulnerabilities ? result.vulnerabilities.filter(v => v.severity === 'CRITICAL').length : 0), 0
    );
    const highVulnerabilities = results.reduce((sum, result) => 
      sum + (result.vulnerabilities ? result.vulnerabilities.filter(v => v.severity === 'HIGH').length : 0), 0
    );
    
    const scanResults = {
      totalDependencies,
      totalVulnerabilities,
      criticalVulnerabilities,
      highVulnerabilities,
      scanDate: scanStartTime.toISOString(),
      duration: Date.now() - scanStartTime.getTime()
    };
    
    logger.log(`Scan completed for project ${projectId}: ${totalVulnerabilities} vulnerabilities found`);
    
    return {
      results,
      summary: scanResults,
      success: true
    };
    
  } catch (error) {
    logger.error('Scan orchestration failed:', error);
    throw error;
  }
};

// Get scan statistics for a project
exports.getScanStats = async (projectId) => {
  try {
    const deps = await prisma.dependency.findMany({
      where: { projectId: Number(projectId) },
      include: { issues: true }
    });
    
    const stats = {
      totalDependencies: deps.length,
      totalVulnerabilities: deps.reduce((sum, dep) => sum + dep.issues.length, 0),
      criticalVulnerabilities: deps.reduce((sum, dep) => 
        sum + dep.issues.filter(i => i.severity === 'CRITICAL').length, 0
      ),
      highVulnerabilities: deps.reduce((sum, dep) => 
        sum + dep.issues.filter(i => i.severity === 'HIGH').length, 0
      ),
      mediumVulnerabilities: deps.reduce((sum, dep) => 
        sum + dep.issues.filter(i => i.severity === 'MEDIUM').length, 0
      ),
      lowVulnerabilities: deps.reduce((sum, dep) => 
        sum + dep.issues.filter(i => i.severity === 'LOW').length, 0
      ),
      lastScanDate: deps.length > 0 ? 
        new Date(Math.max(...deps.map(d => d.createdAt.getTime()))) : null
    };
    
    return stats;
  } catch (error) {
    logger.error('Error getting scan stats:', error);
    throw error;
  }
};
│   │   │   # --- End: scanService.js ---

│   │   ├─ uploads/
│   │   │   ├─ 1754415698395_khot4grsoj.txt

│   │   │   # --- Begin: 1754415698395_khot4grsoj.txt ---
requests==2.31.0
flask==2.3.3
django==4.2.7
numpy==1.24.3
pandas==2.0.3
tensorflow==2.13.0
scikit-learn==1.3.0
matplotlib==3.7.2
seaborn==0.12.2
plotly==5.15.0
dash==2.11.1
fastapi==0.100.1
uvicorn==0.23.2
sqlalchemy==2.0.19
alembic==1.11.1
redis==4.6.0
celery==5.3.1
pytest==7.4.0
black==23.7.0
flake8==6.0.0
mypy==1.5.1 
│   │   │   # --- End: 1754415698395_khot4grsoj.txt ---

│   │   ├─ utils/
│   │   │   ├─ cloudStorage.js

│   │   │   # --- Begin: cloudStorage.js ---
const AWS = require('aws-sdk');
const fs = require('fs');
const path = require('path');

// Configure AWS SDK
const s3 = new AWS.S3({
  accessKeyId: process.env.AWS_ACCESS_KEY_ID,
  secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY,
  region: process.env.AWS_REGION || 'us-east-1'
});

const BUCKET_NAME = process.env.AWS_S3_BUCKET || 'vulnwatchdog-uploads';

class CloudStorage {
  /**
   * Upload file to cloud storage
   * @param {string} filePath - Local file path
   * @param {string} fileName - Name to store in cloud
   * @returns {Promise<string>} - Cloud storage URL
   */
  static async uploadFile(filePath, fileName) {
    try {
      const fileContent = fs.readFileSync(filePath);
      
      const params = {
        Bucket: BUCKET_NAME,
        Key: `uploads/${fileName}`,
        Body: fileContent,
        ContentType: this.getContentType(fileName),
        ACL: 'private', // Private by default for security
        Metadata: {
          'upload-date': new Date().toISOString(),
          'original-filename': fileName
        }
      };

      const result = await s3.upload(params).promise();
      return result.Location;
    } catch (error) {
      console.error('Cloud storage upload error:', error);
      throw new Error('Failed to upload file to cloud storage');
    }
  }

  /**
   * Download file from cloud storage
   * @param {string} fileKey - File key in cloud storage
   * @param {string} localPath - Local path to save file
   */
  static async downloadFile(fileKey, localPath) {
    try {
      const params = {
        Bucket: BUCKET_NAME,
        Key: fileKey
      };

      const result = await s3.getObject(params).promise();
      fs.writeFileSync(localPath, result.Body);
    } catch (error) {
      console.error('Cloud storage download error:', error);
      throw new Error('Failed to download file from cloud storage');
    }
  }

  /**
   * Delete file from cloud storage
   * @param {string} fileKey - File key in cloud storage
   */
  static async deleteFile(fileKey) {
    try {
      const params = {
        Bucket: BUCKET_NAME,
        Key: fileKey
      };

      await s3.deleteObject(params).promise();
    } catch (error) {
      console.error('Cloud storage delete error:', error);
      // Don't throw error for cleanup operations
    }
  }

  /**
   * Get presigned URL for temporary access
   * @param {string} fileKey - File key in cloud storage
   * @param {number} expiresIn - Expiration time in seconds (default: 3600)
   * @returns {Promise<string>} - Presigned URL
   */
  static async getPresignedUrl(fileKey, expiresIn = 3600) {
    try {
      const params = {
        Bucket: BUCKET_NAME,
        Key: fileKey,
        Expires: expiresIn
      };

      return await s3.getSignedUrlPromise('getObject', params);
    } catch (error) {
      console.error('Cloud storage presigned URL error:', error);
      throw new Error('Failed to generate presigned URL');
    }
  }

  /**
   * Get content type based on file extension
   * @param {string} fileName - File name
   * @returns {string} - Content type
   */
  static getContentType(fileName) {
    const ext = path.extname(fileName).toLowerCase();
    const contentTypes = {
      '.json': 'application/json',
      '.txt': 'text/plain',
      '.xml': 'application/xml',
      '.lock': 'text/plain'
    };
    return contentTypes[ext] || 'application/octet-stream';
  }

  /**
   * Check if cloud storage is configured
   * @returns {boolean}
   */
  static isConfigured() {
    return !!(process.env.AWS_ACCESS_KEY_ID && 
              process.env.AWS_SECRET_ACCESS_KEY && 
              process.env.AWS_S3_BUCKET);
  }
}

module.exports = CloudStorage; 
│   │   │   # --- End: cloudStorage.js ---

│   │   │   ├─ cveFetcher.js

│   │   │   # --- Begin: cveFetcher.js ---
const axios = require('axios');
exports.fetchCVEs = async (dep) => {
  try {
    const res = await axios.post('https://api.osv.dev/v1/query', {
      package: { name: dep.name },
      version: dep.version
    });
    return (res.data.vulns || []).map(v => ({
      title: v.summary || v.id,
      description: v.details || '',
      severity: v.severity ? v.severity[0].type : 'unknown',
      cveId: v.id
    }));
  } catch {
    return [];
  }
};
│   │   │   # --- End: cveFetcher.js ---

│   │   │   ├─ fileParser.js

│   │   │   # --- Begin: fileParser.js ---
// File parser util
const xml2js = require('xml2js');

const detectAndParse = (content, filename = '') => {
  try {
    if (filename.endsWith('package.json') || content.trim().startsWith('{')) {
      // package.json
      const pkg = JSON.parse(content);
      return Object.entries(pkg.dependencies || {}).map(([name, version]) => ({ name, version }));
    } else if (filename.endsWith('requirements.txt')) {
      // requirements.txt
      return content.split('\n').filter(Boolean).map(line => {
        const [name, version] = line.split('==');
        return { name: name.trim(), version: (version || '').trim() };
      });
    } else if (filename.endsWith('Gemfile')) {
      // Gemfile (very basic Ruby gem parser)
      return content.split('\n').filter(line => line.startsWith('gem ')).map(line => {
        const match = line.match(/gem ['\"]([^'\"]+)['\"],?\s*['\"]?([^'\"]*)['\"]?/);
        return match ? { name: match[1], version: match[2] || '' } : null;
      }).filter(Boolean);
    } else if (filename.endsWith('composer.json')) {
      // composer.json (PHP)
      const comp = JSON.parse(content);
      return Object.entries(comp.require || {}).map(([name, version]) => ({ name, version }));
    } else if (filename.endsWith('go.mod')) {
      // go.mod (Go)
      return content.split('\n').filter(line => line.startsWith('require ')).map(line => {
        const parts = line.replace('require ', '').split(' ');
        return { name: parts[0], version: parts[1] || '' };
      });
    } else if (filename.endsWith('pom.xml')) {
      // pom.xml (Maven)
      let deps = [];
      xml2js.parseString(content, (err, result) => {
        if (err) return [];
        const dependencies = result?.project?.dependencies?.[0]?.dependency || [];
        deps = dependencies.map(dep => ({
          name: dep.artifactId?.[0] || '',
          version: dep.version?.[0] || ''
        }));
      });
      return deps;
    } else {
      // fallback: try requirements.txt style
      return content.split('\n').filter(Boolean).map(line => {
        const [name, version] = line.split('==');
        return { name: name.trim(), version: (version || '').trim() };
      });
    }
  } catch {
    return [];
  }
};
exports.detectAndParse = detectAndParse;
│   │   │   # --- End: fileParser.js ---

│   │   │   ├─ logger.js

│   │   │   # --- Begin: logger.js ---
// Logger util
const fs = require('fs');
const path = require('path');

// Create logs directory if it doesn't exist
const logsDir = path.join(__dirname, '../logs');
if (!fs.existsSync(logsDir)) {
  fs.mkdirSync(logsDir, { recursive: true });
}

const logFile = path.join(logsDir, 'app.log');

const formatMessage = (level, message, data = null) => {
  const timestamp = new Date().toISOString();
  const logEntry = {
    timestamp,
    level,
    message,
    ...(data && { data })
  };
  return JSON.stringify(logEntry) + '\n';
};

const writeToFile = (logEntry) => {
  try {
    fs.appendFileSync(logFile, logEntry);
  } catch (error) {
    console.error('Error writing to log file:', error);
  }
};

exports.log = (message, data = null) => {
  const logEntry = formatMessage('INFO', message, data);
  console.log(message, data ? data : '');
  writeToFile(logEntry);
};

exports.error = (message, error = null) => {
  const logEntry = formatMessage('ERROR', message, error ? error.stack : null);
  console.error(message, error ? error : '');
  writeToFile(logEntry);
};

exports.warn = (message, data = null) => {
  const logEntry = formatMessage('WARN', message, data);
  console.warn(message, data ? data : '');
  writeToFile(logEntry);
};

exports.debug = (message, data = null) => {
  if (process.env.NODE_ENV === 'development') {
    const logEntry = formatMessage('DEBUG', message, data);
    console.log(`[DEBUG] ${message}`, data ? data : '');
    writeToFile(logEntry);
  }
};

// Log API requests
exports.logRequest = (req, res, next) => {
  const start = Date.now();
  
  res.on('finish', () => {
    const duration = Date.now() - start;
    const logData = {
      method: req.method,
      url: req.url,
      status: res.statusCode,
      duration: `${duration}ms`,
      userAgent: req.get('User-Agent'),
      ip: req.ip
    };
    
    exports.log(`${req.method} ${req.url} - ${res.statusCode} (${duration}ms)`, logData);
  });
  
  next();
};
│   │   │   # --- End: logger.js ---

│   │   │   ├─ uploadConfig.js

│   │   │   # --- Begin: uploadConfig.js ---
const multer = require('multer');
const path = require('path');
const fs = require('fs');

// Supported file types and their extensions
const SUPPORTED_FILES = {
  'package.json': 'application/json',
  'requirements.txt': 'text/plain',
  'pom.xml': 'application/xml',
  'Gemfile': 'text/plain',
  'composer.json': 'application/json',
  'go.mod': 'text/plain',
  'yarn.lock': 'text/plain',
  'package-lock.json': 'application/json'
};

// File size limits (in bytes)
const MAX_FILE_SIZE = 5 * 1024 * 1024; // 5MB
const MAX_FILES_PER_REQUEST = 1;

// Create uploads directory if it doesn't exist
const uploadsDir = path.join(__dirname, '../uploads');
if (!fs.existsSync(uploadsDir)) {
  fs.mkdirSync(uploadsDir, { recursive: true });
}

// Configure storage
const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    cb(null, uploadsDir);
  },
  filename: (req, file, cb) => {
    // Generate unique filename with timestamp and original extension
    const timestamp = Date.now();
    const randomString = Math.random().toString(36).substring(2, 15);
    const ext = path.extname(file.originalname);
    const filename = `${timestamp}_${randomString}${ext}`;
    cb(null, filename);
  }
});

// File filter function
const fileFilter = (req, file, cb) => {
  // Check file extension
  const ext = path.extname(file.originalname).toLowerCase();
  const filename = file.originalname.toLowerCase();
  
  // Check if file is supported
  const isSupported = Object.keys(SUPPORTED_FILES).some(supportedFile => 
    filename === supportedFile.toLowerCase() || 
    filename.endsWith(supportedFile.toLowerCase())
  );
  
  if (!isSupported) {
    return cb(new Error(`Unsupported file type. Supported files: ${Object.keys(SUPPORTED_FILES).join(', ')}`), false);
  }
  
  // Check file size
  if (file.size > MAX_FILE_SIZE) {
    return cb(new Error(`File too large. Maximum size: ${MAX_FILE_SIZE / 1024 / 1024}MB`), false);
  }
  
  cb(null, true);
};

// Configure multer
const upload = multer({
  storage: storage,
  fileFilter: fileFilter,
  limits: {
    fileSize: MAX_FILE_SIZE,
    files: MAX_FILES_PER_REQUEST
  }
});

// Cleanup function to remove uploaded files
const cleanupFile = (filePath) => {
  try {
    if (fs.existsSync(filePath)) {
      fs.unlinkSync(filePath);
    }
  } catch (error) {
    console.error('Error cleaning up file:', error);
  }
};

// Middleware to handle upload errors
const handleUploadError = (error, req, res, next) => {
  if (error instanceof multer.MulterError) {
    if (error.code === 'LIMIT_FILE_SIZE') {
      return res.status(400).json({ 
        error: `File too large. Maximum size: ${MAX_FILE_SIZE / 1024 / 1024}MB` 
      });
    }
    if (error.code === 'LIMIT_FILE_COUNT') {
      return res.status(400).json({ 
        error: `Too many files. Maximum: ${MAX_FILES_PER_REQUEST} file per request` 
      });
    }
    return res.status(400).json({ error: 'File upload error' });
  }
  
  if (error.message.includes('Unsupported file type')) {
    return res.status(400).json({ 
      error: error.message,
      supportedFiles: Object.keys(SUPPORTED_FILES)
    });
  }
  
  return res.status(500).json({ error: 'Internal server error' });
};

module.exports = {
  upload,
  cleanupFile,
  handleUploadError,
  SUPPORTED_FILES,
  MAX_FILE_SIZE,
  MAX_FILES_PER_REQUEST
}; 
│   │   │   # --- End: uploadConfig.js ---

│   │   │   ├─ versionChecker.js

│   │   │   # --- Begin: versionChecker.js ---
// Version checker util
const axios = require('axios');

// Version comparison utility
const compareVersions = (v1, v2) => {
  const normalize = v => v.replace(/^[^\d]*/, '').replace(/[^\d.]/g, '');
  const n1 = normalize(v1).split('.').map(Number);
  const n2 = normalize(v2).split('.').map(Number);
  
  for (let i = 0; i < Math.max(n1.length, n2.length); i++) {
    const num1 = n1[i] || 0;
    const num2 = n2[i] || 0;
    if (num1 > num2) return 1;
    if (num1 < num2) return -1;
  }
  return 0;
};

// Check latest version from npm registry
exports.checkLatestNpm = async (packageName) => {
  try {
    const response = await axios.get(`https://registry.npmjs.org/${packageName}/latest`);
    return response.data.version;
  } catch (error) {
    console.error(`Error fetching latest version for ${packageName}:`, error.message);
    return null;
  }
};

// Check latest version from PyPI
exports.checkLatestPyPI = async (packageName) => {
  try {
    const response = await axios.get(`https://pypi.org/pypi/${packageName}/json`);
    return response.data.info.version;
  } catch (error) {
    console.error(`Error fetching latest version for ${packageName}:`, error.message);
    return null;
  }
};

// Generic version checker
exports.checkLatest = async (dep) => {
  try {
    let latestVersion = null;
    
    // Try different registries based on package name patterns
    if (dep.name.includes('@') || dep.name.match(/^[a-z-]+$/)) {
      // Likely npm package
      latestVersion = await exports.checkLatestNpm(dep.name);
    } else if (dep.name.includes('_') || dep.name.match(/^[a-z-]+$/)) {
      // Likely PyPI package
      latestVersion = await exports.checkLatestPyPI(dep.name);
    }
    
    if (latestVersion) {
      const comparison = compareVersions(dep.version, latestVersion);
      return {
        current: dep.version,
        latest: latestVersion,
        isOutdated: comparison < 0,
        updateAvailable: comparison < 0,
        severity: comparison < 0 ? 'medium' : 'low'
      };
    }
    
    return {
      current: dep.version,
      latest: null,
      isOutdated: false,
      updateAvailable: false,
      severity: 'unknown'
    };
  } catch (error) {
    console.error('Error checking version:', error);
    return {
      current: dep.version,
      latest: null,
      isOutdated: false,
      updateAvailable: false,
      severity: 'unknown'
    };
  }
};

// Check if version is vulnerable (basic check)
exports.isVulnerableVersion = (version, vulnerableVersions = []) => {
  if (!vulnerableVersions.length) return false;
  
  return vulnerableVersions.some(vulnVersion => {
    // Check if current version matches vulnerable version pattern
    if (vulnVersion.includes('<')) {
      const maxVersion = vulnVersion.replace('<', '');
      return compareVersions(version, maxVersion) < 0;
    }
    if (vulnVersion.includes('>=')) {
      const minVersion = vulnVersion.replace('>=', '');
      return compareVersions(version, minVersion) >= 0;
    }
    if (vulnVersion.includes('=')) {
      const exactVersion = vulnVersion.replace('=', '');
      return version === exactVersion;
    }
    
    return version === vulnVersion;
  });
};
│   │   │   # --- End: versionChecker.js ---

